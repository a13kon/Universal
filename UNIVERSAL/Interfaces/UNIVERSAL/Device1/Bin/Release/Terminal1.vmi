VM_JSR _Move_DOWN_
VM_WORD_DIR 65535
VM_JSR _Move_UP_
VM_WORD_DIR 65535
VM_JSR _BoolSwap_
VM_WORD_DIR 65535
VM_JSR _SetCurrentValue_
VM_WORD_DIR 65535
VM_JSR _Increment_BYTE_
VM_WORD_DIR 65535
VM_JSR _Decrement_BYTE_
VM_WORD_DIR 65535
VM_JSR _Increment_WORD_
VM_WORD_DIR 65535
VM_JSR _Decrement_WORD_
VM_WORD_DIR 65535
VM_JSR _Increment_DWORD_
VM_WORD_DIR 65535
VM_JSR _Decrement_DWORD_
VM_WORD_DIR 65535
VM_JSR _Increment_REAL_0_
VM_WORD_DIR 65535
VM_JSR _Decrement_REAL_0_
VM_WORD_DIR 65535
VM_JSR _Increment_REAL_1_
VM_WORD_DIR 65535
VM_JSR _Decrement_REAL_1_
VM_WORD_DIR 65535
VM_JSR _Increment_REAL_2_
VM_WORD_DIR 65535
VM_JSR _Decrement_REAL_2_
VM_WORD_DIR 65535
VM_JSR _TIMED_LOOP_
VM_WORD_DIR 65535
VM_JSR _ModelLine_Confirm_
VM_WORD_DIR 65535
VM_JSR _PopUpQuestion_Confirm_
VM_WORD_DIR 65535
VM_JSR _PopUp_ESC_
VM_WORD_DIR 65535
VM_JSR _LangMsk_Esc_
VM_WORD_DIR 65535
VM_JSR _Lang_UP_
VM_WORD_DIR 65535
VM_JSR _Lang_Rus_
VM_WORD_DIR 65535
VM_JSR _Lang_Eng_
VM_WORD_DIR 65535
VM_JSR _GotoMain_
VM_WORD_DIR 65535
VM_JSR _CheckActiveAlarm_
VM_WORD_DIR 65535
VM_JSR _gotoAlarmLog_
VM_WORD_DIR 65535
VM_JSR _Slave_Alrms_Esc_
VM_WORD_DIR 65535
VM_JSR _DoNothing_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarmLog_UP_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarmLog_DOWN_
VM_WORD_DIR 65535
VM_JSR _LedBlink_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarm_UP_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarm_DOWN_
VM_WORD_DIR 65535
VM_JSR _ResetGlobalAlarm_
VM_WORD_DIR 65535
VM_JSR _Slave_Alrms_ALARM_
VM_WORD_DIR 65535
VM_JSR _Slave_Alrms_UP_
VM_WORD_DIR 65535
VM_JSR _Slave_Alrms_DOWN_
VM_WORD_DIR 65535
VM_JSR _GotoMainMenu_
VM_WORD_DIR 65535
VM_JSR _QuickMenuUP_
VM_WORD_DIR 65535
VM_JSR _QuickMenuDOWN_
VM_WORD_DIR 65535
VM_JSR _QuickMenuENT_
VM_WORD_DIR 65535
VM_JSR _CompareOnly_
VM_WORD_DIR 65535
VM_JSR _Move_CurLeft_
VM_WORD_DIR 65535
VM_JSR _Move_CurRight_
VM_WORD_DIR 65535
VM_JSR _NetMapEsc_
VM_WORD_DIR 65535
VM_JSR _GlobalEsc_
VM_WORD_DIR 65535
VM_JSR _RetGroupMask_
VM_WORD_DIR 65535
VM_JSR _Switcher_UP_
VM_WORD_DIR 65535
VM_JSR _Switcher_DOWN_
VM_WORD_DIR 65535
VM_JSR _Set_PRG_
VM_WORD_DIR 65535
VM_JSR _Set_UP_
VM_WORD_DIR 65535
VM_JSR _Set_DOWN_
VM_WORD_DIR 65535
VM_JSR _SlaveSet_ENTER_
VM_WORD_DIR 65535
VM_JSR _SlaveState_ALARM_
VM_WORD_DIR 65535
VM_JSR _SlaveState_PRG_
VM_WORD_DIR 65535
VM_JSR _DOWN_button_
VM_WORD_DIR 65535
VM_JSR _UP_button_
VM_WORD_DIR 65535
VM_JSR _PwdLogOut_
VM_WORD_DIR 65535
VM_JSR _ScrollMenuDown_
VM_WORD_DIR 65535
VM_JSR _ScrollMenuUp_
VM_WORD_DIR 65535
VM_JSR _SelMainMenu_
VM_WORD_DIR 65535
VM_JSR _SelVentilationMenu_
VM_WORD_DIR 65535
VM_JSR _SelMClimateMenu_
VM_WORD_DIR 65535
VM_JSR _SelFridgeMenu_
VM_WORD_DIR 65535
VM_JSR _SelSettingsMenu_
VM_WORD_DIR 65535
VM_JSR _SelServiceMenu_
VM_WORD_DIR 65535
VM_JSR _SelIOManageMenu_
VM_WORD_DIR 65535
VM_JSR _SelConfiguratorMenu_
VM_WORD_DIR 65535
VM_JSR _PwdLogIn_
VM_WORD_DIR 65535
VM_JSR _DecrDig_
VM_WORD_DIR 65535
VM_JSR _IncrDig_
VM_WORD_DIR 65535
VM_JSR _PRG_button_
VM_WORD_DIR 65535
VM_JSR _SelGroupMenu_
VM_WORD_DIR 65535
VM_JSR _Num_Slaves_Class_ENTER_
VM_WORD_DIR 65535
VM_JSR _DummyService_
VM_WORD_DIR 65535
VM_JSR _SetTimeZoneRu_
VM_WORD_DIR 65535
VM_JSR _SetTimeZone_
VM_WORD_DIR 65535
VM_JSR _TZUp_
VM_WORD_DIR 65535
VM_JSR _TZDwn_
VM_WORD_DIR 65535
VM_JSR _Date_PRG_button_
VM_WORD_DIR 65535
VM_JSR _EnDateChg_
VM_WORD_DIR 65535
VM_JSR _SlaveSet_ESC_
VM_WORD_DIR 65535
VM_JSR _SlaveSet_PRG_
VM_WORD_DIR 65535
VM_JSR _SlaveSet_UP_
VM_WORD_DIR 65535
VM_JSR _SlaveSet_ALARM_
VM_WORD_DIR 65535
VM_JSR _SlaveSet_DOWN_
VM_WORD_DIR 65535
VM_JSR _ChgPwd_
VM_WORD_DIR 65535
VM_JSR _SetUoMZone_UI_
VM_WORD_DIR 65535
VM_JSR _ENTER_button_
VM_WORD_DIR 65535
VM_JSR _DeleteAlarmLog_
VM_WORD_DIR 65535
VM_JSR _ClearAutoResetCounter_
VM_WORD_DIR 65535
VM_JSR _WipeMem_
VM_WORD_DIR 65535
VM_JSR _ParamImpExp_
VM_WORD_DIR 65535
VM_JSR _AlrmExp_
VM_WORD_DIR 65535
VM_JSR _IOM_PRG_button_
VM_WORD_DIR 65535
VM_JSR _Sched_UP_
VM_WORD_DIR 65535
VM_JSR _Sched_DOWN_
VM_WORD_DIR 65535
VM_JSR _Sched_ENTER_
VM_WORD_DIR 65535
VM_JSR _Sched_PRG_
VM_WORD_DIR 65535
VM_JSR _Dep_REAL_1_UP_
VM_WORD_DIR 65535
VM_JSR _Dep_REAL_1_DOWN_
VM_WORD_DIR 65535
VM_JSR _Dep_REAL_1_ENTER_
VM_WORD_DIR 65535
VM_JSR _Alrms_Log_ENTER_
VM_WORD_DIR 65535
VM_JSR _Stats_1_PRG_
VM_WORD_DIR 65535
VM_JSR _Stats_2_PRG_
VM_WORD_DIR 65535
VM_JSR _Stats_3_PRG_
VM_WORD_DIR 65535
VM_JSR _Hide_UnitModel_Class_ENTER_
VM_WORD_DIR 65535
VM_JSR _POOLConfig_PRG_
VM_WORD_DIR 65535
VM_JSR _POOLConfig_2_PRG_
VM_WORD_DIR 65535
VM_JSR _Upgrade_1_ENTER_
VM_WORD_DIR 65535
VM_JSR _Upgrade_1_PRG_
VM_WORD_DIR 65535
VM_JSR _NetMap_ENTER_
VM_WORD_DIR 65535
VM_JSR _SlaveState_ESC_
VM_WORD_DIR 65535
VM_JSR _SEQ_Settings_Set_
VM_WORD_DIR 65535
VM_JSR _SEQ_Settings_ESC_
VM_WORD_DIR 65535
VM_JSR _SEQ_Settings_DOWN_
VM_WORD_DIR 65535
VM_JSR _Incr_REAL_x1000_
VM_WORD_DIR 65535
VM_JSR _Decr_REAL_x1000_
VM_WORD_DIR 65535
VM_JSR _DeviceRole_Class_PRG_
VM_WORD_DIR 65535
VM_JSR _DeviceRole_Class_ENTER_
VM_WORD_DIR 65535
VM_JSR _Config_Reset_ENTER_
VM_WORD_DIR 65535
VM_JSR _Config_Reset_PRG_
VM_WORD_DIR 65535
VM_JSR _Config_Reset_Esc_
VM_WORD_DIR 65535
VM_JSR _HeatType_ENTER_
VM_WORD_DIR 65535
VM_JSR _Main_Testing_ESC_
VM_WORD_DIR 65535
VM_JSR _Testing_ESC_
VM_WORD_DIR 65535
VM_JSR _Port_Sel_ENTER_
VM_WORD_DIR 65535
VM_JSR _MB_Settings_1_PRG_
VM_WORD_DIR 65535
VM_JSR _MB_Settings_1_ESC_
VM_WORD_DIR 65535
VM_JSR _Mul_DWORD_x2_
VM_WORD_DIR 65535
VM_JSR _Div_DWORD_x2_
VM_WORD_DIR 65535
VM_JSR _Upgrade_OS_ESC_
VM_WORD_DIR 65535
VM_JSR _Upgrade_OS_PRG_
VM_WORD_DIR 65535
VM_JSR _PRG_button_goto10_
VM_WORD_DIR 65535
VM_JSR _DOWN_ENTER_Move_
VM_WORD_DIR 65535
VM_JSR _UP_ENTER_Move_
VM_WORD_DIR 65535
VM_JSR _Hide_DLE_Class_ENTER_
VM_WORD_DIR 65535
VM_JSR _Hide_DLE_Class_PRG_
VM_WORD_DIR 65535
VM_JSR _Temp_DLE_Class_ENTER_
VM_WORD_DIR 65535
VM_JSR _REF_Config_Confirm_PRG_
VM_WORD_DIR 65535
VM_JSR _Decrement_
VM_WORD_DIR 65535
VM_JSR _Increment_
VM_WORD_DIR 65535
VM_JSR _BoolDown_
VM_WORD_DIR 65535
VM_JSR _BoolUp_
VM_WORD_DIR 65535
VM_JSR _FConfigSetBool_
VM_WORD_DIR 65535
VM_JSR _FConfigSetByte_
VM_WORD_DIR 65535
VM_JSR _FConfigSetPriority_
VM_WORD_DIR 65535
VM_JSR _FConfig_LastMask_
VM_WORD_DIR 65535
VM_JSR _FConfig_ESC_
VM_WORD_DIR 65535
VM_JSR _Decrement_Priority_
VM_WORD_DIR 65535
VM_JSR _Increment_Priority_
VM_WORD_DIR 65535
VM_JSR _Priority_Mask_Confirm_
VM_WORD_DIR 65535
VM_JSR _ENTER_UP_goto10_
VM_WORD_DIR 65535
VM_JSR _ENTER_DOWN_goto10_
VM_WORD_DIR 65535
VM_JSR _Equipment_Priority_Mask_
VM_WORD_DIR 65535
VM_JSR _CO2_SWAP_
VM_WORD_DIR 65535
VM_JSR _Set_WorkPriority_
VM_WORD_DIR 65535
VM_JSR _SWAP_Sp100_
VM_WORD_DIR 65535
VM_JSR _SWAP_Tp10_
VM_WORD_DIR 65535
VM_JSR ___INIT___
VM_WORD_DIR 65535

DCL BOOL X dummy
DCL INT X BarPos
DCL INT X IdxMenuMsk
DCL INT X CurrItemNo
DCL INT X IdxImg1
DCL INT X IdxImg2
DCL INT X IdxImg3
DCL INT X MenuItemsNo
DCL UINT X PwdIn
DCL INT X PwdRes
DCL BOOL X EnLogOut
DCL BOOL X EnPwdChgU
DCL BOOL X EnPwdChgS
DCL BOOL X EnPwdChgM
DCL INT X PwdTyp
DCL INT X PwdTypMenu
DCL BOOL X PwdDev
DCL INT X IdxImgQM
DCL BOOL X ImpExpSel
DCL INT X EnImpExpTmp
DCL INT X LangTime
DCL BOOL X EnLangChg
DCL REAL X BoardTempMsk
DCL INT X EnAlrmExpTmp
DCL BOOL X En_WipeRetain
DCL BOOL X En_WipeNVRAM
DCL BOOL X En_WipeAll
DCL UINT X TimeZoneTmp
DCL UINT X TimeZoneTmpRu
DCL INT X SetTimeZoneTmp
DCL DINT X AlrmIdx
DCL DINT X AlrmCode
DCL DINT X AlrmLogsIdx
DCL DINT X AlrmLogCode
DCL USINT X AlrmLogEventType
DCL REAL X AlrmStoredVarReal1
DCL REAL X AlrmStoredVarReal2
DCL BOOL X EnStoredVar1_REAL
DCL BOOL X EnStoredVar2_REAL
DCL DINT X N_Alrms
DCL BOOL X ClrAutoResCounters
DCL BOOL X AlrmLogDelete
DCL BOOL X ShowTemp
DCL USINT X CurPosition
DCL BOOL X CurShow[1]
DCL BOOL X ModePRG
DCL BOOL X NotModePRG
DCL USINT X DTPopUp
DCL BOOL X Show_DTPopUp
DCL INT X PIC_Fan
DCL BOOL X PIC_RoleSlave
DCL USINT X temp_Role
DCL BOOL X temp_Config_Reset
DCL USINT X temp_HeatType
DCL USINT X Temp_MB_port
DCL BOOL X En_MB_Ethernet
DCL BOOL X En_MB_BMS
DCL USINT X Temp_MB_Address
DCL UDINT X Temp_MB_Baudrate
DCL USINT X Temp_MB_Stopbits
DCL USINT X Temp_MB_Parity
DCL USINT X temp_CurDLE
DCL BOOL X upArrow
DCL BOOL X downArrow
DCL USINT X PopUp_Message
DCL USINT X PopUp_Question
DCL DINT X temp_SEQ_Order[1]
DCL BOOL X temp_Use_ExhaustFilter
DCL BOOL X temp_Use_Sensor_CO2
DCL BOOL X temp_Use_Sensor_Troom2
DCL BOOL X temp_Use_SupplyFilter
DCL BOOL X temp_Use_GateHeater
DCL BOOL X temp_Use_VortexDiff
DCL USINT X temp_DLE_CoolType
DCL USINT X temp_DLE_HeatType
DCL BOOL X show_Use_ExhaustFilter
DCL BOOL X show_Use_Sensor_CO2
DCL BOOL X show_Use_Sensor_Troom2
DCL BOOL X show_WorkPriority
DCL USINT X temp_ModeSEQ
DCL BOOL X MakeChoice
DCL USINT X temp_UnitModel
DCL BOOL X temp_SummerMode
DCL BYTE X __SYSVA_TMP_VALUE
DCL INT X __SYSVA_KEY_COUNTER
DCL WORD X __SYSVA_TMP_VALUE
DCL DWORD X __SYSVA_TMP_VALUE
DCL REAL X __SYSVA_TMP_VALUE
DCL USINT X StatePRG
DCL BOOL EF En_PopUpTimer
DCL USINT EF popup_StatePRG
DCL USINT EF PopUpKeyDelay
DCL USINT X __SYSVA_KEY_PRESSED
DCL USINT EF NextCycleAction
DCL DINT X ADR_WCOIL_HEAT
DCL DINT X ADR_ECOIL
DCL DINT X ADR_FREON
DCL DINT X ADR_WCOIL_COOL
DCL DINT X temp_SEQ_Order[6]
DCL DINT X ADR_RECUP
DCL DINT X temp_SEQ_Order[2]
DCL DINT X temp_SEQ_Order[3]
DCL DINT X temp_SEQ_Order[4]
DCL DINT X temp_SEQ_Order[5]
DCL DINT X ADR_RECYCLE
DCL DINT X ADR_ROTOR
DCL USINT X ModelLine
DCL BOOL X En_DP_TOP
DCL BOOL X CompletePreConfig
DCL USINT X UnitModel
DCL BOOL X Par_Dp10
DCL USINT X HeatType
DCL DINT X SEQ_Order[1]
DCL DINT X SEQ_Order[2]
DCL DINT X SEQ_Order[3]
DCL DINT X SEQ_Order[4]
DCL DINT X SEQ_Order[5]
DCL DINT X SEQ_Order[6]
DCL USINT X Role
DCL USINT X CurDLE
DCL USINT X ModeSEQ
DCL BOOL EF BootEnd
DCL BOOL EF temp_Wait
DCL BOOL EF modelLineInit
DCL BOOL X Boot_Mng.Config_Reset
DCL BOOL X GeneralMng_ST.EndDefMsk
DCL BOOL EF enEndDef
DCL BOOL EF enLogo
DCL BOOL X StartupJmp
DCL BOOL EF uiTurnOn
DCL INT EF MAIN_MENU_ITEMS_NO
DCL INT EF VENT_MENU_ITEMS_NO
DCL INT EF SETTINGS_MENU_ITEMS_NO
DCL INT EF SERVICE_MENU_ITEMS_NO
DCL BOOL X Role_Master
DCL INT EF GROUP_MENU_ITEMS_NO
DCL BOOL EF PreConfigCheck
DCL DINT X GeneralMng_ST.ID_Lang
DCL BOOL EF langWasChanged
DCL BOOL X Upgrade.REQ_RestoreParam
DCL BOOL EF goto_RestoreParam
DCL USINT X Upgrade.ANSW_RestoreParam
DCL INT EF MaskPos
DCL BOOL EF goToConfig
DCL BOOL X GeneralMng_ST.VerMismatch
DCL BOOL X Boot_Mng.En_ModelLine_Change
DCL BOOL EF checkZeroColumn
DCL INT X __SYSVA_CURSOR_COLUMN
DCL INT X __SYSVA_CURSOR_ROW
DCL BOOL X Boot_Mng.USBEject
DCL BOOL X FWMismatch
DCL BOOL EF old_FWMismatch
DCL BOOL X UnitOn
DCL BOOL X ManualManage
DCL BOOL X NoConnect
DCL BOOL X DO_SuFan
DCL BOOL X DO_ExhFan
DCL BOOL X DO_FC
DCL BOOL X FLR_FanSupplyTK.Active
DCL BOOL X FLR_FanExhTK.Active
DCL BOOL X CurSlaveShow
DCL USINT X CurState
DCL BOOL X MaskMng.SlaveNoAlarms
DCL BOOL X isAlarm
DCL DINT EF N_Alrms_Prev
DCL BOOL X GeneralMng_ST.RESERVED3
DCL USINT X __SYSVA_MANUAL_BUZZER_ON
DCL USINT X __SYSVA_MANUAL_BUZZER_OFF
DCL BOOL EF EnCheckAlarm
DCL BOOL EF isNoAlarmMask
DCL BOOL EF isActiveAlarmLoop
DCL DINT X AlarmMng.AlrmTime
DCL BOOL X AlarmMng.AlrmResByPGD1
DCL INT EF DTQM
DCL INT EF QUICK_MENU_ITEMS_NO
DCL INT EF DTRetMain
DCL INT EF CntDwnPwdTypMenu
DCL BOOL EF En_CheckAlrm_Reset
DCL REAL X GeneralMng_ST.BoardTemp_Msk
DCL UDINT X GeneralMng_ST.BoardTyp[1]
DCL BOOL EF FirstCycleDone
DCL DINT X STD_UOM_ZONE_UI
DCL BOOL X LocalMode
DCL BOOL X En_Reboot
DCL UINT X Port_FBus2
DCL USINT X Port_BMS2
DCL USINT X MB_port
DCL USINT X MB_Address
DCL USINT X Port_Ethernet
DCL USINT X Port_BMS_Card
DCL UDINT X BMS_Card_Baudrate
DCL USINT X BMS_Card_StopBits
DCL USINT X BMS_Card_Parity
DCL UDINT X BMS2_Baudrate
DCL USINT X BMS2_StopBits
DCL USINT X BMS2_Parity
DCL BOOL X En_DLE[1]
DCL BOOL X En_DLE[2]
DCL BOOL X En_DLE[3]
DCL BOOL X En_DLE[4]
DCL BOOL X En_DLE[5]
DCL BOOL X Use_ExhFan
DCL BOOL X Use_Recycling
DCL BOOL X Use_ExhaustFilter
DCL BOOL X Use_Sensor_CO2
DCL BOOL X Use_Sensor_Troom2
DCL BOOL X Use_SupplyFilter
DCL BOOL X Use_GateHeater
DCL BOOL X Use_VortexDiff
DCL USINT X DLE_CoolType
DCL USINT X DLE_HeatType
DCL INT EF IdxMenuMskTmp
DCL INT EF BarPosTmp
DCL INT EF CurrItemNoTmp
DCL INT EF IdxImg1Tmp
DCL INT EF IdxImg2Tmp
DCL INT EF IdxImg3Tmp
DCL INT EF IdxMskTmp1
DCL INT EF BarPosTmp1
DCL INT EF CurrItemNoTmp1
DCL INT EF IdxImg1Tmp1
DCL INT EF IdxImg2Tmp1
DCL INT EF IdxImg3Tmp1
DCL INT EF HIDE_SERVICE_MENU_ITEMS_NO
DCL BOOL X Output_Ctrl.Show_IO
DCL BOOL X MaskMng.Show_Shedule
DCL BOOL X Upgrade.Mode_Upgrade
DCL BOOL X Show_CompStats
DCL BOOL X ResetHoursComp[1]
DCL BOOL X ResetHoursComp[2]
DCL BOOL X ResetHoursComp[3]
DCL DINT EF AlrmLogsTot
DCL DINT X AlarmMng.AlrmLogTime
DCL DINT EF infoLogOk
DCL DINT EF LastValidRecord
DCL BOOL X CurSlaveAlarmShow
DCL DINT EF AlrmLogsIdxTemp
DCL DINT EF AlrmLogInfoErr
DCL DINT EF AlrmLogCodeTemp
DCL USINT EF AlrmLogEventTypeTemp
DCL DINT EF AlrmLogTimeTemp
DCL BOOL X SlaveAlrmRes[1]
DCL USINT X CurSlave
DCL DINT X Slave_AlrmIdx
DCL DINT X Slave_N_Alrms
DCL INT EF IncrTmp
DCL INT EF IdxQM
DCL BOOL X En_Schedule
DCL USINT X Switcher
DCL BOOL X KeybOnOff
DCL BOOL X LangEn
DCL BOOL X Role_Slave
DCL USINT X Num_Slaves
DCL USINT EF POPUP_TIME
DCL BOOL X Use_Schedule
DCL USINT EF SHORT_POPUP_TIME
DCL BOOL X CurMode
DCL BOOL X SlaveMode[1]
DCL BOOL X CurOnOff
DCL BOOL X SlaveOnOff[1]
DCL REAL X CurSP
DCL REAL X SlaveSP[1]
DCL USINT X Show_SlaveStates[1]
DCL INT X WORDs_SlaveAlarms[1]
DCL INT EF FRIDGE_MENU_ITEMS_NO
DCL INT EF MCLIMATE_MENU_ITEMS_NO
DCL BOOL X En_DP_E
DCL INT EF IOMANAGE_MENU_ITEMS_NO
DCL BOOL X UnitOff
DCL BOOL X En_TOP
DCL INT EF CONFIGURATOR_MENU_ITEMS_NO
DCL BOOL X En_DP_CTRL
DCL BOOL EF En_MB_BMS_Card
DCL BOOL EF En_MB_BMS2
DCL BOOL X Upgrade.Check_Upgrade
DCL UINT X GeneralMng_ST.PwdUser
DCL UINT X GeneralMng_ST.PwdService
DCL UINT X GeneralMng_ST.RESERVED1
DCL UDINT X __SYSVA_TMP_VALUE
DCL BOOL X FLR_Disc_CTRL.Active
DCL BOOL X RecountEnSlaves
DCL UINT X GeneralMng_ST.Zone_Write
DCL BOOL X GeneralMng_ST.SetTimezone
DCL BOOL X GeneralMng_ST.ReadTimezone
DCL UINT X GeneralMng_ST.Second
DCL UINT X GeneralMng_ST.SecondIn
DCL UINT X GeneralMng_ST.Minute
DCL UINT X GeneralMng_ST.MinuteIn
DCL UINT X GeneralMng_ST.Hour
DCL UINT X GeneralMng_ST.HourIn
DCL UINT X GeneralMng_ST.Day
DCL UINT X GeneralMng_ST.DayIn
DCL UINT X GeneralMng_ST.Month
DCL UINT X GeneralMng_ST.MonthIn
DCL UINT X GeneralMng_ST.Year
DCL UINT X GeneralMng_ST.YearIn
DCL UINT X GeneralMng_ST.Zone_Read
DCL BOOL X GeneralMng_ST.En_Date
DCL BOOL X TimeChangedLocal
DCL BOOL X En_TimeSync
DCL BOOL X GeneralMng_ST.WritePwd
DCL UDINT X GeneralMng_ST.WipeMem[1]
DCL BOOL X En_WipeMem
DCL BOOL X ImpExpMng.En_ParamsImp
DCL BOOL X ImpExpMng.En_ParamsExp
DCL BOOL X GeneralMng_ST.En_AlrmExp
DCL UINT X CurDayOfWeek
DCL BOOL X MaskMng.Chg_Sched
DCL INT X MaskMng.Sched_ROW
DCL INT X MaskMng.Sched_COLUMN
DCL BOOL X MaskMng.CopyFromSched
DCL BOOL X MaskMng.CopyToSched
DCL REAL X Par_Ws08
DCL REAL X Par_Ws07
DCL REAL X Par_Ws06
DCL DINT X SUM_Comp
DCL BOOL X Upgrade.En_FirmWare
DCL BOOL X Upgrade.En_Upgrade
DCL USINT X CurDevice
DCL USINT X DevOrder[1]
DCL DINT X CurSEQ
DCL USINT X DevOrder[2]
DCL USINT X DevOrder[3]
DCL USINT X DevOrder[5]
DCL USINT X DevOrder[6]
DCL BOOL X En_Testing
DCL BOOL X Upgrade.REQ_OS_upgrade
DCL BOOL X Upgrade.ANSW_OS_upgrade
DCL BOOL X En_POOL
DCL BOOL X mod_WCoil.loc_MODE_A_B
DCL BOOL X Par_Sp100
DCL INT X BRK_SensorTroom2
DCL BOOL X Par_Tp10

; Move_DOWN()
VM_FUNCTION _Move_DOWN_
VM_DATA 0
EF_NEXT_MASK
VM_RTS

; Move_UP()
VM_FUNCTION _Move_UP_
VM_DATA 0
EF_PREVIOUS_MASK
VM_RTS

; BoolSwap()
VM_FUNCTION _BoolSwap_
VM_DATA 0
EF_SWAP
VM_RTS

; SetCurrentValue()
VM_FUNCTION _SetCurrentValue_
VM_DATA 0
EF_COMPARE
EF_NEXT_FIELD
VM_RTS

; Increment_BYTE()
VM_FUNCTION _Increment_BYTE_
VM_DATA 0
VM_PUSH BYTE X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT BYTE
VM_ADD BYTE
VM_POP BYTE X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_BYTE()
VM_FUNCTION _Decrement_BYTE_
VM_DATA 0
VM_PUSH BYTE X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT BYTE
VM_SUB BYTE
VM_POP BYTE X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_WORD()
VM_FUNCTION _Increment_WORD_
VM_DATA 0
VM_PUSH WORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT WORD
VM_ADD WORD
VM_POP WORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_WORD()
VM_FUNCTION _Decrement_WORD_
VM_DATA 0
VM_PUSH WORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT WORD
VM_SUB WORD
VM_POP WORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_DWORD()
VM_FUNCTION _Increment_DWORD_
VM_DATA 0
VM_PUSH DWORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DWORD
VM_ADD DWORD
VM_POP DWORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_DWORD()
VM_FUNCTION _Decrement_DWORD_
VM_DATA 0
VM_PUSH DWORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DWORD
VM_SUB DWORD
VM_POP DWORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_REAL_0()
VM_FUNCTION _Increment_REAL_0_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_ADD REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_REAL_0()
VM_FUNCTION _Decrement_REAL_0_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_SUB REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_REAL_1()
VM_FUNCTION _Increment_REAL_1_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_ADD REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_REAL_1()
VM_FUNCTION _Decrement_REAL_1_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_SUB REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_REAL_2()
VM_FUNCTION _Increment_REAL_2_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 100
VM_DIV REAL
VM_ADD REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_REAL_2()
VM_FUNCTION _Decrement_REAL_2_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 100
VM_DIV REAL
VM_SUB REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; ButtonsSupport()
VM_FUNCTION _ButtonsSupport_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L0
; THEN
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_JUMP L1
VM_LABEL L0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L3
VM_POP_AWAY BOOL
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_LABEL L3
VM_JZ L2
; THEN
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_JUMP L4
VM_LABEL L2
; ELSE
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; END_IF
VM_LABEL L4
VM_LABEL L1
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L7
VM_POP_AWAY BOOL
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_LABEL L7
VM_JZ L6
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ModePRG
VM_JUMP L8
VM_LABEL L6
; ELSE
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ModePRG
; END_IF
VM_LABEL L8
VM_PUSH BOOL X ModePRG
VM_NOT BOOL
VM_POP BOOL X NotModePRG
VM_RTS

; PopUp_ESC()
VM_FUNCTION _PopUp_ESC_
VM_DATA 0
VM_PUSH USINT EF popup_StatePRG
VM_POP USINT X StatePRG
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_PopUpTimer
; CASE
VM_PUSH USINT EF popup_StatePRG
; OF
VM_CASE USINT 0 L13
VM_CASE USINT 1 L14
VM_CASE USINT 2 L15
VM_CASE USINT 3 L16
VM_POP_AWAY USINT
VM_JUMP L12
VM_LABEL L13
EF_RESTORE_MASK
VM_JUMP L12
VM_LABEL L14
EF_RESTORE_MASK
VM_JUMP L12
VM_LABEL L15
EF_RESTORE_MASK
EF_GOTO_CURSOR 0 10
VM_JUMP L12
VM_LABEL L16
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ModePRG
VM_PUSH_IMM BOOL 0
VM_POP BOOL X NotModePRG
EF_RESTORE_MASK
VM_LABEL L12
VM_RTS

; PopUpSupport()
VM_FUNCTION _PopUpSupport_
VM_DATA 0
; IF
VM_PUSH BOOL EF En_PopUpTimer
VM_JZ L10
; THEN
; IF
VM_PUSH USINT X DTPopUp
VM_PUSH_IMM USINT 0
VM_CMP_LE USINT
VM_JZ L11
; THEN
VM_JSR _PopUp_ESC_
VM_JUMP L17
VM_LABEL L11
; ELSE
VM_PUSH USINT X DTPopUp
VM_PUSH_IMM USINT 1
VM_SUB USINT
VM_POP USINT X DTPopUp
VM_PUSH USINT EF PopUpKeyDelay
VM_PUSH_IMM USINT 1
VM_ADD USINT
VM_POP USINT EF PopUpKeyDelay
; IF
VM_PUSH USINT X __SYSVA_KEY_PRESSED
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L19
; THEN
; IF
VM_PUSH USINT EF PopUpKeyDelay
VM_PUSH_IMM USINT 1
VM_CMP_GT USINT
VM_JZ L20
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_PopUpTimer
VM_JUMP L21
VM_LABEL L20
; ELSE
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_KEY_PRESSED
; END_IF
VM_LABEL L21
VM_LABEL L19
; END_IF
; IF
VM_PUSH USINT X DTPopUp
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_JZ L23
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Show_DTPopUp
VM_LABEL L23
; END_IF
; END_IF
VM_LABEL L17
VM_JUMP L24
VM_LABEL L10
; ELSE
VM_PUSH_IMM USINT 0
VM_POP USINT EF PopUpKeyDelay
VM_PUSH_IMM USINT 0
VM_POP USINT X DTPopUp
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Show_DTPopUp
; END_IF
VM_LABEL L24
VM_RTS

; ArrowSupport()
VM_FUNCTION _ArrowSupport_
VM_DATA 0
; IF
VM_PUSH BOOL X upArrow
VM_JZ L26
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X upArrow
VM_LABEL L26
; END_IF
; IF
VM_PUSH BOOL X downArrow
VM_JZ L27
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X downArrow
VM_LABEL L27
; END_IF
VM_RTS

; WorkPriority()
VM_FUNCTION _WorkPriority_
VM_DATA 12
; IF
VM_PUSH USINT X temp_DLE_HeatType
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L38
; THEN
VM_PUSH DINT X ADR_WCOIL_HEAT
VM_POPL DINT 2
VM_JUMP L39
VM_LABEL L38
; IF
VM_PUSH USINT X temp_DLE_HeatType
VM_PUSH_IMM USINT 1
VM_CMP_GT USINT
VM_JZ L40
; THEN
VM_PUSH DINT X ADR_ECOIL
VM_POPL DINT 2
VM_JUMP L41
VM_LABEL L40
; ELSE
VM_PUSH_IMM DINT 0
VM_POPL DINT 2
; END_IF
VM_LABEL L41
VM_LABEL L39
; IF
VM_PUSH USINT X temp_DLE_CoolType
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L44
VM_POP_AWAY BOOL
VM_PUSH USINT X temp_DLE_CoolType
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_LABEL L44
VM_JZ L43
; THEN
VM_PUSH DINT X ADR_FREON
VM_POPL DINT 8
VM_JUMP L45
VM_LABEL L43
; IF
VM_PUSH USINT X temp_DLE_CoolType
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L46
; THEN
VM_PUSH DINT X ADR_WCOIL_COOL
VM_POPL DINT 8
VM_JUMP L47
VM_LABEL L46
; ELSE
VM_PUSH_IMM DINT 0
VM_POPL DINT 8
; END_IF
VM_LABEL L47
VM_LABEL L45
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[6]
; CASE
VM_PUSH USINT X temp_CurDLE
; OF
VM_CASE USINT 1 L50
VM_CASE USINT 2 L51
VM_CASE USINT 3 L51
VM_CASE USINT 4 L52
VM_CASE USINT 5 L53
VM_POP_AWAY USINT
VM_JUMP L49
VM_LABEL L50
VM_PUSH DINT X ADR_RECUP
VM_POP DINT X temp_SEQ_Order[1]
; IF
VM_PUSHL DINT 2
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L55
VM_POP_AWAY BOOL
VM_PUSHL DINT 8
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_LABEL L55
VM_JZ L54
; THEN
VM_PUSH_IMM BOOL 0
VM_POPL BOOL 0
; IF
VM_PUSH BOOL X temp_Use_Sensor_CO2
VM_JZ L56
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[2]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[3]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[4]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[5]
VM_JUMP L57
VM_LABEL L56
; ELSE
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[2]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[3]
VM_PUSH DINT X ADR_RECYCLE
VM_POP DINT X temp_SEQ_Order[4]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[5]
; END_IF
VM_LABEL L57
VM_JUMP L59
VM_LABEL L54
; ELSE
VM_PUSH_IMM BOOL 1
VM_POPL BOOL 0
; IF
VM_PUSH USINT X temp_ModeSEQ
VM_PUSH_IMM USINT 2
VM_CMP_GT USINT
VM_DUP BOOL
VM_JZ L62
VM_POP_AWAY BOOL
VM_PUSHL DINT 2
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JNZ L63
VM_POP_AWAY BOOL
VM_PUSHL DINT 8
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_LABEL L63
VM_LABEL L62
VM_JZ L61
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X temp_ModeSEQ
VM_PUSH USINT X temp_ModeSEQ
VM_CAST USINT BYTE
VM_POP BYTE X __SYSVA_TMP_VALUE
VM_LABEL L61
; END_IF
; IF
VM_PUSH BOOL X temp_Use_Sensor_CO2
VM_JZ L64
; THEN
VM_PUSHL DINT 2
VM_POP DINT X temp_SEQ_Order[2]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[3]
VM_PUSHL DINT 8
VM_POP DINT X temp_SEQ_Order[4]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[5]
VM_JUMP L65
VM_LABEL L64
; ELSE
; IF
VM_PUSHL DINT 2
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L67
; THEN
; CASE
VM_PUSH USINT X temp_ModeSEQ
; OF
VM_CASE USINT 1 L69
VM_CASE USINT 4 L69
VM_CASE USINT 2 L70
VM_CASE USINT 3 L70
VM_POP_AWAY USINT
VM_JUMP L68
VM_LABEL L69
VM_PUSHL DINT 2
VM_POP DINT X temp_SEQ_Order[2]
VM_PUSH DINT X ADR_RECYCLE
VM_POP DINT X temp_SEQ_Order[3]
VM_JUMP L68
VM_LABEL L70
VM_PUSHL DINT 2
VM_POP DINT X temp_SEQ_Order[3]
VM_PUSH DINT X ADR_RECYCLE
VM_POP DINT X temp_SEQ_Order[2]
VM_LABEL L68
VM_JUMP L71
VM_LABEL L67
; ELSE
VM_PUSH DINT X ADR_RECYCLE
VM_POP DINT X temp_SEQ_Order[2]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[3]
; END_IF
VM_LABEL L71
; IF
VM_PUSHL DINT 8
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L73
; THEN
; CASE
VM_PUSH USINT X temp_ModeSEQ
; OF
VM_CASE USINT 1 L75
VM_CASE USINT 3 L75
VM_CASE USINT 2 L76
VM_CASE USINT 4 L76
VM_POP_AWAY USINT
VM_JUMP L74
VM_LABEL L75
VM_PUSHL DINT 8
VM_POP DINT X temp_SEQ_Order[4]
VM_PUSH DINT X ADR_RECYCLE
VM_POP DINT X temp_SEQ_Order[5]
VM_JUMP L74
VM_LABEL L76
VM_PUSHL DINT 8
VM_POP DINT X temp_SEQ_Order[5]
VM_PUSH DINT X ADR_RECYCLE
VM_POP DINT X temp_SEQ_Order[4]
VM_LABEL L74
VM_JUMP L77
VM_LABEL L73
; ELSE
VM_PUSH DINT X ADR_RECYCLE
VM_POP DINT X temp_SEQ_Order[4]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[5]
; END_IF
VM_LABEL L77
; END_IF
VM_LABEL L65
; END_IF
VM_LABEL L59
VM_JUMP L49
VM_LABEL L51
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[3]
; IF
VM_PUSHL DINT 2
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L80
VM_POP_AWAY BOOL
VM_PUSHL DINT 8
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_LABEL L80
VM_JZ L79
; THEN
VM_PUSH_IMM BOOL 0
VM_POPL BOOL 0
; IF
VM_PUSH BOOL X temp_Use_Sensor_CO2
VM_JZ L81
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[1]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[2]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[4]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[5]
VM_JUMP L82
VM_LABEL L81
; ELSE
VM_PUSH DINT X ADR_RECYCLE
VM_POP DINT X temp_SEQ_Order[1]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[2]
VM_PUSH DINT X ADR_RECYCLE
VM_POP DINT X temp_SEQ_Order[4]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[5]
; END_IF
VM_LABEL L82
VM_JUMP L84
VM_LABEL L79
; ELSE
VM_PUSH_IMM BOOL 1
VM_POPL BOOL 0
; IF
VM_PUSH BOOL X temp_Use_Sensor_CO2
VM_JZ L86
; THEN
VM_PUSHL DINT 2
VM_POP DINT X temp_SEQ_Order[1]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[2]
VM_PUSHL DINT 8
VM_POP DINT X temp_SEQ_Order[4]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[5]
VM_JUMP L87
VM_LABEL L86
; ELSE
; IF
VM_PUSHL DINT 2
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JNZ L90
VM_POP_AWAY BOOL
VM_PUSHL DINT 8
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_LABEL L90
VM_DUP BOOL
VM_JZ L91
VM_POP_AWAY BOOL
VM_PUSH USINT X temp_ModeSEQ
VM_PUSH_IMM USINT 2
VM_CMP_GT USINT
VM_LABEL L91
VM_JZ L89
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X temp_ModeSEQ
VM_PUSH USINT X temp_ModeSEQ
VM_CAST USINT BYTE
VM_POP BYTE X __SYSVA_TMP_VALUE
VM_LABEL L89
; END_IF
; IF
VM_PUSHL DINT 2
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L92
; THEN
; CASE
VM_PUSH USINT X temp_ModeSEQ
; OF
VM_CASE USINT 1 L94
VM_CASE USINT 4 L94
VM_CASE USINT 2 L95
VM_CASE USINT 3 L95
VM_POP_AWAY USINT
VM_JUMP L93
VM_LABEL L94
VM_PUSHL DINT 2
VM_POP DINT X temp_SEQ_Order[1]
VM_PUSH DINT X ADR_RECYCLE
VM_POP DINT X temp_SEQ_Order[2]
VM_JUMP L93
VM_LABEL L95
VM_PUSHL DINT 2
VM_POP DINT X temp_SEQ_Order[2]
VM_PUSH DINT X ADR_RECYCLE
VM_POP DINT X temp_SEQ_Order[1]
VM_LABEL L93
VM_JUMP L96
VM_LABEL L92
; ELSE
VM_PUSH DINT X ADR_RECYCLE
VM_POP DINT X temp_SEQ_Order[1]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[2]
; END_IF
VM_LABEL L96
; IF
VM_PUSHL DINT 8
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L98
; THEN
; CASE
VM_PUSH USINT X temp_ModeSEQ
; OF
VM_CASE USINT 1 L100
VM_CASE USINT 3 L100
VM_CASE USINT 2 L101
VM_CASE USINT 4 L101
VM_POP_AWAY USINT
VM_JUMP L99
VM_LABEL L100
VM_PUSHL DINT 8
VM_POP DINT X temp_SEQ_Order[4]
VM_PUSH DINT X ADR_RECYCLE
VM_POP DINT X temp_SEQ_Order[5]
VM_JUMP L99
VM_LABEL L101
VM_PUSHL DINT 8
VM_POP DINT X temp_SEQ_Order[5]
VM_PUSH DINT X ADR_RECYCLE
VM_POP DINT X temp_SEQ_Order[4]
VM_LABEL L99
VM_JUMP L102
VM_LABEL L98
; ELSE
VM_PUSH DINT X ADR_RECYCLE
VM_POP DINT X temp_SEQ_Order[4]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[5]
; END_IF
VM_LABEL L102
; END_IF
VM_LABEL L87
; END_IF
VM_LABEL L84
VM_JUMP L49
VM_LABEL L52
; IF
VM_PUSHL DINT 2
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L105
VM_POP_AWAY BOOL
VM_PUSHL DINT 8
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_LABEL L105
VM_JZ L104
; THEN
VM_PUSH_IMM BOOL 0
VM_POPL BOOL 0
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[1]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[2]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[3]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[4]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[5]
VM_JUMP L106
VM_LABEL L104
; ELSE
VM_PUSH_IMM BOOL 1
VM_POPL BOOL 0
VM_PUSHL DINT 2
VM_POP DINT X temp_SEQ_Order[1]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[2]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[3]
VM_PUSHL DINT 8
VM_POP DINT X temp_SEQ_Order[4]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[5]
; END_IF
VM_LABEL L106
VM_JUMP L49
VM_LABEL L53
VM_PUSH DINT X ADR_ROTOR
VM_POP DINT X temp_SEQ_Order[1]
; IF
VM_PUSHL DINT 2
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L109
VM_POP_AWAY BOOL
VM_PUSHL DINT 8
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_LABEL L109
VM_JZ L108
; THEN
VM_PUSH_IMM BOOL 0
VM_POPL BOOL 0
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[2]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[3]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[4]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[5]
VM_JUMP L110
VM_LABEL L108
; ELSE
VM_PUSHL DINT 2
VM_POP DINT X temp_SEQ_Order[2]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[3]
VM_PUSHL DINT 8
VM_POP DINT X temp_SEQ_Order[4]
VM_PUSH_IMM DINT 0
VM_POP DINT X temp_SEQ_Order[5]
; END_IF
VM_LABEL L110
VM_LABEL L49
VM_PUSHL BOOL 0
VM_RTS

; NextCycleAction()
VM_FUNCTION _NextCycleAction_
VM_DATA 0
; IF
VM_PUSH USINT EF NextCycleAction
VM_PUSH_IMM USINT 0
VM_CMP_NE USINT
VM_JZ L28
; THEN
; CASE
VM_PUSH USINT EF NextCycleAction
; OF
VM_CASE USINT 1 L30
VM_CASE USINT 2 L31
VM_CASE USINT 3 L32
VM_CASE USINT 4 L33
VM_CASE USINT 5 L34
VM_CASE USINT 6 L35
VM_CASE USINT 7 L36
VM_POP_AWAY USINT
VM_JUMP L29
VM_LABEL L30
EF_RESTORE_MASK
VM_JUMP L29
VM_LABEL L31
EF_RESTORE_MASK
EF_GOTO_CURSOR 0 10
VM_JUMP L29
VM_LABEL L32
VM_JSR _Move_DOWN_
EF_GOTO_CURSOR 0 10
VM_PUSH_IMM BOOL 0
VM_POP BOOL X MakeChoice
VM_JUMP L29
VM_LABEL L33
EF_GOTO_MASK Upgrade_OS
VM_JUMP L29
VM_LABEL L34
; IF
VM_JSR _WorkPriority_
VM_JZ L37
; THEN
; CASE
VM_PUSH USINT X temp_CurDLE
; OF
VM_CASE USINT 1 L113
VM_CASE USINT 2 L113
VM_CASE USINT 3 L113
VM_CASE USINT 4 L114
VM_CASE USINT 5 L114
VM_POP_AWAY USINT
VM_JUMP L112
VM_LABEL L113
; IF
VM_PUSH BOOL X temp_Use_Sensor_CO2
VM_JZ L115
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X show_WorkPriority
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ModePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X NotModePRG
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_JUMP L116
VM_LABEL L115
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X show_WorkPriority
; END_IF
VM_LABEL L116
VM_JUMP L112
VM_LABEL L114
VM_PUSH_IMM BOOL 0
VM_POP BOOL X show_WorkPriority
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ModePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X NotModePRG
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_LABEL L112
EF_GOTO_MASK Priority_Mask
EF_GOTO_CURSOR 0 10
VM_JUMP L118
VM_LABEL L37
; ELSE
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
EF_GOTO_MASK TOP_Confirm_Config_1
VM_PUSH_IMM BOOL 0
VM_POP BOOL X MakeChoice
; END_IF
VM_LABEL L118
VM_JUMP L29
VM_LABEL L35
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
EF_GOTO_MASK TOP_Confirm_Config_1
VM_PUSH_IMM BOOL 0
VM_POP BOOL X MakeChoice
VM_JUMP L29
VM_LABEL L36
; CASE
VM_PUSH USINT X ModelLine
; OF
VM_CASE USINT 1 L121
VM_CASE USINT 2 L122
VM_POP_AWAY USINT
VM_JUMP L120
VM_LABEL L121
; IF
VM_PUSH BOOL X En_DP_TOP
VM_JZ L123
; THEN
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X CompletePreConfig
VM_JUMP L124
VM_LABEL L123
; ELSE
VM_PUSH USINT X UnitModel
VM_POP USINT X temp_UnitModel
VM_PUSH BOOL X Par_Dp10
VM_POP BOOL X temp_SummerMode
VM_PUSH USINT X HeatType
VM_POP USINT X temp_HeatType
VM_PUSH_IMM BOOL 1
VM_POP BOOL X NotModePRG
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ModePRG
VM_PUSH_IMM USINT 2
VM_POP USINT X StatePRG
EF_GOTO_MASK TOP_DLE_Type
EF_GOTO_CURSOR 0 10
; END_IF
VM_LABEL L124
VM_JUMP L120
VM_LABEL L122
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ModePRG
VM_PUSH_IMM BOOL 0
VM_POP BOOL X NotModePRG
VM_PUSH_IMM USINT 2
VM_POP USINT X StatePRG
VM_PUSH DINT X SEQ_Order[1]
VM_POP DINT X temp_SEQ_Order[1]
VM_PUSH DINT X SEQ_Order[2]
VM_POP DINT X temp_SEQ_Order[2]
VM_PUSH DINT X SEQ_Order[3]
VM_POP DINT X temp_SEQ_Order[3]
VM_PUSH DINT X SEQ_Order[4]
VM_POP DINT X temp_SEQ_Order[4]
VM_PUSH DINT X SEQ_Order[5]
VM_POP DINT X temp_SEQ_Order[5]
VM_PUSH DINT X SEQ_Order[6]
VM_POP DINT X temp_SEQ_Order[6]
VM_PUSH USINT X Role
VM_POP USINT X temp_Role
VM_PUSH USINT X CurDLE
VM_POP USINT X temp_CurDLE
VM_PUSH USINT X ModeSEQ
VM_POP USINT X temp_ModeSEQ
EF_GOTO_MASK TOP_DLE_Type
EF_GOTO_CURSOR 0 10
VM_LABEL L120
VM_PUSH_IMM BOOL 0
VM_POP BOOL X MakeChoice
VM_LABEL L29
VM_PUSH_IMM USINT 0
VM_POP USINT EF NextCycleAction
VM_LABEL L28
; END_IF
VM_RTS

; InstDef()
VM_FUNCTION _InstDef_
VM_DATA 0
; IF
VM_PUSH USINT X ModelLine
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_JZ L127
; THEN
; IF
VM_PUSH BOOL EF temp_Wait
VM_NOT BOOL
VM_JZ L128
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF temp_Wait
VM_JUMP L129
VM_LABEL L128
; IF
VM_PUSH BOOL EF modelLineInit
VM_NOT BOOL
VM_DUP BOOL
VM_JZ L131
VM_POP_AWAY BOOL
VM_PUSH BOOL X Boot_Mng.Config_Reset
VM_NOT BOOL
VM_LABEL L131
VM_JZ L130
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF modelLineInit
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ModePRG
VM_PUSH_IMM USINT 2
VM_POP USINT X StatePRG
EF_GOTO_MASK ModelLineSel
EF_GOTO_CURSOR 0 10
VM_PUSH_IMM BYTE 1
VM_POP BYTE X __SYSVA_TMP_VALUE
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_LABEL L130
; END_IF
VM_LABEL L129
VM_JUMP L132
VM_LABEL L127
; IF
VM_PUSH BOOL X GeneralMng_ST.EndDefMsk
VM_JZ L133
; THEN
; IF
VM_PUSH BOOL EF enEndDef
VM_NOT BOOL
VM_JZ L134
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF enEndDef
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
EF_GOTO_MASK EndDefault
VM_LABEL L134
; END_IF
VM_JUMP L135
VM_LABEL L133
; IF
VM_PUSH BOOL EF enLogo
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_DUP BOOL
VM_JZ L137
VM_POP_AWAY BOOL
VM_PUSH BOOL EF enEndDef
VM_LABEL L137
VM_JZ L136
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF enLogo
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
EF_GOTO_MASK LogoMask
VM_JUMP L138
VM_LABEL L136
; IF
VM_PUSH BOOL X StartupJmp
VM_NOT BOOL
VM_JZ L139
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF BootEnd
VM_LABEL L139
; END_IF
VM_LABEL L138
VM_LABEL L135
VM_LABEL L132
; IF
VM_PUSH BOOL EF uiTurnOn
VM_NOT BOOL
VM_DUP BOOL
VM_JZ L141
VM_POP_AWAY BOOL
VM_PUSH USINT X ModelLine
VM_PUSH_IMM USINT 0
VM_CMP_GT USINT
VM_LABEL L141
VM_JZ L140
; THEN
; CASE
VM_PUSH USINT X ModelLine
; OF
VM_CASE USINT 1 L143
VM_CASE USINT 2 L144
VM_POP_AWAY USINT
VM_JUMP L142
VM_LABEL L143
VM_PUSH_IMM INT 6
VM_POP INT EF MAIN_MENU_ITEMS_NO
VM_PUSH_IMM INT 3
VM_POP INT EF VENT_MENU_ITEMS_NO
VM_PUSH_IMM INT 3
VM_POP INT EF SETTINGS_MENU_ITEMS_NO
VM_PUSH_IMM INT 7
VM_POP INT EF SERVICE_MENU_ITEMS_NO
VM_JUMP L142
VM_LABEL L144
VM_PUSH_IMM INT 5
VM_POP INT EF MAIN_MENU_ITEMS_NO
VM_PUSH_IMM INT 6
VM_POP INT EF VENT_MENU_ITEMS_NO
VM_PUSH_IMM INT 4
VM_POP INT EF SETTINGS_MENU_ITEMS_NO
VM_PUSH_IMM INT 7
VM_POP INT EF SERVICE_MENU_ITEMS_NO
; IF
VM_PUSH BOOL X Role_Master
VM_JZ L145
; THEN
VM_PUSH_IMM INT 3
VM_POP INT EF GROUP_MENU_ITEMS_NO
VM_JUMP L146
VM_LABEL L145
; ELSE
VM_PUSH_IMM INT 2
VM_POP INT EF GROUP_MENU_ITEMS_NO
; END_IF
VM_LABEL L146
VM_LABEL L142
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF uiTurnOn
VM_LABEL L140
; END_IF
VM_RTS

; ShowLangMskTime()
VM_FUNCTION _ShowLangMskTime_
VM_DATA 0
; IF
VM_PUSH USINT X __SYSVA_KEY_PRESSED
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L153
; THEN
VM_PUSH_IMM INT 30
VM_POP INT X LangTime
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_KEY_PRESSED
VM_LABEL L153
; END_IF
; IF
VM_PUSH INT X LangTime
VM_PUSH_IMM INT 0
VM_CMP_GT INT
VM_JZ L154
; THEN
VM_PUSH INT X LangTime
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X LangTime
VM_JUMP L155
VM_LABEL L154
; ELSE
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnLangChg
; END_IF
VM_LABEL L155
VM_RTS

; GotoMain()
VM_FUNCTION _GotoMain_
VM_DATA 0
VM_PUSH_IMM INT 0
VM_POP INT EF MaskPos
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnLangChg
EF_GOTO_MASK Main_POOL
VM_RTS

; PreConfig()
VM_FUNCTION _PreConfig_
VM_DATA 0
; IF
VM_PUSH DINT X GeneralMng_ST.ID_Lang
VM_PUSH_IMM DINT -1
VM_CMP_EQ DINT
VM_JZ L151
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X GeneralMng_ST.ID_Lang
VM_PUSH_IMM INT 30
VM_POP INT X LangTime
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnLangChg
EF_GOTO_MASK Language
VM_PUSH_IMM USINT 2
VM_POP USINT X StatePRG
VM_LABEL L151
; END_IF
; IF
VM_PUSH BOOL X EnLangChg
VM_JZ L152
; THEN
VM_JSR _ShowLangMskTime_
VM_JUMP L157
VM_LABEL L152
; ELSE
; IF
VM_PUSH BOOL EF langWasChanged
VM_NOT BOOL
VM_JZ L159
; THEN
VM_PUSH DINT X GeneralMng_ST.ID_Lang
VM_SYSTEM 31
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF langWasChanged
VM_LABEL L159
; END_IF
; IF
VM_PUSH BOOL X Upgrade.REQ_RestoreParam
VM_JZ L160
; THEN
; IF
VM_PUSH BOOL EF goto_RestoreParam
VM_NOT BOOL
VM_JZ L161
; THEN
VM_PUSH_IMM USINT 2
VM_POP USINT X StatePRG
EF_GOTO_MASK Restore_Param
EF_GOTO_CURSOR 0 10
VM_PUSH_IMM BYTE 1
VM_POP BYTE X __SYSVA_TMP_VALUE
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF goto_RestoreParam
VM_JUMP L162
VM_LABEL L161
; ELSE
; CASE
VM_PUSH USINT X Upgrade.ANSW_RestoreParam
; OF
VM_CASE USINT 0 L165
VM_CASE USINT 2 L166
VM_POP_AWAY USINT
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MakeChoice
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Upgrade.REQ_RestoreParam
VM_JUMP L164
VM_LABEL L165
VM_JUMP L164
VM_LABEL L166
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MakeChoice
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Upgrade.REQ_RestoreParam
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X CompletePreConfig
VM_LABEL L164
; END_IF
VM_LABEL L162
VM_JUMP L167
VM_LABEL L160
; ELSE
; IF
VM_PUSH BOOL X CompletePreConfig
VM_JZ L169
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF PreConfigCheck
VM_JSR _GotoMain_
VM_JUMP L170
VM_LABEL L169
; ELSE
; IF
VM_PUSH BOOL EF goToConfig
VM_NOT BOOL
VM_JZ L172
; THEN
VM_PUSH_IMM USINT 7
VM_POP USINT EF NextCycleAction
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF goToConfig
VM_LABEL L172
; END_IF
; END_IF
VM_LABEL L170
; END_IF
VM_LABEL L167
; END_IF
VM_LABEL L157
VM_RTS

; MyLoopFunction()
VM_FUNCTION _MyLoopFunction_
VM_DATA 0
; IF
VM_PUSH BOOL EF checkZeroColumn
VM_JZ L176
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF checkZeroColumn
EF_STORE_MASK
; IF
VM_PUSH INT X __SYSVA_CURSOR_COLUMN
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L178
VM_POP_AWAY BOOL
VM_PUSH INT X __SYSVA_CURSOR_ROW
VM_PUSH_IMM INT 10
VM_CMP_NE INT
VM_LABEL L178
VM_JZ L177
; THEN
EF_GOTO_CURSOR 0 10
VM_LABEL L177
; END_IF
VM_LABEL L176
; END_IF
; IF
VM_PUSH BOOL X Boot_Mng.USBEject
VM_JZ L179
; THEN
EF_GOTO_MASK USBEject
VM_LABEL L179
; END_IF
; IF
VM_PUSH BOOL X FWMismatch
VM_JZ L180
; THEN
; IF
VM_PUSH BOOL EF old_FWMismatch
VM_NOT BOOL
VM_JZ L181
; THEN
VM_PUSH BOOL X FWMismatch
VM_POP BOOL EF old_FWMismatch
EF_GOTO_MASK Main_POOL
VM_LABEL L181
; END_IF
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_JUMP L182
VM_LABEL L180
; ELSE
; IF
VM_PUSH BOOL EF old_FWMismatch
VM_JZ L184
; THEN
VM_PUSH BOOL X FWMismatch
VM_POP BOOL EF old_FWMismatch
EF_GOTO_MASK Main_POOL
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_LABEL L184
; END_IF
; END_IF
VM_LABEL L182
; IF
VM_PUSH BOOL X Role_Master
VM_JZ L185
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X PIC_RoleSlave
VM_JUMP L186
VM_LABEL L185
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X PIC_RoleSlave
; END_IF
VM_LABEL L186
; IF
VM_PUSH BOOL X UnitOn
VM_DUP BOOL
VM_JZ L189
VM_POP_AWAY BOOL
VM_PUSH BOOL X ManualManage
VM_LABEL L189
VM_JZ L188
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ManualManage
VM_LABEL L188
; END_IF
; IF
VM_PUSH BOOL X En_DP_TOP
VM_DUP BOOL
VM_JZ L191
VM_POP_AWAY BOOL
VM_PUSH BOOL X NoConnect
VM_LABEL L191
VM_JZ L190
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X PIC_Fan
VM_JUMP L192
VM_LABEL L190
; ELSE
; IF
VM_PUSH BOOL X DO_SuFan
VM_DUP BOOL
VM_JNZ L195
VM_POP_AWAY BOOL
VM_PUSH BOOL X DO_ExhFan
VM_LABEL L195
VM_DUP BOOL
VM_JNZ L196
VM_POP_AWAY BOOL
VM_PUSH BOOL X DO_FC
VM_LABEL L196
VM_JZ L194
; THEN
; IF
VM_PUSH INT X PIC_Fan
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L197
; THEN
VM_PUSH_IMM INT 2
VM_POP INT X PIC_Fan
VM_JUMP L198
VM_LABEL L197
; ELSE
VM_PUSH_IMM INT 1
VM_POP INT X PIC_Fan
; END_IF
VM_LABEL L198
VM_JUMP L200
VM_LABEL L194
; IF
VM_PUSH BOOL X FLR_FanSupplyTK.Active
VM_DUP BOOL
VM_JNZ L202
VM_POP_AWAY BOOL
VM_PUSH BOOL X FLR_FanExhTK.Active
VM_LABEL L202
VM_JZ L201
; THEN
VM_PUSH_IMM INT 3
VM_POP INT X PIC_Fan
VM_JUMP L203
VM_LABEL L201
; ELSE
VM_PUSH_IMM INT 0
VM_POP INT X PIC_Fan
; END_IF
VM_LABEL L203
VM_LABEL L200
; END_IF
VM_LABEL L192
; IF
VM_PUSH BOOL X CurSlaveShow
VM_JZ L205
; THEN
; IF
VM_PUSH USINT X CurState
VM_PUSH_IMM USINT 5
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L207
VM_POP_AWAY BOOL
VM_PUSH USINT X CurState
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_LABEL L207
VM_JZ L206
; THEN
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_JUMP L208
VM_LABEL L206
; ELSE
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; END_IF
VM_LABEL L208
VM_LABEL L205
; END_IF
; IF
VM_PUSH BOOL X MaskMng.SlaveNoAlarms
VM_JZ L210
; THEN
EF_GOTO_MASK Slave_NoAlrms
VM_PUSH_IMM BOOL 0
VM_POP BOOL X MaskMng.SlaveNoAlarms
VM_LABEL L210
; END_IF
VM_RTS

; CheckStoredVar_Alrm()
VM_FUNCTION _CheckStoredVar_Alrm_
VM_DATA 0
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM USINT 1
VM_PUSH_AMP REAL X AlrmStoredVarReal1
VM_SYSTEM 35
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L216
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnStoredVar1_REAL
VM_JUMP L217
VM_LABEL L216
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnStoredVar1_REAL
; END_IF
VM_LABEL L217
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM USINT 2
VM_PUSH_AMP REAL X AlrmStoredVarReal2
VM_SYSTEM 35
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L219
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnStoredVar2_REAL
VM_JUMP L220
VM_LABEL L219
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnStoredVar2_REAL
; END_IF
VM_LABEL L220
VM_RTS

; CheckActiveAlarm()
VM_FUNCTION _CheckActiveAlarm_
VM_DATA 4
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnCheckAlarm
VM_SYSTEM 32
VM_POP DINT X N_Alrms
VM_PUSH_IMM USINT 1
VM_POP USINT X __SYSVA_MANUAL_BUZZER_OFF
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_MANUAL_BUZZER_ON
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L215
; THEN
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM DINT 1
VM_POP DINT X AlrmIdx
VM_PUSH DINT X AlrmIdx
VM_PUSH_AMP DINT X AlrmCode
VM_PUSH_AMP DINT X AlarmMng.AlrmTime
VM_SYSTEM 33
VM_POPL DINT 0
VM_JSR _CheckStoredVar_Alrm_
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF isActiveAlarmLoop
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF isNoAlarmMask
EF_GOTO_MASK Alrms_Active
VM_JUMP L222
VM_LABEL L215
; ELSE
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 1
VM_CMP_LE INT
VM_JZ L224
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF isNoAlarmMask
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF isActiveAlarmLoop
EF_GOTO_MASK Alrms_NoAlrms
VM_JUMP L225
VM_LABEL L224
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 3
VM_CMP_GE INT
VM_JZ L226
; THEN
VM_SYSTEM 36
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL X AlarmMng.AlrmResByPGD1
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
VM_LABEL L226
; END_IF
VM_LABEL L225
; END_IF
VM_LABEL L222
VM_RTS

; CheckAlarm()
VM_FUNCTION _CheckAlarm_
VM_DATA 0
VM_SYSTEM 32
VM_POP DINT X N_Alrms
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_POP BOOL X isAlarm
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH DINT EF N_Alrms_Prev
VM_CMP_GT DINT
VM_JZ L211
; THEN
; IF
VM_PUSH BOOL X GeneralMng_ST.RESERVED3
VM_JZ L212
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X __SYSVA_MANUAL_BUZZER_ON
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_MANUAL_BUZZER_OFF
VM_LABEL L212
; END_IF
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnCheckAlarm
; IF
VM_PUSH BOOL EF isNoAlarmMask
VM_DUP BOOL
VM_JNZ L214
VM_POP_AWAY BOOL
VM_PUSH BOOL EF isActiveAlarmLoop
VM_LABEL L214
VM_JZ L213
; THEN
VM_JSR _CheckActiveAlarm_
VM_LABEL L213
; END_IF
VM_JUMP L227
VM_LABEL L211
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L229
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH DINT EF N_Alrms_Prev
VM_CMP_LT DINT
VM_LABEL L229
VM_JZ L228
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X __SYSVA_MANUAL_BUZZER_OFF
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_MANUAL_BUZZER_ON
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; IF
VM_PUSH BOOL EF isActiveAlarmLoop
VM_JZ L230
; THEN
VM_JSR _CheckActiveAlarm_
VM_LABEL L230
; END_IF
VM_JUMP L231
VM_LABEL L228
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH DINT EF N_Alrms_Prev
VM_CMP_LT DINT
VM_JZ L232
; THEN
; IF
VM_PUSH BOOL EF isActiveAlarmLoop
VM_JZ L233
; THEN
VM_JSR _CheckActiveAlarm_
VM_LABEL L233
; END_IF
VM_LABEL L232
; END_IF
VM_LABEL L231
VM_LABEL L227
VM_PUSH DINT X N_Alrms
VM_POP DINT EF N_Alrms_Prev
VM_RTS

; BlinkQuickMenu()
VM_FUNCTION _BlinkQuickMenu_
VM_DATA 0
; IF
VM_PUSH INT EF DTQM
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L235
VM_POP_AWAY BOOL
VM_PUSH INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_PUSH_IMM INT 1
VM_ADD INT
VM_CMP_LT INT
VM_LABEL L235
VM_JZ L234
; THEN
VM_PUSH_IMM INT 0
VM_POP INT EF DTQM
VM_PUSH INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_ADD INT
VM_POP INT X IdxImgQM
VM_JUMP L236
VM_LABEL L234
; IF
VM_PUSH INT EF DTQM
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L238
VM_POP_AWAY BOOL
VM_PUSH INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_CMP_GT INT
VM_LABEL L238
VM_JZ L237
; THEN
VM_PUSH_IMM INT 0
VM_POP INT EF DTQM
VM_PUSH INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_SUB INT
VM_POP INT X IdxImgQM
VM_LABEL L237
; END_IF
VM_LABEL L236
VM_PUSH INT EF DTQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF DTQM
VM_RTS

; RetMainMsk()
VM_FUNCTION _RetMainMsk_
VM_DATA 0
; IF
VM_PUSH USINT X __SYSVA_KEY_PRESSED
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L239
; THEN
VM_PUSH_IMM INT 0
VM_POP INT EF DTRetMain
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_KEY_PRESSED
VM_JUMP L240
VM_LABEL L239
; IF
VM_PUSH INT EF DTRetMain
VM_PUSH_IMM INT 300
VM_CMP_EQ INT
VM_JZ L241
; THEN
VM_PUSH INT EF MAIN_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH_IMM UINT 0
VM_POP UINT X PwdIn
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnLogOut
; IF
VM_PUSH BOOL X CurSlaveShow
VM_JZ L242
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X CurSlaveShow
; IF
VM_SYSTEM 32
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L243
; THEN
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_JUMP L244
VM_LABEL L243
; ELSE
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; END_IF
VM_LABEL L244
VM_LABEL L242
; END_IF
; IF
VM_PUSH BOOL X ManualManage
VM_JZ L246
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ManualManage
VM_LABEL L246
; END_IF
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_JSR _GotoMain_
VM_LABEL L241
; END_IF
VM_LABEL L240
VM_PUSH INT EF DTRetMain
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF DTRetMain
VM_RTS

; UsrAccessMenu()
VM_FUNCTION _UsrAccessMenu_
VM_DATA 0
; IF
VM_PUSH INT EF CntDwnPwdTypMenu
VM_PUSH_IMM INT 0
VM_CMP_GT INT
VM_JZ L247
; THEN
VM_PUSH INT EF CntDwnPwdTypMenu
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT EF CntDwnPwdTypMenu
VM_JUMP L248
VM_LABEL L247
; IF
VM_PUSH INT EF CntDwnPwdTypMenu
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_JZ L249
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X PwdTypMenu
VM_LABEL L249
; END_IF
VM_LABEL L248
VM_RTS

; CheckAlrm_Reset()
VM_FUNCTION _CheckAlrm_Reset_
VM_DATA 0
; IF
VM_PUSH BOOL EF En_CheckAlrm_Reset
VM_JZ L250
; THEN
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L251
; THEN
EF_GOTO_MASK Alrms_NoAlrms
VM_JUMP L252
VM_LABEL L251
; ELSE
VM_JSR _CheckActiveAlarm_
; END_IF
VM_LABEL L252
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_CheckAlrm_Reset
VM_LABEL L250
; END_IF
VM_RTS

; TIMED_LOOP()
VM_FUNCTION _TIMED_LOOP_
VM_DATA 0
VM_JSR _ButtonsSupport_
VM_JSR _PopUpSupport_
VM_JSR _ArrowSupport_
VM_JSR _NextCycleAction_
; IF
VM_PUSH BOOL EF BootEnd
VM_NOT BOOL
VM_JZ L126
; THEN
VM_JSR _InstDef_
VM_JUMP L148
VM_LABEL L126
; IF
VM_PUSH BOOL X CompletePreConfig
VM_NOT BOOL
VM_DUP BOOL
VM_JNZ L150
VM_POP_AWAY BOOL
VM_PUSH BOOL EF PreConfigCheck
VM_NOT BOOL
VM_LABEL L150
VM_JZ L149
; THEN
VM_JSR _PreConfig_
VM_JUMP L173
VM_LABEL L149
; IF
VM_PUSH BOOL X GeneralMng_ST.VerMismatch
VM_NOT BOOL
VM_DUP BOOL
VM_JZ L175
VM_POP_AWAY BOOL
VM_PUSH BOOL X Boot_Mng.En_ModelLine_Change
VM_NOT BOOL
VM_LABEL L175
VM_JZ L174
; THEN
VM_JSR _MyLoopFunction_
VM_JSR _CheckAlarm_
VM_JSR _BlinkQuickMenu_
VM_JSR _RetMainMsk_
VM_JSR _UsrAccessMenu_
VM_JSR _CheckAlrm_Reset_
VM_LABEL L174
; END_IF
VM_LABEL L173
VM_LABEL L148
VM_PUSH_IMM DINT 1
VM_PUSH_IMM UDINT 240
VM_SYSTEM 46
VM_POP_AWAY DINT
VM_PUSH_IMM DINT 2
VM_PUSH_IMM UDINT 240
VM_SYSTEM 19
VM_POP_AWAY DINT
VM_PUSH REAL X GeneralMng_ST.BoardTemp_Msk
VM_POP REAL X BoardTempMsk
; IF
VM_PUSH UDINT X GeneralMng_ST.BoardTyp[1]
VM_PUSH_IMM UDINT 12
VM_CMP_EQ UDINT
VM_JZ L254
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ShowTemp
VM_JUMP L255
VM_LABEL L254
; IF
VM_PUSH UDINT X GeneralMng_ST.BoardTyp[1]
VM_PUSH_IMM UDINT 12
VM_CMP_NE UDINT
VM_JZ L256
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ShowTemp
VM_LABEL L256
; END_IF
VM_LABEL L255
; IF
VM_PUSH BOOL EF FirstCycleDone
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_JZ L257
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF FirstCycleDone
VM_PUSH DINT X STD_UOM_ZONE_UI
VM_SYSTEM 49
VM_POP_AWAY DINT
VM_LABEL L257
; END_IF
VM_RTS

; ModelLine_Confirm()
VM_FUNCTION _ModelLine_Confirm_
VM_DATA 0
EF_COMPARE
EF_GOTO_MASK Reboot
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Boot_Mng.En_ModelLine_Change
VM_RTS

; EndPreConfig()
VM_FUNCTION _EndPreConfig_
VM_DATA 0
; CASE
VM_PUSH USINT X ModelLine
; OF
VM_CASE USINT 1 L277
VM_CASE USINT 2 L278
VM_POP_AWAY USINT
VM_JUMP L276
VM_LABEL L277
VM_PUSH USINT X temp_UnitModel
VM_POP USINT X UnitModel
VM_PUSH BOOL X temp_SummerMode
VM_POP BOOL X Par_Dp10
VM_PUSH USINT X temp_HeatType
VM_POP USINT X HeatType
VM_PUSH_IMM BOOL 1
VM_POP BOOL X CompletePreConfig
VM_JUMP L276
VM_LABEL L278
VM_PUSH USINT X temp_CurDLE
VM_POP USINT X CurDLE
; CASE
VM_PUSH USINT X temp_CurDLE
; OF
VM_CASE USINT 1 L280
VM_CASE USINT 2 L281
VM_CASE USINT 3 L282
VM_CASE USINT 4 L283
VM_CASE USINT 5 L284
VM_POP_AWAY USINT
VM_JUMP L279
VM_LABEL L280
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_DLE[1]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[2]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[3]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[4]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[5]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Use_ExhFan
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Use_Recycling
VM_JUMP L279
VM_LABEL L281
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[1]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_DLE[2]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[3]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[4]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[5]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Use_ExhFan
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Use_Recycling
VM_JUMP L279
VM_LABEL L282
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[1]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[2]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_DLE[3]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[4]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[5]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Use_ExhFan
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Use_Recycling
VM_JUMP L279
VM_LABEL L283
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[1]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[2]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[3]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_DLE[4]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[5]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Use_ExhFan
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Use_Recycling
VM_JUMP L279
VM_LABEL L284
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[1]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[2]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[3]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[4]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_DLE[5]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Use_ExhFan
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Use_Recycling
VM_LABEL L279
VM_JSR _WorkPriority_
VM_POP_AWAY BOOL
VM_PUSH USINT X temp_ModeSEQ
VM_POP USINT X ModeSEQ
VM_PUSH DINT X temp_SEQ_Order[1]
VM_POP DINT X SEQ_Order[1]
VM_PUSH DINT X temp_SEQ_Order[2]
VM_POP DINT X SEQ_Order[2]
VM_PUSH DINT X temp_SEQ_Order[3]
VM_POP DINT X SEQ_Order[3]
VM_PUSH DINT X temp_SEQ_Order[4]
VM_POP DINT X SEQ_Order[4]
VM_PUSH DINT X temp_SEQ_Order[5]
VM_POP DINT X SEQ_Order[5]
VM_PUSH DINT X temp_SEQ_Order[6]
VM_POP DINT X SEQ_Order[6]
VM_PUSH BOOL X temp_Use_ExhaustFilter
VM_POP BOOL X Use_ExhaustFilter
VM_PUSH BOOL X temp_Use_Sensor_CO2
VM_POP BOOL X Use_Sensor_CO2
VM_PUSH BOOL X temp_Use_Sensor_Troom2
VM_POP BOOL X Use_Sensor_Troom2
VM_PUSH BOOL X temp_Use_SupplyFilter
VM_POP BOOL X Use_SupplyFilter
VM_PUSH BOOL X temp_Use_GateHeater
VM_POP BOOL X Use_GateHeater
VM_PUSH BOOL X temp_Use_VortexDiff
VM_POP BOOL X Use_VortexDiff
VM_PUSH USINT X temp_DLE_CoolType
VM_POP USINT X DLE_CoolType
VM_PUSH USINT X temp_DLE_HeatType
VM_POP USINT X DLE_HeatType
VM_PUSH_IMM USINT 0
VM_POP USINT EF popup_StatePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X CompletePreConfig
VM_LABEL L276
VM_RTS

; RetMainLoop()
VM_FUNCTION _RetMainLoop_
VM_DATA 0
VM_PUSH INT EF IdxMenuMskTmp
VM_POP INT X IdxMenuMsk
VM_PUSH INT EF BarPosTmp
VM_POP INT X BarPos
VM_PUSH INT EF MAIN_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH INT EF CurrItemNoTmp
VM_POP INT X CurrItemNo
VM_PUSH INT EF IdxImg1Tmp
VM_POP INT X IdxImg1
VM_PUSH INT EF IdxImg2Tmp
VM_POP INT X IdxImg2
VM_PUSH INT EF IdxImg3Tmp
VM_POP INT X IdxImg3
EF_GOTO_MASK POOL_Menu_Main
VM_RTS

; RetSettingsLoop()
VM_FUNCTION _RetSettingsLoop_
VM_DATA 0
VM_PUSH INT EF IdxMskTmp1
VM_POP INT X IdxMenuMsk
VM_PUSH INT EF BarPosTmp1
VM_POP INT X BarPos
VM_PUSH INT EF SETTINGS_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH INT EF CurrItemNoTmp1
VM_POP INT X CurrItemNo
VM_PUSH INT EF IdxImg1Tmp1
VM_POP INT X IdxImg1
VM_PUSH INT EF IdxImg2Tmp1
VM_POP INT X IdxImg2
VM_PUSH INT EF IdxImg3Tmp1
VM_POP INT X IdxImg3
EF_GOTO_MASK Settings
VM_RTS

; RetVentilationMask()
VM_FUNCTION _RetVentilationMask_
VM_DATA 0
VM_PUSH INT EF IdxMskTmp1
VM_POP INT X IdxMenuMsk
VM_PUSH INT EF BarPosTmp1
VM_POP INT X BarPos
VM_PUSH INT EF VENT_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH INT EF CurrItemNoTmp1
VM_POP INT X CurrItemNo
VM_PUSH INT EF IdxImg1Tmp1
VM_POP INT X IdxImg1
VM_PUSH INT EF IdxImg2Tmp1
VM_POP INT X IdxImg2
VM_PUSH INT EF IdxImg3Tmp1
VM_POP INT X IdxImg3
EF_GOTO_MASK Ventilation_menu
VM_PUSH_IMM INT 3
VM_POP INT EF MaskPos
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_RTS

; RetGroupMask()
VM_FUNCTION _RetGroupMask_
VM_DATA 0
; IF
VM_PUSH BOOL X Role_Master
VM_JZ L298
; THEN
EF_GOTO_MASK GroupManage
VM_JUMP L299
VM_LABEL L298
; ELSE
EF_GOTO_MASK GroupManage_Slave
; END_IF
VM_LABEL L299
VM_PUSH_IMM INT 4
VM_POP INT EF MaskPos
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_RTS

; RetServiceMask()
VM_FUNCTION _RetServiceMask_
VM_DATA 0
VM_PUSH INT EF IdxMskTmp1
VM_POP INT X IdxMenuMsk
VM_PUSH INT EF BarPosTmp1
VM_POP INT X BarPos
VM_PUSH INT EF CurrItemNoTmp1
VM_POP INT X CurrItemNo
VM_PUSH INT EF IdxImg1Tmp1
VM_POP INT X IdxImg1
VM_PUSH INT EF IdxImg2Tmp1
VM_POP INT X IdxImg2
VM_PUSH INT EF IdxImg3Tmp1
VM_POP INT X IdxImg3
; IF
VM_PUSH BOOL X EnPwdChgM
VM_JZ L301
; THEN
VM_PUSH INT EF HIDE_SERVICE_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
EF_GOTO_MASK Hide_Service_menu
VM_JUMP L302
VM_LABEL L301
; ELSE
VM_PUSH INT EF SERVICE_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
EF_GOTO_MASK Service_menu
; END_IF
VM_LABEL L302
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Output_Ctrl.Show_IO
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ManualManage
VM_PUSH_IMM BOOL 0
VM_POP BOOL X MaskMng.Show_Shedule
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Upgrade.Mode_Upgrade
VM_PUSH_IMM INT 3
VM_POP INT EF MaskPos
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_RTS

; RetFridgeMask()
VM_FUNCTION _RetFridgeMask_
VM_DATA 0
EF_GOTO_MASK Refridgerator_menu
VM_PUSH_IMM INT 3
VM_POP INT EF MaskPos
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_RTS

; RetMClimateMask()
VM_FUNCTION _RetMClimateMask_
VM_DATA 0
EF_GOTO_MASK MClimate_menu
VM_PUSH_IMM INT 5
VM_POP INT EF MaskPos
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_RTS

; RetIOManageMask()
VM_FUNCTION _RetIOManageMask_
VM_DATA 0
EF_GOTO_MASK IOManage_menu
VM_PUSH_IMM INT 7
VM_POP INT EF MaskPos
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ManualManage
VM_RTS

; RetConfiguratorMask()
VM_FUNCTION _RetConfiguratorMask_
VM_DATA 0
EF_GOTO_MASK Configurator_menu
VM_PUSH_IMM INT 7
VM_POP INT EF MaskPos
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Config_Reset
VM_RTS

; GlobalEsc()
VM_FUNCTION _GlobalEsc_
VM_DATA 0
; CASE
VM_PUSH INT EF MaskPos
; OF
VM_CASE INT 0 L286
VM_CASE INT 1 L287
VM_CASE INT 2 L288
VM_CASE INT 3 L289
VM_CASE INT 4 L290
VM_CASE INT 5 L291
VM_CASE INT 6 L292
VM_CASE INT 7 L293
VM_CASE INT 8 L294
VM_CASE INT 9 L295
VM_CASE INT 10 L296
VM_CASE INT 11 L297
VM_POP_AWAY INT
VM_JUMP L285
VM_LABEL L286
VM_JSR _GotoMain_
VM_PUSH_IMM INT 0
VM_POP INT EF MaskPos
VM_JUMP L285
VM_LABEL L287
VM_JSR _GotoMain_
VM_PUSH_IMM INT 0
VM_POP INT EF MaskPos
VM_JUMP L285
VM_LABEL L288
EF_GOTO_MASK POOL_Menu_Main
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
VM_JUMP L285
VM_LABEL L289
VM_JSR _RetMainLoop_
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
VM_JUMP L285
VM_LABEL L290
VM_JSR _RetSettingsLoop_
VM_PUSH_IMM INT 3
VM_POP INT EF MaskPos
VM_JUMP L285
VM_LABEL L291
VM_JSR _RetVentilationMask_
VM_JUMP L285
VM_LABEL L292
VM_JSR _RetGroupMask_
VM_JUMP L285
VM_LABEL L293
VM_JSR _RetServiceMask_
VM_JUMP L285
VM_LABEL L294
VM_JSR _RetFridgeMask_
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Show_CompStats
VM_JUMP L285
VM_LABEL L295
VM_JSR _RetMClimateMask_
VM_JUMP L285
VM_LABEL L296
VM_JSR _RetIOManageMask_
VM_JUMP L285
VM_LABEL L297
VM_JSR _RetConfiguratorMask_
VM_LABEL L285
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 4
VM_CMP_EQ USINT
VM_JZ L304
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_JUMP L305
VM_LABEL L304
; ELSE
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
; END_IF
VM_LABEL L305
; IF
VM_PUSH BOOL EF isActiveAlarmLoop
VM_JZ L307
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF isActiveAlarmLoop
VM_LABEL L307
; END_IF
; IF
VM_PUSH BOOL EF isNoAlarmMask
VM_JZ L308
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF isNoAlarmMask
VM_LABEL L308
; END_IF
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ModePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X NotModePRG
VM_RTS

; ShowPopUpMessage(USINT)
VM_FUNCTION _ShowPopUpMessage_USINT_
VM_DATA 1
VM_POPL USINT 0
VM_PUSH USINT X StatePRG
VM_POP USINT EF popup_StatePRG
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
EF_STORE_MASK
VM_PUSH_IMM USINT 0
VM_POP USINT X DTPopUp
VM_PUSHL USINT 0
VM_POP USINT X PopUp_Message
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Show_DTPopUp
EF_GOTO_MASK PopUp_Message_Mask
VM_RTS

; PopUpQuestion_Confirm()
VM_FUNCTION _PopUpQuestion_Confirm_
VM_DATA 0
VM_PUSH USINT EF popup_StatePRG
VM_POP USINT X StatePRG
; CASE
VM_PUSH USINT X PopUp_Question
; OF
VM_CASE USINT 1 L259
VM_CASE USINT 2 L260
VM_CASE USINT 3 L261
VM_CASE USINT 4 L262
VM_CASE USINT 5 L263
VM_CASE USINT 6 L264
VM_CASE USINT 7 L265
VM_CASE USINT 8 L266
VM_CASE USINT 9 L267
VM_CASE USINT 10 L268
VM_CASE USINT 11 L269
VM_CASE USINT 12 L270
VM_POP_AWAY USINT
VM_JUMP L258
VM_LABEL L259
VM_PUSH_IMM BOOL 1
VM_POP BOOL X LocalMode
VM_PUSH_IMM USINT 2
VM_POP USINT X StatePRG
EF_RESTORE_MASK
EF_GOTO_CURSOR 0 10
VM_JUMP L258
VM_LABEL L260
EF_GOTO_MASK Reboot
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Boot_Mng.Config_Reset
VM_JUMP L258
VM_LABEL L261
EF_GOTO_MASK Reboot
VM_PUSH USINT X temp_HeatType
VM_POP USINT X HeatType
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_Reboot
VM_JUMP L258
VM_LABEL L262
EF_GOTO_MASK Reboot
VM_PUSH USINT X temp_Role
VM_POP USINT X Role
VM_PUSH_IMM UINT 0
VM_POP UINT X Port_FBus2
VM_PUSH_IMM USINT 0
VM_POP USINT X Port_BMS2
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_Reboot
VM_JUMP L258
VM_LABEL L263
EF_GOTO_MASK Reboot
VM_PUSH USINT X Temp_MB_port
VM_POP USINT X MB_port
VM_PUSH USINT X Temp_MB_Address
VM_POP USINT X MB_Address
; CASE
VM_PUSH USINT X Temp_MB_port
; OF
VM_CASE USINT 0 L272
VM_CASE USINT 1 L273
VM_CASE USINT 2 L274
VM_CASE USINT 3 L275
VM_POP_AWAY USINT
VM_JUMP L271
VM_LABEL L272
VM_PUSH_IMM USINT 255
VM_POP USINT X Port_Ethernet
VM_PUSH_IMM USINT 255
VM_POP USINT X Port_BMS_Card
VM_PUSH_IMM USINT 255
VM_POP USINT X Port_BMS2
VM_JUMP L271
VM_LABEL L273
VM_PUSH_IMM USINT 4
VM_POP USINT X Port_Ethernet
VM_PUSH_IMM USINT 255
VM_POP USINT X Port_BMS_Card
VM_PUSH_IMM USINT 255
VM_POP USINT X Port_BMS2
VM_JUMP L271
VM_LABEL L274
VM_PUSH_IMM USINT 255
VM_POP USINT X Port_Ethernet
VM_PUSH_IMM USINT 4
VM_POP USINT X Port_BMS_Card
VM_PUSH_IMM USINT 255
VM_POP USINT X Port_BMS2
VM_PUSH UDINT X Temp_MB_Baudrate
VM_POP UDINT X BMS_Card_Baudrate
VM_PUSH USINT X Temp_MB_Stopbits
VM_POP USINT X BMS_Card_StopBits
VM_PUSH USINT X Temp_MB_Parity
VM_POP USINT X BMS_Card_Parity
VM_JUMP L271
VM_LABEL L275
VM_PUSH_IMM USINT 255
VM_POP USINT X Port_Ethernet
VM_PUSH_IMM USINT 255
VM_POP USINT X Port_BMS_Card
VM_PUSH_IMM USINT 4
VM_POP USINT X Port_BMS2
VM_PUSH UDINT X Temp_MB_Baudrate
VM_POP UDINT X BMS2_Baudrate
VM_PUSH USINT X Temp_MB_Stopbits
VM_POP USINT X BMS2_StopBits
VM_PUSH USINT X Temp_MB_Parity
VM_POP USINT X BMS2_Parity
VM_LABEL L271
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_Reboot
VM_JUMP L258
VM_LABEL L264
VM_JSR _EndPreConfig_
VM_JSR _GlobalEsc_
VM_JUMP L258
VM_LABEL L265
EF_GOTO_MASK TOP_DLE_Type
EF_GOTO_CURSOR 0 10
VM_JUMP L258
VM_LABEL L266
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ResetHoursComp[1]
VM_JSR _PopUp_ESC_
VM_JUMP L258
VM_LABEL L267
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ResetHoursComp[2]
VM_JSR _PopUp_ESC_
VM_JUMP L258
VM_LABEL L268
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ResetHoursComp[3]
VM_JSR _PopUp_ESC_
VM_JUMP L258
VM_LABEL L269
; CASE
VM_PUSH USINT X ModelLine
; OF
VM_CASE USINT 1 L310
VM_CASE USINT 2 L311
VM_POP_AWAY USINT
VM_JUMP L309
VM_LABEL L310
; IF
VM_PUSH BOOL X En_DP_TOP
VM_JZ L312
; THEN
VM_PUSH_IMM USINT 9
VM_JSR _ShowPopUpMessage_USINT_
VM_JUMP L313
VM_LABEL L312
; ELSE
VM_PUSH USINT X UnitModel
VM_POP USINT X temp_UnitModel
VM_PUSH BOOL X Par_Dp10
VM_POP BOOL X temp_SummerMode
VM_PUSH USINT X HeatType
VM_POP USINT X temp_HeatType
VM_PUSH_IMM BOOL 1
VM_POP BOOL X NotModePRG
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ModePRG
VM_PUSH_IMM USINT 2
VM_POP USINT X StatePRG
EF_GOTO_MASK TOP_DLE_Type
EF_GOTO_CURSOR 0 10
; END_IF
VM_LABEL L313
VM_JUMP L309
VM_LABEL L311
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ModePRG
VM_PUSH_IMM BOOL 0
VM_POP BOOL X NotModePRG
VM_PUSH_IMM USINT 2
VM_POP USINT X StatePRG
VM_PUSH DINT X SEQ_Order[1]
VM_POP DINT X temp_SEQ_Order[1]
VM_PUSH DINT X SEQ_Order[2]
VM_POP DINT X temp_SEQ_Order[2]
VM_PUSH DINT X SEQ_Order[3]
VM_POP DINT X temp_SEQ_Order[3]
VM_PUSH DINT X SEQ_Order[4]
VM_POP DINT X temp_SEQ_Order[4]
VM_PUSH DINT X SEQ_Order[5]
VM_POP DINT X temp_SEQ_Order[5]
VM_PUSH DINT X SEQ_Order[6]
VM_POP DINT X temp_SEQ_Order[6]
VM_PUSH USINT X Role
VM_POP USINT X temp_Role
VM_PUSH USINT X CurDLE
VM_POP USINT X temp_CurDLE
VM_PUSH USINT X ModeSEQ
VM_POP USINT X temp_ModeSEQ
VM_PUSH BOOL X Use_ExhaustFilter
VM_POP BOOL X temp_Use_ExhaustFilter
VM_PUSH BOOL X Use_Sensor_CO2
VM_POP BOOL X temp_Use_Sensor_CO2
VM_PUSH BOOL X Use_Sensor_Troom2
VM_POP BOOL X temp_Use_Sensor_Troom2
VM_PUSH BOOL X Use_SupplyFilter
VM_POP BOOL X temp_Use_SupplyFilter
VM_PUSH BOOL X Use_GateHeater
VM_POP BOOL X temp_Use_GateHeater
VM_PUSH BOOL X Use_VortexDiff
VM_POP BOOL X temp_Use_VortexDiff
VM_PUSH USINT X DLE_CoolType
VM_POP USINT X temp_DLE_CoolType
VM_PUSH USINT X DLE_HeatType
VM_POP USINT X temp_DLE_HeatType
EF_GOTO_MASK TOP_DLE_Type
EF_GOTO_CURSOR 0 10
VM_LABEL L309
VM_JUMP L258
VM_LABEL L270
VM_JSR _GlobalEsc_
VM_LABEL L258
VM_RTS

; LangMsk_Esc()
VM_FUNCTION _LangMsk_Esc_
VM_DATA 0
; IF
VM_PUSH BOOL X EnLangChg
VM_JZ L315
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnLangChg
VM_JUMP L316
VM_LABEL L315
; ELSE
VM_JSR _GlobalEsc_
; END_IF
VM_LABEL L316
VM_RTS

; Lang_UP()
VM_FUNCTION _Lang_UP_
VM_DATA 0
VM_RTS

; Lang_Rus()
VM_FUNCTION _Lang_Rus_
VM_DATA 0
; IF
VM_PUSH DINT X GeneralMng_ST.ID_Lang
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L318
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X GeneralMng_ST.ID_Lang
VM_PUSH DINT X GeneralMng_ST.ID_Lang
VM_SYSTEM 31
VM_POP_AWAY DINT
VM_LABEL L318
; END_IF
VM_RTS

; Lang_Eng()
VM_FUNCTION _Lang_Eng_
VM_DATA 0
; IF
VM_PUSH DINT X GeneralMng_ST.ID_Lang
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L319
; THEN
VM_PUSH_IMM DINT 1
VM_POP DINT X GeneralMng_ST.ID_Lang
VM_PUSH DINT X GeneralMng_ST.ID_Lang
VM_SYSTEM 31
VM_POP_AWAY DINT
VM_LABEL L319
; END_IF
VM_RTS

; CheckStoredVar_Log()
VM_FUNCTION _CheckStoredVar_Log_
VM_DATA 0
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM USINT 1
VM_PUSH_AMP REAL X AlrmStoredVarReal1
VM_SYSTEM 42
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L321
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnStoredVar1_REAL
VM_JUMP L322
VM_LABEL L321
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnStoredVar1_REAL
; END_IF
VM_LABEL L322
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM USINT 2
VM_PUSH_AMP REAL X AlrmStoredVarReal2
VM_SYSTEM 42
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L324
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnStoredVar2_REAL
VM_JUMP L325
VM_LABEL L324
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnStoredVar2_REAL
; END_IF
VM_LABEL L325
VM_RTS

; gotoAlarmLog()
VM_FUNCTION _gotoAlarmLog_
VM_DATA 0
VM_SYSTEM 39
VM_POP DINT EF AlrmLogsTot
; IF
VM_PUSH DINT EF AlrmLogsTot
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L320
; THEN
VM_PUSH_IMM DINT 1
VM_POP DINT X AlrmLogsIdx
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_AMP DINT X AlrmLogCode
VM_PUSH_AMP USINT X AlrmLogEventType
VM_PUSH_AMP DINT X AlarmMng.AlrmLogTime
VM_SYSTEM 40
VM_POP DINT EF infoLogOk
VM_JSR _CheckStoredVar_Log_
VM_JUMP L327
VM_LABEL L320
; ELSE
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmLogsIdx
VM_PUSH_IMM DINT -1
VM_POP DINT EF infoLogOk
; END_IF
VM_LABEL L327
; IF
VM_PUSH DINT EF infoLogOk
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L329
; THEN
VM_PUSH DINT X AlrmLogsIdx
VM_POP DINT EF LastValidRecord
EF_GOTO_MASK Alrms_Log
VM_JUMP L330
VM_LABEL L329
; ELSE
EF_GOTO_MASK Alrms_NoLog
; END_IF
VM_LABEL L330
VM_RTS

; Slave_Alrms_Esc()
VM_FUNCTION _Slave_Alrms_Esc_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_POP BOOL X CurSlaveAlarmShow
EF_RESTORE_MASK
EF_GOTO_CURSOR 0 10
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 4
VM_CMP_EQ USINT
VM_JZ L332
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_LABEL L332
; END_IF
VM_RTS

; DoNothing()
VM_FUNCTION _DoNothing_
VM_DATA 0
VM_RTS

; ScrollAlarmLog_UP()
VM_FUNCTION _ScrollAlarmLog_UP_
VM_DATA 0
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L333
; THEN
EF_BEEP
VM_JUMP L334
VM_LABEL L333
; ELSE
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X AlrmLogsIdx
VM_PUSH DINT EF AlrmLogsIdxTemp
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT EF AlrmLogsIdxTemp
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_AMP DINT X AlrmLogCode
VM_PUSH_AMP USINT X AlrmLogEventType
VM_PUSH_AMP DINT X AlarmMng.AlrmLogTime
VM_SYSTEM 40
VM_POP DINT EF AlrmLogInfoErr
VM_JSR _CheckStoredVar_Log_
; END_IF
VM_LABEL L334
VM_RTS

; ScrollAlarmLog_DOWN()
VM_FUNCTION _ScrollAlarmLog_DOWN_
VM_DATA 0
VM_PUSH DINT X AlrmLogsIdx
VM_POP DINT EF AlrmLogsIdxTemp
VM_PUSH DINT EF AlrmLogsIdxTemp
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT EF AlrmLogsIdxTemp
VM_PUSH DINT EF AlrmLogsIdxTemp
VM_PUSH_AMP DINT EF AlrmLogCodeTemp
VM_PUSH_AMP USINT EF AlrmLogEventTypeTemp
VM_PUSH_AMP DINT EF AlrmLogTimeTemp
VM_SYSTEM 40
VM_POP DINT EF AlrmLogInfoErr
; IF
VM_PUSH DINT EF AlrmLogInfoErr
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L336
; THEN
EF_BEEP
VM_JUMP L337
VM_LABEL L336
; ELSE
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 64
VM_CMP_LT DINT
VM_JZ L339
; THEN
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X AlrmLogsIdx
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_AMP DINT X AlrmLogCode
VM_PUSH_AMP USINT X AlrmLogEventType
VM_PUSH_AMP DINT X AlarmMng.AlrmLogTime
VM_SYSTEM 40
VM_POP DINT EF AlrmLogInfoErr
VM_JSR _CheckStoredVar_Log_
VM_JUMP L340
VM_LABEL L339
; ELSE
VM_PUSH_IMM DINT 64
VM_POP DINT X AlrmLogsIdx
EF_BEEP
; END_IF
VM_LABEL L340
; END_IF
VM_LABEL L337
VM_RTS

; LedBlink()
VM_FUNCTION _LedBlink_
VM_DATA 0
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_RTS

; ScrollAlarm_UP()
VM_FUNCTION _ScrollAlarm_UP_
VM_DATA 0
VM_SYSTEM 32
VM_POP DINT X N_Alrms
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L342
; THEN
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_CMP_GT DINT
VM_DUP BOOL
VM_JZ L344
VM_POP_AWAY BOOL
VM_PUSH DINT X AlrmIdx
VM_PUSH DINT X N_Alrms
VM_CMP_LE DINT
VM_LABEL L344
VM_JZ L343
; THEN
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X AlrmIdx
VM_JUMP L345
VM_LABEL L343
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L346
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
EF_PREVIOUS_MASK
VM_JUMP L347
VM_LABEL L346
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L349
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L349
VM_JZ L348
; THEN
VM_PUSH DINT X N_Alrms
VM_POP DINT X AlrmIdx
EF_PREVIOUS_MASK
VM_LABEL L348
; END_IF
VM_LABEL L347
VM_LABEL L345
VM_PUSH DINT X AlrmIdx
VM_PUSH_AMP DINT X AlrmCode
VM_PUSH_AMP DINT X AlarmMng.AlrmTime
VM_SYSTEM 33
VM_POP_AWAY DINT
VM_JSR _CheckStoredVar_Alrm_
VM_JUMP L350
VM_LABEL L342
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L351
; THEN
EF_GOTO_MASK Alrms_NoAlrms
VM_LABEL L351
; END_IF
VM_LABEL L350
VM_RTS

; ScrollAlarm_DOWN()
VM_FUNCTION _ScrollAlarm_DOWN_
VM_DATA 0
VM_SYSTEM 32
VM_POP DINT X N_Alrms
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L353
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L353
VM_JZ L352
; THEN
EF_NEXT_MASK
VM_LABEL L352
; END_IF
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_GE DINT
VM_DUP BOOL
VM_JZ L355
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L355
VM_JZ L354
; THEN
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_GE DINT
VM_DUP BOOL
VM_JZ L357
VM_POP_AWAY BOOL
VM_PUSH DINT X AlrmIdx
VM_PUSH DINT X N_Alrms
VM_CMP_LT DINT
VM_LABEL L357
VM_JZ L356
; THEN
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X AlrmIdx
VM_JUMP L358
VM_LABEL L356
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH DINT X N_Alrms
VM_CMP_GE DINT
VM_JZ L359
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
EF_NEXT_MASK
VM_LABEL L359
; END_IF
VM_LABEL L358
VM_PUSH DINT X AlrmIdx
VM_PUSH_AMP DINT X AlrmCode
VM_PUSH_AMP DINT X AlarmMng.AlrmTime
VM_SYSTEM 33
VM_POP_AWAY DINT
VM_JSR _CheckStoredVar_Alrm_
VM_JUMP L360
VM_LABEL L354
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L361
; THEN
EF_GOTO_MASK Alrms_NoAlrms
VM_LABEL L361
; END_IF
VM_LABEL L360
VM_RTS

; ResetGlobalAlarm()
VM_FUNCTION _ResetGlobalAlarm_
VM_DATA 0
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 3
VM_CMP_GE INT
VM_JZ L362
; THEN
VM_SYSTEM 36
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL X AlarmMng.AlrmResByPGD1
VM_PUSH_IMM DINT 1
VM_POP DINT X AlrmIdx
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF En_CheckAlrm_Reset
VM_LABEL L362
; END_IF
VM_RTS

; Slave_Alrms_ALARM()
VM_FUNCTION _Slave_Alrms_ALARM_
VM_DATA 0
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 3
VM_CMP_GE INT
VM_JZ L363
; THEN
VM_PUSH_IMM BOOL 1
VM_PUSH_AMP BOOL X SlaveAlrmRes[1]
VM_PUSH USINT X CurSlave
VM_ADDRESS USINT 1 30 16
VM_POPI BOOL
VM_LABEL L363
; END_IF
VM_RTS

; Slave_Alrms_UP()
VM_FUNCTION _Slave_Alrms_UP_
VM_DATA 0
; IF
VM_PUSH DINT X Slave_AlrmIdx
VM_PUSH_IMM DINT 1
VM_CMP_GT DINT
VM_DUP BOOL
VM_JZ L365
VM_POP_AWAY BOOL
VM_PUSH DINT X Slave_AlrmIdx
VM_PUSH DINT X Slave_N_Alrms
VM_CMP_LE DINT
VM_LABEL L365
VM_JZ L364
; THEN
VM_PUSH DINT X Slave_AlrmIdx
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X Slave_AlrmIdx
VM_JUMP L366
VM_LABEL L364
; IF
VM_PUSH DINT X Slave_AlrmIdx
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L367
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X Slave_AlrmIdx
EF_PREVIOUS_MASK
VM_JUMP L368
VM_LABEL L367
; IF
VM_PUSH DINT X Slave_AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L370
VM_POP_AWAY BOOL
VM_PUSH DINT X Slave_N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L370
VM_JZ L369
; THEN
VM_PUSH DINT X Slave_N_Alrms
VM_POP DINT X Slave_AlrmIdx
EF_PREVIOUS_MASK
VM_LABEL L369
; END_IF
VM_LABEL L368
VM_LABEL L366
VM_RTS

; Slave_Alrms_DOWN()
VM_FUNCTION _Slave_Alrms_DOWN_
VM_DATA 0
; IF
VM_PUSH DINT X Slave_AlrmIdx
VM_PUSH_IMM DINT 1
VM_CMP_GE DINT
VM_DUP BOOL
VM_JZ L372
VM_POP_AWAY BOOL
VM_PUSH DINT X Slave_AlrmIdx
VM_PUSH DINT X Slave_N_Alrms
VM_CMP_LT DINT
VM_LABEL L372
VM_JZ L371
; THEN
VM_PUSH DINT X Slave_AlrmIdx
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X Slave_AlrmIdx
VM_JUMP L373
VM_LABEL L371
; IF
VM_PUSH DINT X Slave_AlrmIdx
VM_PUSH DINT X Slave_N_Alrms
VM_CMP_EQ DINT
VM_JZ L374
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X Slave_AlrmIdx
EF_NEXT_MASK
VM_JUMP L375
VM_LABEL L374
; IF
VM_PUSH DINT X Slave_AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L377
VM_POP_AWAY BOOL
VM_PUSH DINT X Slave_N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L377
VM_JZ L376
; THEN
VM_PUSH_IMM DINT 1
VM_POP DINT X Slave_AlrmIdx
EF_NEXT_MASK
VM_LABEL L376
; END_IF
VM_LABEL L375
VM_LABEL L373
VM_RTS

; GotoMainMenu()
VM_FUNCTION _GotoMainMenu_
VM_DATA 0
; IF
VM_PUSH BOOL X EnLogOut
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_JZ L378
; THEN
VM_PUSH_IMM UINT 0
VM_POP UINT X PwdIn
VM_PUSH_IMM INT 0
VM_POP INT EF IncrTmp
VM_PUSH_IMM INT 0
VM_POP INT X PwdRes
EF_GOTO_MASK Pwd_LogIn
VM_JUMP L379
VM_LABEL L378
; ELSE
EF_GOTO_MASK POOL_Menu_Main
; END_IF
VM_LABEL L379
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
VM_PUSH INT EF MAIN_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
VM_PUSH INT X PwdTyp
VM_POP INT X PwdTypMenu
VM_PUSH_IMM INT 5
VM_POP INT EF CntDwnPwdTypMenu
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_RTS

; QuickMenuUP()
VM_FUNCTION _QuickMenuUP_
VM_DATA 0
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF IdxQM
; IF
VM_PUSH INT EF IdxQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_CMP_GT INT
VM_JZ L381
; THEN
VM_PUSH_IMM INT 1
VM_POP INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_POP INT EF IdxQM
VM_JUMP L382
VM_LABEL L381
; ELSE
VM_PUSH INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImgQM
; END_IF
VM_LABEL L382
VM_RTS

; QuickMenuDOWN()
VM_FUNCTION _QuickMenuDOWN_
VM_DATA 0
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT EF IdxQM
; IF
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_CMP_LT INT
VM_JZ L384
; THEN
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_POP INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_POP INT EF IdxQM
VM_JUMP L385
VM_LABEL L384
; ELSE
VM_PUSH INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImgQM
; END_IF
VM_LABEL L385
VM_RTS

; ShowPopUpMessage(USINT, USINT)
VM_FUNCTION _ShowPopUpMessage_USINT_USINT_
VM_DATA 2
VM_POPL USINT 1
VM_POPL USINT 0
VM_PUSH USINT X StatePRG
VM_POP USINT EF popup_StatePRG
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
EF_STORE_MASK
VM_PUSHL USINT 1
VM_POP USINT X DTPopUp
VM_PUSHL USINT 0
VM_POP USINT X PopUp_Message
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Show_DTPopUp
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF En_PopUpTimer
EF_GOTO_MASK PopUp_Message_Mask
VM_RTS

; QuickMenuENT()
VM_FUNCTION _QuickMenuENT_
VM_DATA 0
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
; CASE
VM_PUSH INT EF IdxQM
; OF
VM_CASE INT 1 L388
VM_CASE INT 2 L389
VM_CASE INT 3 L390
VM_CASE INT 4 L391
VM_CASE INT 5 L392
VM_POP_AWAY INT
VM_JUMP L387
VM_LABEL L388
; IF
VM_PUSH BOOL X Role_Master
VM_JZ L393
; THEN
; IF
VM_PUSH BOOL X En_Schedule
VM_JZ L394
; THEN
VM_PUSH_IMM USINT 4
VM_POP USINT X Switcher
VM_JUMP L395
VM_LABEL L394
; ELSE
VM_PUSH_IMM USINT 2
VM_PUSH BOOL X KeybOnOff
VM_NOT BOOL
VM_CAST BOOL USINT
VM_ADD USINT
VM_POP USINT X Switcher
; END_IF
VM_LABEL L395
VM_JUMP L397
VM_LABEL L393
; ELSE
VM_PUSH BOOL X KeybOnOff
VM_NOT BOOL
VM_CAST BOOL USINT
VM_POP USINT X Switcher
; END_IF
VM_LABEL L397
; IF
VM_PUSH BOOL X LangEn
VM_JZ L399
; THEN
VM_PUSH USINT X Switcher
VM_PUSH_IMM USINT 5
VM_ADD USINT
VM_POP USINT X Switcher
VM_LABEL L399
; END_IF
EF_GOTO_MASK OnOff
; IF
VM_PUSH BOOL X LocalMode
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_DUP BOOL
VM_JZ L401
VM_POP_AWAY BOOL
VM_PUSH BOOL X Role_Slave
VM_LABEL L401
VM_JZ L400
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_JUMP L402
VM_LABEL L400
; ELSE
VM_PUSH_IMM USINT 2
VM_POP USINT X StatePRG
; END_IF
VM_LABEL L402
EF_GOTO_CURSOR 0 10
VM_JUMP L387
VM_LABEL L389
EF_GOTO_MASK Set
; IF
VM_PUSH BOOL X LocalMode
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_DUP BOOL
VM_JZ L405
VM_POP_AWAY BOOL
VM_PUSH BOOL X Role_Slave
VM_LABEL L405
VM_JZ L404
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_JUMP L406
VM_LABEL L404
; ELSE
VM_PUSH_IMM USINT 2
VM_POP USINT X StatePRG
; END_IF
VM_LABEL L406
EF_GOTO_CURSOR 0 10
VM_JUMP L387
VM_LABEL L390
; CASE
VM_PUSH USINT X ModelLine
; OF
VM_CASE USINT 1 L409
VM_CASE USINT 2 L410
VM_POP_AWAY USINT
VM_JUMP L408
VM_LABEL L409
EF_GOTO_MASK Fridge_1_1
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_JUMP L408
VM_LABEL L410
; IF
VM_PUSH BOOL X Role_Master
VM_JZ L411
; THEN
; IF
VM_PUSH USINT X Num_Slaves
VM_PUSH_IMM USINT 0
VM_CMP_GT USINT
VM_JZ L412
; THEN
EF_GOTO_MASK NetMap
; IF
VM_PUSH USINT X CurPosition
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L414
VM_POP_AWAY BOOL
VM_PUSH USINT X CurPosition
VM_PUSH USINT X Num_Slaves
VM_CMP_GT USINT
VM_LABEL L414
VM_JZ L413
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X CurPosition
VM_LABEL L413
; END_IF
VM_PUSH_IMM BOOL 1
VM_PUSH_AMP BOOL X CurShow[1]
VM_PUSH USINT X CurPosition
VM_ADDRESS USINT 1 30 16
VM_POPI BOOL
VM_JUMP L415
VM_LABEL L412
; ELSE
VM_PUSH_IMM USINT 6
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L415
VM_JUMP L417
VM_LABEL L411
; ELSE
EF_GOTO_MASK MasterState
; END_IF
VM_LABEL L417
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_LABEL L408
VM_JUMP L387
VM_LABEL L391
EF_GOTO_MASK SwInfo
VM_JUMP L387
VM_LABEL L392
EF_GOTO_MASK Sequences_Mask
VM_LABEL L387
VM_RTS

; CompareOnly()
VM_FUNCTION _CompareOnly_
VM_DATA 0
EF_COMPARE
VM_RTS

; Move_CurLeft()
VM_FUNCTION _Move_CurLeft_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_PUSH_AMP BOOL X CurShow[1]
VM_PUSH USINT X CurPosition
VM_ADDRESS USINT 1 30 16
VM_POPI BOOL
; IF
VM_PUSH USINT X CurPosition
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L419
; THEN
VM_PUSH USINT X Num_Slaves
VM_POP USINT X CurPosition
VM_JUMP L420
VM_LABEL L419
; ELSE
VM_PUSH USINT X CurPosition
VM_PUSH_IMM USINT 1
VM_SUB USINT
VM_POP USINT X CurPosition
; END_IF
VM_LABEL L420
VM_PUSH_IMM BOOL 1
VM_PUSH_AMP BOOL X CurShow[1]
VM_PUSH USINT X CurPosition
VM_ADDRESS USINT 1 30 16
VM_POPI BOOL
VM_RTS

; Move_CurRight()
VM_FUNCTION _Move_CurRight_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_PUSH_AMP BOOL X CurShow[1]
VM_PUSH USINT X CurPosition
VM_ADDRESS USINT 1 30 16
VM_POPI BOOL
; IF
VM_PUSH USINT X CurPosition
VM_PUSH USINT X Num_Slaves
VM_CMP_EQ USINT
VM_JZ L422
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X CurPosition
VM_JUMP L423
VM_LABEL L422
; ELSE
VM_PUSH USINT X CurPosition
VM_PUSH_IMM USINT 1
VM_ADD USINT
VM_POP USINT X CurPosition
; END_IF
VM_LABEL L423
VM_PUSH_IMM BOOL 1
VM_PUSH_AMP BOOL X CurShow[1]
VM_PUSH USINT X CurPosition
VM_ADDRESS USINT 1 30 16
VM_POPI BOOL
VM_RTS

; NetMapEsc()
VM_FUNCTION _NetMapEsc_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_PUSH_AMP BOOL X CurShow[1]
VM_PUSH USINT X CurPosition
VM_ADDRESS USINT 1 30 16
VM_POPI BOOL
VM_JSR _GotoMain_
VM_RTS

; Switcher_UP()
VM_FUNCTION _Switcher_UP_
VM_DATA 0
; CASE
VM_PUSH USINT X Switcher
; OF
VM_CASE USINT 1 L426
VM_CASE USINT 3 L426
VM_CASE USINT 6 L426
VM_CASE USINT 8 L426
VM_CASE USINT 4 L427
VM_CASE USINT 9 L427
VM_POP_AWAY USINT
VM_JUMP L425
VM_LABEL L426
VM_PUSH_IMM BOOL 1
VM_POP BOOL X KeybOnOff
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_Schedule
VM_PUSH USINT X Switcher
VM_PUSH_IMM USINT 1
VM_SUB USINT
VM_POP USINT X Switcher
VM_JUMP L425
VM_LABEL L427
VM_PUSH_IMM BOOL 0
VM_POP BOOL X KeybOnOff
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_Schedule
VM_PUSH USINT X Switcher
VM_PUSH_IMM USINT 1
VM_SUB USINT
VM_POP USINT X Switcher
VM_LABEL L425
VM_RTS

; Switcher_DOWN()
VM_FUNCTION _Switcher_DOWN_
VM_DATA 0
; CASE
VM_PUSH USINT X Switcher
; OF
VM_CASE USINT 0 L429
VM_CASE USINT 2 L429
VM_CASE USINT 5 L429
VM_CASE USINT 7 L429
VM_CASE USINT 3 L430
VM_CASE USINT 8 L430
VM_POP_AWAY USINT
VM_JUMP L428
VM_LABEL L429
VM_PUSH_IMM BOOL 0
VM_POP BOOL X KeybOnOff
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_Schedule
VM_PUSH USINT X Switcher
VM_PUSH_IMM USINT 1
VM_ADD USINT
VM_POP USINT X Switcher
VM_JUMP L428
VM_LABEL L430
; IF
VM_PUSH BOOL X Use_Schedule
VM_JZ L431
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_Schedule
VM_PUSH USINT X Switcher
VM_PUSH_IMM USINT 1
VM_ADD USINT
VM_POP USINT X Switcher
VM_JUMP L432
VM_LABEL L431
; ELSE
VM_PUSH_IMM USINT 13
VM_PUSH USINT EF SHORT_POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L432
VM_LABEL L428
VM_RTS

; ShowPopUpQuestion(USINT)
VM_FUNCTION _ShowPopUpQuestion_USINT_
VM_DATA 1
VM_POPL USINT 0
VM_PUSH USINT X StatePRG
VM_POP USINT EF popup_StatePRG
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
EF_STORE_MASK
VM_PUSH_IMM USINT 0
VM_POP USINT X DTPopUp
VM_PUSHL USINT 0
VM_POP USINT X PopUp_Question
EF_GOTO_MASK PopUp_Question_Mask
VM_RTS

; Set_PRG()
VM_FUNCTION _Set_PRG_
VM_DATA 0
; IF
VM_PUSH BOOL X Role_Slave
VM_DUP BOOL
VM_JZ L435
VM_POP_AWAY BOOL
VM_PUSH BOOL X LocalMode
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_LABEL L435
VM_JZ L434
; THEN
VM_PUSH_IMM USINT 2
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L436
VM_LABEL L434
; ELSE
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_JSR _GotoMainMenu_
; END_IF
VM_LABEL L436
VM_RTS

; Set_UP()
VM_FUNCTION _Set_UP_
VM_DATA 0
; IF
VM_PUSH BOOL X Role_Master
VM_JZ L438
; THEN
VM_JSR _Increment_REAL_1_
VM_JUMP L439
VM_LABEL L438
; ELSE
; IF
VM_PUSH BOOL X LocalMode
VM_JZ L441
; THEN
VM_JSR _Increment_REAL_1_
VM_JUMP L442
VM_LABEL L441
; ELSE
VM_JSR _Set_PRG_
; END_IF
VM_LABEL L442
; END_IF
VM_LABEL L439
VM_PUSH_IMM BOOL 1
VM_POP BOOL X upArrow
VM_RTS

; Set_DOWN()
VM_FUNCTION _Set_DOWN_
VM_DATA 0
; IF
VM_PUSH BOOL X Role_Master
VM_JZ L444
; THEN
VM_JSR _Decrement_REAL_1_
VM_JUMP L445
VM_LABEL L444
; ELSE
; IF
VM_PUSH BOOL X LocalMode
VM_JZ L447
; THEN
VM_JSR _Decrement_REAL_1_
VM_JUMP L448
VM_LABEL L447
; ELSE
VM_JSR _Set_PRG_
; END_IF
VM_LABEL L448
; END_IF
VM_LABEL L445
VM_PUSH_IMM BOOL 1
VM_POP BOOL X downArrow
VM_RTS

; SlaveSet_ENTER()
VM_FUNCTION _SlaveSet_ENTER_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L450
; THEN
EF_COMPARE
; IF
VM_PUSH INT X __SYSVA_CURSOR_ROW
VM_PUSH_IMM INT 3
VM_CMP_EQ INT
VM_JZ L451
; THEN
VM_PUSH BOOL X CurMode
VM_PUSH_AMP BOOL X SlaveMode[1]
VM_PUSH USINT X CurSlave
VM_ADDRESS USINT 1 30 16
VM_POPI BOOL
VM_JUMP L452
VM_LABEL L451
; IF
VM_PUSH INT X __SYSVA_CURSOR_ROW
VM_PUSH_IMM INT 5
VM_CMP_EQ INT
VM_JZ L453
; THEN
VM_PUSH BOOL X CurOnOff
VM_PUSH_AMP BOOL X SlaveOnOff[1]
VM_PUSH USINT X CurSlave
VM_ADDRESS USINT 1 30 16
VM_POPI BOOL
VM_JUMP L454
VM_LABEL L453
; IF
VM_PUSH INT X __SYSVA_CURSOR_ROW
VM_PUSH_IMM INT 6
VM_CMP_EQ INT
VM_JZ L455
; THEN
VM_PUSH REAL X CurSP
VM_PUSH_AMP REAL X SlaveSP[1]
VM_PUSH USINT X CurSlave
VM_ADDRESS USINT 1 30 16
VM_POPI REAL
VM_LABEL L455
; END_IF
VM_LABEL L454
VM_LABEL L452
EF_NEXT_FIELD
VM_LABEL L450
; END_IF
VM_RTS

; SlaveState_ALARM()
VM_FUNCTION _SlaveState_ALARM_
VM_DATA 0
EF_STORE_MASK
; IF
VM_PUSH_AMP USINT X Show_SlaveStates[1]
VM_PUSH USINT X CurSlave
VM_ADDRESS USINT 1 30 16
VM_PUSHI USINT
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_JZ L456
; THEN
VM_PUSH_IMM USINT 3
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_JUMP L457
VM_LABEL L456
; ELSE
; IF
VM_PUSH_AMP INT X WORDs_SlaveAlarms[1]
VM_PUSH USINT X CurSlave
VM_ADDRESS USINT 1 30 16
VM_PUSHI INT
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_JZ L459
; THEN
EF_GOTO_MASK Slave_NoAlrms
VM_JUMP L460
VM_LABEL L459
; ELSE
VM_PUSH_IMM DINT 1
VM_POP DINT X Slave_AlrmIdx
VM_PUSH_IMM BOOL 1
VM_POP BOOL X CurSlaveAlarmShow
EF_GOTO_MASK Slave_Alrms
; END_IF
VM_LABEL L460
; END_IF
VM_LABEL L457
VM_RTS

; SlaveState_PRG()
VM_FUNCTION _SlaveState_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L462
; THEN
EF_STORE_MASK
VM_PUSH_IMM USINT 3
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
VM_JUMP L463
VM_LABEL L462
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L464
; THEN
EF_COMPARE
; IF
VM_PUSH INT X __SYSVA_CURSOR_ROW
VM_PUSH_IMM INT 3
VM_CMP_EQ INT
VM_JZ L465
; THEN
VM_PUSH BOOL X CurMode
VM_PUSH_AMP BOOL X SlaveMode[1]
VM_PUSH USINT X CurSlave
VM_ADDRESS USINT 1 30 16
VM_POPI BOOL
VM_JUMP L466
VM_LABEL L465
; IF
VM_PUSH INT X __SYSVA_CURSOR_ROW
VM_PUSH_IMM INT 5
VM_CMP_EQ INT
VM_JZ L467
; THEN
VM_PUSH BOOL X CurOnOff
VM_PUSH_AMP BOOL X SlaveOnOff[1]
VM_PUSH USINT X CurSlave
VM_ADDRESS USINT 1 30 16
VM_POPI BOOL
VM_JUMP L468
VM_LABEL L467
; IF
VM_PUSH INT X __SYSVA_CURSOR_ROW
VM_PUSH_IMM INT 6
VM_CMP_EQ INT
VM_JZ L469
; THEN
VM_PUSH REAL X CurSP
VM_PUSH_AMP REAL X SlaveSP[1]
VM_PUSH USINT X CurSlave
VM_ADDRESS USINT 1 30 16
VM_POPI REAL
VM_LABEL L469
; END_IF
VM_LABEL L468
VM_LABEL L466
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
VM_LABEL L464
; END_IF
VM_LABEL L463
VM_RTS

; DOWN_button()
VM_FUNCTION _DOWN_button_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L471
VM_POP_AWAY BOOL
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_LABEL L471
VM_JZ L470
; THEN
VM_JSR _Move_DOWN_
VM_LABEL L470
; END_IF
VM_RTS

; UP_button()
VM_FUNCTION _UP_button_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L473
VM_POP_AWAY BOOL
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_LABEL L473
VM_JZ L472
; THEN
VM_JSR _Move_UP_
VM_LABEL L472
; END_IF
VM_RTS

; PwdLogOut()
VM_FUNCTION _PwdLogOut_
VM_DATA 0
VM_PUSH_IMM INT 0
VM_POP INT EF MaskPos
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnLogOut
VM_PUSH_IMM INT 0
VM_POP INT X PwdTyp
VM_PUSH_IMM UINT 0
VM_POP UINT X PwdIn
VM_PUSH_IMM INT 0
VM_POP INT X PwdRes
VM_PUSH INT X PwdTyp
VM_POP INT X PwdTypMenu
VM_PUSH_IMM BOOL 0
VM_POP BOOL X PwdDev
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
EF_GOTO_MASK Main_POOL
VM_RTS

; ScrollMenuDown()
VM_FUNCTION _ScrollMenuDown_
VM_DATA 0
VM_PUSH INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X CurrItemNo
; IF
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 2
VM_CMP_GT INT
VM_JZ L474
; THEN
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_JZ L475
; THEN
VM_PUSH_IMM INT 1
VM_POP INT X BarPos
VM_PUSH INT X IdxImg1
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg1
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImg2
VM_JUMP L476
VM_LABEL L475
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L477
; THEN
VM_PUSH_IMM INT 2
VM_POP INT X BarPos
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg2
VM_PUSH INT X IdxImg3
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImg3
VM_JUMP L478
VM_LABEL L477
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 2
VM_CMP_EQ INT
VM_JZ L479
; THEN
; IF
VM_PUSH INT X IdxMenuMsk
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 3
VM_SUB INT
VM_CMP_LT INT
VM_JZ L480
; THEN
VM_PUSH INT X IdxMenuMsk
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxMenuMsk
VM_PUSH INT X IdxImg1
VM_PUSH_IMM INT 2
VM_ADD INT
VM_POP INT X IdxImg1
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 2
VM_ADD INT
VM_POP INT X IdxImg2
VM_PUSH INT X IdxImg3
VM_PUSH_IMM INT 2
VM_ADD INT
VM_POP INT X IdxImg3
VM_JUMP L481
VM_LABEL L480
; ELSE
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
; END_IF
VM_LABEL L481
VM_LABEL L479
; END_IF
VM_LABEL L478
VM_LABEL L476
VM_JUMP L483
VM_LABEL L474
; ELSE
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_JZ L485
; THEN
VM_PUSH_IMM INT 1
VM_POP INT X BarPos
VM_PUSH INT X IdxImg1
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg1
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImg2
VM_JUMP L486
VM_LABEL L485
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L487
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_LABEL L487
; END_IF
VM_LABEL L486
; END_IF
VM_LABEL L483
VM_RTS

; ScrollMenuUp()
VM_FUNCTION _ScrollMenuUp_
VM_DATA 0
VM_PUSH INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X CurrItemNo
; IF
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 2
VM_CMP_GT INT
VM_JZ L488
; THEN
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_JZ L489
; THEN
; IF
VM_PUSH INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_CMP_GT INT
VM_JZ L490
; THEN
VM_PUSH INT X IdxMenuMsk
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxMenuMsk
VM_PUSH INT X IdxImg1
VM_PUSH_IMM INT 2
VM_SUB INT
VM_POP INT X IdxImg1
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 2
VM_SUB INT
VM_POP INT X IdxImg2
VM_PUSH INT X IdxImg3
VM_PUSH_IMM INT 2
VM_SUB INT
VM_POP INT X IdxImg3
VM_JUMP L491
VM_LABEL L490
; ELSE
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 3
VM_SUB INT
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 2
VM_POP INT X BarPos
VM_PUSH INT X MenuItemsNo
VM_POP INT X CurrItemNo
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 2
VM_MUL INT
VM_PUSH_IMM INT 6
VM_SUB INT
VM_POP INT X IdxImg1
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 2
VM_MUL INT
VM_PUSH_IMM INT 4
VM_SUB INT
VM_POP INT X IdxImg2
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 2
VM_MUL INT
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg3
; END_IF
VM_LABEL L491
VM_JUMP L493
VM_LABEL L489
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L494
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH INT X IdxImg1
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImg1
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg2
VM_JUMP L495
VM_LABEL L494
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 2
VM_CMP_EQ INT
VM_JZ L496
; THEN
VM_PUSH_IMM INT 1
VM_POP INT X BarPos
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImg2
VM_PUSH INT X IdxImg3
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg3
VM_LABEL L496
; END_IF
VM_LABEL L495
VM_LABEL L493
VM_JUMP L497
VM_LABEL L488
; ELSE
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_JZ L499
; THEN
VM_PUSH_IMM INT 1
VM_POP INT X BarPos
VM_PUSH INT X MenuItemsNo
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 0
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 3
VM_POP INT X IdxImg2
VM_JUMP L500
VM_LABEL L499
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L501
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH INT X IdxImg1
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImg1
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg2
VM_LABEL L501
; END_IF
VM_LABEL L500
; END_IF
VM_LABEL L497
VM_RTS

; SelMainMenu()
VM_FUNCTION _SelMainMenu_
VM_DATA 0
VM_PUSH INT X IdxMenuMsk
VM_POP INT EF IdxMenuMskTmp
VM_PUSH INT X BarPos
VM_POP INT EF BarPosTmp
VM_PUSH INT X CurrItemNo
VM_POP INT EF CurrItemNoTmp
VM_PUSH INT X IdxImg1
VM_POP INT EF IdxImg1Tmp
VM_PUSH INT X IdxImg2
VM_POP INT EF IdxImg2Tmp
VM_PUSH INT X IdxImg3
VM_POP INT EF IdxImg3Tmp
; CASE
VM_PUSH USINT X ModelLine
; OF
VM_CASE USINT 1 L503
VM_CASE USINT 2 L504
VM_POP_AWAY USINT
VM_JUMP L502
VM_LABEL L503
; CASE
VM_PUSH INT X CurrItemNo
; OF
VM_CASE INT 1 L506
VM_CASE INT 2 L507
VM_CASE INT 3 L508
VM_CASE INT 4 L509
VM_CASE INT 5 L510
VM_CASE INT 6 L511
VM_POP_AWAY INT
VM_JUMP L505
VM_LABEL L506
VM_PUSH_IMM INT 3
VM_POP INT EF MaskPos
VM_PUSH INT EF VENT_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
EF_GOTO_MASK Ventilation_menu
VM_JUMP L505
VM_LABEL L507
VM_PUSH_IMM INT 3
VM_POP INT EF MaskPos
VM_PUSH INT EF FRIDGE_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
EF_GOTO_MASK Refridgerator_menu
VM_JUMP L505
VM_LABEL L508
VM_JSR _gotoAlarmLog_
VM_PUSH_IMM INT 2
VM_POP INT EF MaskPos
VM_JUMP L505
VM_LABEL L509
VM_PUSH_IMM INT 3
VM_POP INT EF MaskPos
VM_PUSH INT EF SETTINGS_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
EF_GOTO_MASK Settings
VM_JUMP L505
VM_LABEL L510
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_GE INT
VM_JZ L512
; THEN
VM_PUSH_IMM INT 3
VM_POP INT EF MaskPos
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
; IF
VM_PUSH BOOL X EnPwdChgM
VM_JZ L513
; THEN
VM_PUSH INT EF HIDE_SERVICE_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
EF_GOTO_MASK Hide_Service_menu
VM_JUMP L514
VM_LABEL L513
; ELSE
VM_PUSH INT EF SERVICE_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
EF_GOTO_MASK Service_menu
; END_IF
VM_LABEL L514
VM_PUSH_IMM INT 3
VM_POP INT EF MaskPos
VM_JUMP L516
VM_LABEL L512
; ELSE
VM_PUSH_IMM USINT 4
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L516
VM_JUMP L505
VM_LABEL L511
EF_GOTO_MASK Pwd_LogOut
VM_PUSH_IMM INT 2
VM_POP INT EF MaskPos
VM_LABEL L505
VM_JUMP L502
VM_LABEL L504
; CASE
VM_PUSH INT X CurrItemNo
; OF
VM_CASE INT 1 L519
VM_CASE INT 2 L520
VM_CASE INT 3 L521
VM_CASE INT 4 L522
VM_CASE INT 5 L523
VM_POP_AWAY INT
VM_JUMP L518
VM_LABEL L519
VM_PUSH_IMM INT 3
VM_POP INT EF MaskPos
VM_PUSH INT EF VENT_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
EF_GOTO_MASK Ventilation_menu
VM_JUMP L518
VM_LABEL L520
VM_JSR _gotoAlarmLog_
VM_PUSH_IMM INT 2
VM_POP INT EF MaskPos
VM_JUMP L518
VM_LABEL L521
VM_PUSH_IMM INT 3
VM_POP INT EF MaskPos
VM_PUSH INT EF SETTINGS_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
EF_GOTO_MASK Settings
VM_JUMP L518
VM_LABEL L522
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_GE INT
VM_JZ L524
; THEN
VM_PUSH_IMM INT 3
VM_POP INT EF MaskPos
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
; IF
VM_PUSH BOOL X EnPwdChgM
VM_JZ L525
; THEN
VM_PUSH INT EF HIDE_SERVICE_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
EF_GOTO_MASK Hide_Service_menu
VM_JUMP L526
VM_LABEL L525
; ELSE
VM_PUSH INT EF SERVICE_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
EF_GOTO_MASK Service_menu
; END_IF
VM_LABEL L526
VM_JUMP L528
VM_LABEL L524
; ELSE
VM_PUSH_IMM USINT 4
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L528
VM_JUMP L518
VM_LABEL L523
EF_GOTO_MASK Pwd_LogOut
VM_PUSH_IMM INT 2
VM_POP INT EF MaskPos
VM_LABEL L518
VM_LABEL L502
VM_RTS

; SelVentilationMenu()
VM_FUNCTION _SelVentilationMenu_
VM_DATA 0
VM_PUSH INT X IdxMenuMsk
VM_POP INT EF IdxMskTmp1
VM_PUSH INT X BarPos
VM_POP INT EF BarPosTmp1
VM_PUSH INT X CurrItemNo
VM_POP INT EF CurrItemNoTmp1
VM_PUSH INT X IdxImg1
VM_POP INT EF IdxImg1Tmp1
VM_PUSH INT X IdxImg2
VM_POP INT EF IdxImg2Tmp1
VM_PUSH INT X IdxImg3
VM_POP INT EF IdxImg3Tmp1
; CASE
VM_PUSH INT X CurrItemNo
; OF
VM_CASE INT 1 L531
VM_CASE INT 2 L532
VM_CASE INT 3 L533
VM_CASE INT 4 L534
VM_CASE INT 5 L535
VM_CASE INT 6 L536
VM_POP_AWAY INT
VM_JUMP L530
VM_LABEL L531
VM_PUSH_IMM INT 5
VM_POP INT EF MaskPos
; CASE
VM_PUSH USINT X ModelLine
; OF
VM_CASE USINT 1 L538
VM_CASE USINT 2 L539
VM_POP_AWAY USINT
VM_JUMP L537
VM_LABEL L538
VM_PUSH INT EF MCLIMATE_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
EF_GOTO_MASK MClimate_menu
VM_JUMP L537
VM_LABEL L539
EF_GOTO_MASK TOP_Microclimate_1
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_LABEL L537
VM_JUMP L530
VM_LABEL L532
; IF
VM_PUSH BOOL X UnitOn
VM_DUP BOOL
VM_JZ L541
VM_POP_AWAY BOOL
VM_PUSH BOOL X En_DP_E
VM_LABEL L541
VM_JZ L540
; THEN
VM_PUSH_IMM USINT 1
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_JUMP L542
VM_LABEL L540
; ELSE
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_GE INT
VM_JZ L544
; THEN
VM_PUSH_IMM INT 5
VM_POP INT EF MaskPos
EF_GOTO_MASK POOL_Heater_1
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_JUMP L545
VM_LABEL L544
; ELSE
VM_PUSH_IMM USINT 4
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L545
; END_IF
VM_LABEL L542
VM_JUMP L530
VM_LABEL L533
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_GE INT
VM_JZ L547
; THEN
VM_PUSH_IMM INT 5
VM_POP INT EF MaskPos
EF_GOTO_MASK POOL_Recycling_1
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_JUMP L548
VM_LABEL L547
; ELSE
VM_PUSH_IMM USINT 4
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L548
VM_JUMP L530
VM_LABEL L534
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_GE INT
VM_JZ L550
; THEN
VM_PUSH_IMM INT 5
VM_POP INT EF MaskPos
EF_GOTO_MASK Cooler_1
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_JUMP L551
VM_LABEL L550
; ELSE
VM_PUSH_IMM USINT 4
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L551
VM_JUMP L530
VM_LABEL L535
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_GE INT
VM_JZ L553
; THEN
VM_PUSH_IMM INT 5
VM_POP INT EF MaskPos
EF_GOTO_MASK Recuperator_1
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_JUMP L554
VM_LABEL L553
; ELSE
VM_PUSH_IMM USINT 4
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L554
VM_JUMP L530
VM_LABEL L536
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_GE INT
VM_JZ L556
; THEN
VM_PUSH_IMM INT 5
VM_POP INT EF MaskPos
EF_GOTO_MASK VortexDiffuser_1
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_JUMP L557
VM_LABEL L556
; ELSE
VM_PUSH_IMM USINT 4
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L557
VM_LABEL L530
VM_RTS

; SelMClimateMenu()
VM_FUNCTION _SelMClimateMenu_
VM_DATA 0
; CASE
VM_PUSH INT X CurrItemNo
; OF
VM_CASE INT 1 L560
VM_CASE INT 2 L561
VM_POP_AWAY INT
VM_JUMP L559
VM_LABEL L560
EF_GOTO_MASK Microclimate_1_Clone_2
EF_GOTO_CURSOR 0 10
VM_JUMP L559
VM_LABEL L561
EF_GOTO_MASK MHumidity
EF_GOTO_CURSOR 0 10
VM_LABEL L559
VM_PUSH_IMM INT 9
VM_POP INT EF MaskPos
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_RTS

; SelFridgeMenu()
VM_FUNCTION _SelFridgeMenu_
VM_DATA 0
; CASE
VM_PUSH INT X CurrItemNo
; OF
VM_CASE INT 1 L563
VM_CASE INT 2 L564
VM_POP_AWAY INT
VM_JUMP L562
VM_LABEL L563
EF_GOTO_MASK Stats_1_1
VM_PUSH_IMM INT 8
VM_POP INT EF MaskPos
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Show_CompStats
VM_JUMP L562
VM_LABEL L564
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_GE INT
VM_JZ L565
; THEN
EF_GOTO_MASK Fridge_Params_1
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_JUMP L566
VM_LABEL L565
; ELSE
VM_PUSH_IMM USINT 4
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L566
VM_LABEL L562
VM_RTS

; SelSettingsMenu()
VM_FUNCTION _SelSettingsMenu_
VM_DATA 0
VM_PUSH INT X IdxMenuMsk
VM_POP INT EF IdxMskTmp1
VM_PUSH INT X BarPos
VM_POP INT EF BarPosTmp1
VM_PUSH INT X CurrItemNo
VM_POP INT EF CurrItemNoTmp1
VM_PUSH INT X IdxImg1
VM_POP INT EF IdxImg1Tmp1
VM_PUSH INT X IdxImg2
VM_POP INT EF IdxImg2Tmp1
VM_PUSH INT X IdxImg3
VM_POP INT EF IdxImg3Tmp1
; CASE
VM_PUSH INT X CurrItemNo
; OF
VM_CASE INT 1 L569
VM_CASE INT 2 L570
VM_CASE INT 3 L571
VM_CASE INT 4 L572
VM_POP_AWAY INT
VM_JUMP L568
VM_LABEL L569
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_GE INT
VM_JZ L573
; THEN
VM_PUSH_IMM INT 4
VM_POP INT EF MaskPos
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
EF_GOTO_MASK DateTimeChg
VM_JUMP L574
VM_LABEL L573
; ELSE
VM_PUSH_IMM USINT 4
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L574
VM_JUMP L568
VM_LABEL L570
VM_PUSH_IMM INT 4
VM_POP INT EF MaskPos
EF_GOTO_MASK Language
VM_PUSH_IMM USINT 2
VM_POP USINT X StatePRG
VM_JUMP L568
VM_LABEL L571
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_GE INT
VM_JZ L576
; THEN
VM_PUSH_IMM INT 4
VM_POP INT EF MaskPos
EF_GOTO_MASK PwdChg
VM_PUSH_IMM INT 0
VM_POP INT EF IncrTmp
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_JUMP L577
VM_LABEL L576
; ELSE
VM_PUSH_IMM USINT 4
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L577
VM_JUMP L568
VM_LABEL L572
VM_PUSH_IMM INT 4
VM_POP INT EF MaskPos
VM_PUSH INT EF GROUP_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
; IF
VM_PUSH BOOL X Role_Master
VM_JZ L579
; THEN
EF_GOTO_MASK GroupManage
VM_JUMP L580
VM_LABEL L579
; ELSE
EF_GOTO_MASK GroupManage_Slave
; END_IF
VM_LABEL L580
VM_LABEL L568
VM_RTS

; Show_ports()
VM_FUNCTION _Show_ports_
VM_DATA 0
; IF
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_JZ L604
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_MB_Ethernet
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_MB_BMS_Card
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_MB_BMS2
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_MB_BMS
VM_JUMP L605
VM_LABEL L604
; IF
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L606
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_MB_Ethernet
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_MB_BMS_Card
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_MB_BMS2
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_MB_BMS
VM_JUMP L607
VM_LABEL L606
; IF
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_JZ L608
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_MB_Ethernet
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF En_MB_BMS_Card
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_MB_BMS2
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_MB_BMS
VM_PUSH UDINT X BMS_Card_Baudrate
VM_POP UDINT X Temp_MB_Baudrate
VM_PUSH USINT X BMS_Card_StopBits
VM_POP USINT X Temp_MB_Stopbits
VM_PUSH USINT X BMS_Card_Parity
VM_POP USINT X Temp_MB_Parity
VM_JUMP L609
VM_LABEL L608
; IF
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L610
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_MB_Ethernet
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_MB_BMS_Card
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF En_MB_BMS2
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_MB_BMS
VM_PUSH UDINT X BMS2_Baudrate
VM_POP UDINT X Temp_MB_Baudrate
VM_PUSH USINT X BMS2_StopBits
VM_POP USINT X Temp_MB_Stopbits
VM_PUSH USINT X BMS2_Parity
VM_POP USINT X Temp_MB_Parity
VM_LABEL L610
; END_IF
VM_LABEL L609
VM_LABEL L607
VM_LABEL L605
VM_RTS

; SelServiceMenu()
VM_FUNCTION _SelServiceMenu_
VM_DATA 0
VM_PUSH INT X IdxMenuMsk
VM_POP INT EF IdxMskTmp1
VM_PUSH INT X BarPos
VM_POP INT EF BarPosTmp1
VM_PUSH INT X CurrItemNo
VM_POP INT EF CurrItemNoTmp1
VM_PUSH INT X IdxImg1
VM_POP INT EF IdxImg1Tmp1
VM_PUSH INT X IdxImg2
VM_POP INT EF IdxImg2Tmp1
VM_PUSH INT X IdxImg3
VM_POP INT EF IdxImg3Tmp1
; CASE
VM_PUSH INT X CurrItemNo
; OF
VM_CASE INT 1 L583
VM_CASE INT 2 L584
VM_CASE INT 3 L585
VM_CASE INT 4 L586
VM_CASE INT 5 L587
VM_CASE INT 6 L588
VM_CASE INT 7 L589
VM_CASE INT 8 L590
VM_CASE INT 9 L591
VM_POP_AWAY INT
VM_JUMP L582
VM_LABEL L583
VM_PUSH_IMM INT 7
VM_POP INT EF MaskPos
VM_PUSH INT EF IOMANAGE_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
EF_GOTO_MASK IOManage_menu
VM_JUMP L582
VM_LABEL L584
VM_PUSH_IMM INT 7
VM_POP INT EF MaskPos
EF_GOTO_MASK POOL_Sens_Correct_W_1
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_JUMP L582
VM_LABEL L585
; IF
VM_PUSH BOOL X UnitOff
VM_JZ L592
; THEN
; IF
VM_PUSH BOOL X En_TOP
VM_JZ L593
; THEN
VM_PUSH_IMM INT 7
VM_POP INT EF MaskPos
VM_PUSH INT EF CONFIGURATOR_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
EF_GOTO_MASK Configurator_menu
VM_JUMP L594
VM_LABEL L593
; ELSE
; IF
VM_PUSH BOOL X En_DP_CTRL
VM_JZ L596
; THEN
VM_PUSH_IMM INT 7
VM_POP INT EF MaskPos
EF_GOTO_MASK POOL_Config_1
VM_PUSH USINT X HeatType
VM_POP USINT X temp_HeatType
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_JUMP L597
VM_LABEL L596
; ELSE
VM_PUSH_IMM USINT 9
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L597
; END_IF
VM_LABEL L594
VM_JUMP L599
VM_LABEL L592
; ELSE
VM_PUSH_IMM USINT 1
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L599
VM_JUMP L582
VM_LABEL L586
VM_PUSH_IMM INT 7
VM_POP INT EF MaskPos
EF_GOTO_MASK POOL_Sys_param_1
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_JUMP L582
VM_LABEL L587
; IF
VM_PUSH BOOL X En_DP_CTRL
VM_DUP BOOL
VM_JNZ L602
VM_POP_AWAY BOOL
VM_PUSH BOOL X En_TOP
VM_DUP BOOL
VM_JZ L603
VM_POP_AWAY BOOL
VM_PUSH BOOL X Role_Master
VM_LABEL L603
VM_LABEL L602
VM_JZ L601
; THEN
VM_PUSH_IMM INT 7
VM_POP INT EF MaskPos
VM_PUSH USINT X MB_port
VM_POP USINT X Temp_MB_port
VM_PUSH USINT X MB_Address
VM_POP USINT X Temp_MB_Address
VM_JSR _Show_ports_
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
EF_GOTO_MASK MB_Settings_1
VM_JUMP L611
VM_LABEL L601
; ELSE
; IF
VM_PUSH BOOL X En_TOP
VM_JZ L613
; THEN
VM_PUSH_IMM USINT 10
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_JUMP L614
VM_LABEL L613
; ELSE
VM_PUSH_IMM USINT 9
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L614
; END_IF
VM_LABEL L611
VM_JUMP L582
VM_LABEL L588
; IF
VM_PUSH BOOL X UnitOff
VM_JZ L616
; THEN
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_GE INT
VM_JZ L617
; THEN
VM_PUSH_IMM INT 7
VM_POP INT EF MaskPos
VM_PUSH_IMM USINT 2
VM_POP USINT X StatePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Upgrade.Mode_Upgrade
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Upgrade.Check_Upgrade
VM_PUSH_IMM USINT 4
VM_POP USINT EF NextCycleAction
VM_JUMP L618
VM_LABEL L617
; ELSE
VM_PUSH_IMM USINT 4
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L618
VM_JUMP L620
VM_LABEL L616
; ELSE
VM_PUSH_IMM USINT 1
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L620
VM_JUMP L582
VM_LABEL L589
; CASE
VM_PUSH USINT X ModelLine
; OF
VM_CASE USINT 1 L623
VM_CASE USINT 2 L624
VM_POP_AWAY USINT
VM_JUMP L622
VM_LABEL L623
; IF
VM_PUSH BOOL X En_DP_CTRL
VM_JZ L625
; THEN
VM_PUSH_IMM INT 7
VM_POP INT EF MaskPos
EF_GOTO_MASK Schedule_1
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.Show_Shedule
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_JUMP L626
VM_LABEL L625
; ELSE
VM_PUSH_IMM USINT 9
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L626
VM_JUMP L622
VM_LABEL L624
; IF
VM_PUSH BOOL X Role_Master
VM_JZ L628
; THEN
VM_PUSH_IMM INT 7
VM_POP INT EF MaskPos
EF_GOTO_MASK Schedule_1
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.Show_Shedule
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_JUMP L629
VM_LABEL L628
; ELSE
VM_PUSH_IMM USINT 10
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L629
VM_LABEL L622
VM_JUMP L582
VM_LABEL L590
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 3
VM_CMP_GE INT
VM_JZ L631
; THEN
VM_PUSH_IMM INT 7
VM_POP INT EF MaskPos
EF_GOTO_MASK AlrmInit
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_JUMP L632
VM_LABEL L631
; ELSE
VM_PUSH_IMM USINT 5
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L632
VM_JUMP L582
VM_LABEL L591
VM_PUSH_IMM INT 7
VM_POP INT EF MaskPos
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
EF_GOTO_MASK ParamsImpExp
VM_LABEL L582
VM_RTS

; SelIOManageMenu()
VM_FUNCTION _SelIOManageMenu_
VM_DATA 0
; CASE
VM_PUSH INT X CurrItemNo
; OF
VM_CASE INT 1 L635
VM_CASE INT 2 L636
VM_POP_AWAY INT
VM_JUMP L634
VM_LABEL L635
EF_GOTO_MASK DI_POOL_CTRL_ir_1
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_JUMP L634
VM_LABEL L636
EF_GOTO_MASK DO_POOL_CTRL_ir
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Output_Ctrl.Show_IO
VM_LABEL L634
VM_PUSH_IMM INT 10
VM_POP INT EF MaskPos
VM_RTS

; SelConfiguratorMenu()
VM_FUNCTION _SelConfiguratorMenu_
VM_DATA 0
; CASE
VM_PUSH INT X CurrItemNo
; OF
VM_CASE INT 1 L638
VM_CASE INT 2 L639
VM_CASE INT 3 L640
VM_CASE INT 4 L641
VM_POP_AWAY INT
VM_JUMP L637
VM_LABEL L638
VM_PUSH_IMM USINT 11
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L637
VM_LABEL L639
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
EF_GOTO_MASK Equipment_1
VM_PUSH USINT X CurDLE
VM_POP USINT X temp_CurDLE
VM_JUMP L637
VM_LABEL L640
VM_PUSH USINT X Role
VM_POP USINT X temp_Role
EF_GOTO_MASK DeviceRole
EF_GOTO_CURSOR 0 10
VM_PUSH_IMM USINT 2
VM_POP USINT X StatePRG
VM_JUMP L637
VM_LABEL L641
VM_PUSH_IMM USINT 2
VM_POP USINT X StatePRG
EF_GOTO_MASK Config_Reset
EF_GOTO_CURSOR 0 10
VM_LABEL L637
VM_PUSH_IMM INT 11
VM_POP INT EF MaskPos
VM_RTS

; PwdLogIn()
VM_FUNCTION _PwdLogIn_
VM_DATA 0
EF_COMPARE
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF IncrTmp
EF_DIGIT_RIGHT
; IF
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng_ST.PwdUser
VM_CMP_NE UINT
VM_DUP BOOL
VM_JZ L643
VM_POP_AWAY BOOL
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng_ST.PwdService
VM_CMP_NE UINT
VM_LABEL L643
VM_DUP BOOL
VM_JZ L644
VM_POP_AWAY BOOL
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng_ST.RESERVED1
VM_CMP_NE UINT
VM_LABEL L644
VM_DUP BOOL
VM_JZ L645
VM_POP_AWAY BOOL
VM_PUSH UINT X PwdIn
VM_PUSH_IMM UINT 9274
VM_CMP_NE UINT
VM_LABEL L645
VM_DUP BOOL
VM_JZ L646
VM_POP_AWAY BOOL
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_LABEL L646
VM_JZ L642
; THEN
VM_PUSH_IMM UDINT 0
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_PUSH_IMM INT 1
VM_POP INT X PwdRes
VM_PUSH_IMM INT 0
VM_POP INT EF IncrTmp
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnLogOut
VM_JUMP L647
VM_LABEL L642
; IF
VM_PUSH UINT X PwdIn
VM_PUSH_IMM UINT 9274
VM_CMP_EQ UINT
VM_DUP BOOL
VM_JZ L649
VM_POP_AWAY BOOL
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_LABEL L649
VM_JZ L648
; THEN
VM_PUSH_IMM INT 4
VM_POP INT X PwdTyp
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnLogOut
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgU
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgS
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgM
VM_PUSH_IMM BOOL 1
VM_POP BOOL X PwdDev
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
EF_GOTO_MASK POOL_Menu_Main
VM_JUMP L650
VM_LABEL L648
; IF
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng_ST.RESERVED1
VM_CMP_EQ UINT
VM_DUP BOOL
VM_JZ L652
VM_POP_AWAY BOOL
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_LABEL L652
VM_JZ L651
; THEN
VM_PUSH_IMM INT 3
VM_POP INT X PwdTyp
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnLogOut
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgU
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgS
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgM
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
EF_GOTO_MASK POOL_Menu_Main
VM_JUMP L653
VM_LABEL L651
; IF
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng_ST.PwdService
VM_CMP_EQ UINT
VM_DUP BOOL
VM_JZ L655
VM_POP_AWAY BOOL
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_LABEL L655
VM_JZ L654
; THEN
VM_PUSH_IMM INT 2
VM_POP INT X PwdTyp
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnLogOut
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgU
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgS
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnPwdChgM
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
EF_GOTO_MASK POOL_Menu_Main
VM_JUMP L656
VM_LABEL L654
; IF
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng_ST.PwdUser
VM_CMP_EQ UINT
VM_DUP BOOL
VM_JZ L658
VM_POP_AWAY BOOL
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_LABEL L658
VM_JZ L657
; THEN
VM_PUSH_IMM INT 1
VM_POP INT X PwdTyp
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnLogOut
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgU
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnPwdChgS
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnPwdChgM
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
EF_GOTO_MASK POOL_Menu_Main
VM_LABEL L657
; END_IF
VM_LABEL L656
VM_LABEL L653
VM_LABEL L650
VM_LABEL L647
VM_PUSH INT X PwdTyp
VM_POP INT X PwdTypMenu
VM_PUSH_IMM INT 5
VM_POP INT EF CntDwnPwdTypMenu
VM_RTS

; DecrDig()
VM_FUNCTION _DecrDig_
VM_DATA 0
EF_DECR_DIGIT
VM_RTS

; IncrDig()
VM_FUNCTION _IncrDig_
VM_DATA 0
EF_INCR_DIGIT
VM_RTS

; PRG_button()
VM_FUNCTION _PRG_button_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L659
; THEN
; IF
VM_PUSH BOOL X En_DP_TOP
VM_DUP BOOL
VM_JZ L661
VM_POP_AWAY BOOL
VM_PUSH BOOL X FLR_Disc_CTRL.Active
VM_LABEL L661
VM_JZ L660
; THEN
VM_PUSH_IMM USINT 8
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_JUMP L662
VM_LABEL L660
; ELSE
EF_STORE_MASK
VM_PUSH_IMM USINT 3
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
; END_IF
VM_LABEL L662
VM_JUMP L664
VM_LABEL L659
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L665
; THEN
EF_COMPARE
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
VM_LABEL L665
; END_IF
VM_LABEL L664
VM_RTS

; SelGroupMenu()
VM_FUNCTION _SelGroupMenu_
VM_DATA 0
; CASE
VM_PUSH INT X CurrItemNo
; OF
VM_CASE INT 1 L667
VM_CASE INT 2 L668
VM_CASE INT 3 L669
VM_POP_AWAY INT
VM_JUMP L666
VM_LABEL L667
VM_PUSH_IMM INT 6
VM_POP INT EF MaskPos
VM_PUSH USINT X Role
VM_POP USINT X temp_Role
EF_GOTO_MASK DeviceRole
EF_GOTO_CURSOR 0 10
VM_PUSH_IMM USINT 2
VM_POP USINT X StatePRG
VM_JUMP L666
VM_LABEL L668
; IF
VM_PUSH BOOL X Role_Master
VM_JZ L670
; THEN
; IF
VM_PUSH USINT X Num_Slaves
VM_PUSH_IMM USINT 0
VM_CMP_GT USINT
VM_JZ L671
; THEN
VM_PUSH_IMM INT 6
VM_POP INT EF MaskPos
VM_PUSH_IMM USINT 1
VM_POP USINT X CurSlave
VM_PUSH_IMM BOOL 1
VM_POP BOOL X CurSlaveShow
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
EF_GOTO_MASK SlaveSet
VM_JUMP L672
VM_LABEL L671
; ELSE
VM_PUSH_IMM USINT 6
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L672
VM_JUMP L674
VM_LABEL L670
; ELSE
VM_PUSH_IMM INT 6
VM_POP INT EF MaskPos
EF_STORE_MASK
VM_PUSH_IMM USINT 3
VM_POP USINT X StatePRG
EF_GOTO_MASK LocalSet
EF_GOTO_CURSOR 0 10
; END_IF
VM_LABEL L674
VM_JUMP L666
VM_LABEL L669
; IF
VM_PUSH BOOL X Role_Master
VM_JZ L676
; THEN
VM_PUSH_IMM INT 6
VM_POP INT EF MaskPos
EF_GOTO_MASK GroupStructure
EF_GOTO_CURSOR 0 10
VM_PUSH_IMM USINT 2
VM_POP USINT X StatePRG
VM_JUMP L677
VM_LABEL L676
; ELSE
VM_PUSH_IMM USINT 2
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L677
VM_LABEL L666
VM_RTS

; Num_Slaves_Class_ENTER()
VM_FUNCTION _Num_Slaves_Class_ENTER_
VM_DATA 0
EF_COMPARE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X RecountEnSlaves
VM_RTS

; DummyService()
VM_FUNCTION _DummyService_
VM_DATA 0
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_GE INT
VM_JZ L679
; THEN
EF_NEXT_FIELD
VM_JUMP L680
VM_LABEL L679
; ELSE
VM_PUSH_IMM USINT 4
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L680
VM_RTS

; SetTimeZoneRu()
VM_FUNCTION _SetTimeZoneRu_
VM_DATA 0
EF_COMPARE
; IF
VM_PUSH INT X SetTimeZoneTmp
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L682
; THEN
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 0
VM_CMP_EQ UINT
VM_JZ L683
; THEN
VM_PUSH_IMM UINT 34
VM_POP UINT X TimeZoneTmp
VM_JUMP L684
VM_LABEL L683
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 1
VM_CMP_EQ UINT
VM_JZ L685
; THEN
VM_PUSH_IMM UINT 49
VM_POP UINT X TimeZoneTmp
VM_JUMP L686
VM_LABEL L685
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 2
VM_CMP_EQ UINT
VM_JZ L687
; THEN
VM_PUSH_IMM UINT 55
VM_POP UINT X TimeZoneTmp
VM_JUMP L688
VM_LABEL L687
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 3
VM_CMP_EQ UINT
VM_JZ L689
; THEN
VM_PUSH_IMM UINT 57
VM_POP UINT X TimeZoneTmp
VM_JUMP L690
VM_LABEL L689
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 4
VM_CMP_EQ UINT
VM_JZ L691
; THEN
VM_PUSH_IMM UINT 66
VM_POP UINT X TimeZoneTmp
VM_JUMP L692
VM_LABEL L691
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 5
VM_CMP_EQ UINT
VM_JZ L693
; THEN
VM_PUSH_IMM UINT 64
VM_POP UINT X TimeZoneTmp
VM_JUMP L694
VM_LABEL L693
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 6
VM_CMP_EQ UINT
VM_JZ L695
; THEN
VM_PUSH_IMM UINT 71
VM_POP UINT X TimeZoneTmp
VM_JUMP L696
VM_LABEL L695
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 7
VM_CMP_EQ UINT
VM_JZ L697
; THEN
VM_PUSH_IMM UINT 76
VM_POP UINT X TimeZoneTmp
VM_JUMP L698
VM_LABEL L697
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 8
VM_CMP_EQ UINT
VM_JZ L699
; THEN
VM_PUSH_IMM UINT 84
VM_POP UINT X TimeZoneTmp
VM_JUMP L700
VM_LABEL L699
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 9
VM_CMP_EQ UINT
VM_JZ L701
; THEN
VM_PUSH_IMM UINT 86
VM_POP UINT X TimeZoneTmp
VM_JUMP L702
VM_LABEL L701
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 10
VM_CMP_EQ UINT
VM_JZ L703
; THEN
VM_PUSH_IMM UINT 90
VM_POP UINT X TimeZoneTmp
VM_JUMP L704
VM_LABEL L703
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 11
VM_CMP_EQ UINT
VM_JZ L705
; THEN
VM_PUSH_IMM UINT 91
VM_POP UINT X TimeZoneTmp
VM_LABEL L705
; END_IF
VM_LABEL L704
VM_LABEL L702
VM_LABEL L700
VM_LABEL L698
VM_LABEL L696
VM_LABEL L694
VM_LABEL L692
VM_LABEL L690
VM_LABEL L688
VM_LABEL L686
VM_LABEL L684
VM_PUSH UINT X TimeZoneTmp
VM_POP UINT X GeneralMng_ST.Zone_Write
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng_ST.SetTimezone
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng_ST.ReadTimezone
VM_PUSH_IMM INT 0
VM_POP INT X SetTimeZoneTmp
VM_LABEL L682
; END_IF
EF_NEXT_FIELD
VM_RTS

; SetTimeZone()
VM_FUNCTION _SetTimeZone_
VM_DATA 0
EF_COMPARE
; IF
VM_PUSH INT X SetTimeZoneTmp
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L706
; THEN
VM_PUSH UINT X TimeZoneTmp
VM_POP UINT X GeneralMng_ST.Zone_Write
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng_ST.SetTimezone
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng_ST.ReadTimezone
VM_PUSH_IMM INT 0
VM_POP INT X SetTimeZoneTmp
VM_LABEL L706
; END_IF
EF_NEXT_FIELD
VM_RTS

; TZUp()
VM_FUNCTION _TZUp_
VM_DATA 0
VM_JSR _Increment_WORD_
EF_COMPARE
VM_RTS

; TZDwn()
VM_FUNCTION _TZDwn_
VM_DATA 0
VM_JSR _Decrement_WORD_
EF_COMPARE
VM_RTS

; EnDateChg()
VM_FUNCTION _EnDateChg_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng_ST.En_Date
EF_COMPARE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X TimeChangedLocal
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_TimeSync
VM_RTS

; Date_PRG_button()
VM_FUNCTION _Date_PRG_button_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L707
; THEN
; IF
VM_PUSH BOOL X En_DP_TOP
VM_DUP BOOL
VM_JZ L709
VM_POP_AWAY BOOL
VM_PUSH BOOL X FLR_Disc_CTRL.Active
VM_LABEL L709
VM_JZ L708
; THEN
VM_PUSH_IMM USINT 8
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_JUMP L710
VM_LABEL L708
; IF
VM_PUSH BOOL X En_TOP
VM_DUP BOOL
VM_JZ L712
VM_POP_AWAY BOOL
VM_PUSH BOOL X Role_Slave
VM_LABEL L712
VM_JZ L711
; THEN
VM_PUSH_IMM USINT 10
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_JUMP L713
VM_LABEL L711
; ELSE
EF_STORE_MASK
VM_PUSH_IMM USINT 3
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
VM_PUSH UINT X GeneralMng_ST.Second
VM_POP UINT X GeneralMng_ST.SecondIn
VM_PUSH UINT X GeneralMng_ST.Minute
VM_POP UINT X GeneralMng_ST.MinuteIn
VM_PUSH UINT X GeneralMng_ST.Hour
VM_POP UINT X GeneralMng_ST.HourIn
VM_PUSH UINT X GeneralMng_ST.Day
VM_POP UINT X GeneralMng_ST.DayIn
VM_PUSH UINT X GeneralMng_ST.Month
VM_POP UINT X GeneralMng_ST.MonthIn
VM_PUSH UINT X GeneralMng_ST.Year
VM_POP UINT X GeneralMng_ST.YearIn
VM_PUSH UINT X GeneralMng_ST.Zone_Read
VM_POP UINT X TimeZoneTmp
; END_IF
VM_LABEL L713
VM_LABEL L710
VM_JUMP L715
VM_LABEL L707
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L716
; THEN
VM_JSR _EnDateChg_
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
VM_LABEL L716
; END_IF
VM_LABEL L715
VM_RTS

; SlaveSet_ESC()
VM_FUNCTION _SlaveSet_ESC_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_POP BOOL X CurSlaveShow
; IF
VM_SYSTEM 32
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L717
; THEN
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_JUMP L718
VM_LABEL L717
; ELSE
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; END_IF
VM_LABEL L718
VM_JSR _RetGroupMask_
VM_RTS

; SlaveSet_PRG()
VM_FUNCTION _SlaveSet_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L720
; THEN
EF_STORE_MASK
VM_PUSH_IMM USINT 3
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
VM_JUMP L721
VM_LABEL L720
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L722
; THEN
EF_COMPARE
; IF
VM_PUSH INT X __SYSVA_CURSOR_ROW
VM_PUSH_IMM INT 3
VM_CMP_EQ INT
VM_JZ L723
; THEN
VM_PUSH BOOL X CurMode
VM_PUSH_AMP BOOL X SlaveMode[1]
VM_PUSH USINT X CurSlave
VM_ADDRESS USINT 1 30 16
VM_POPI BOOL
VM_JUMP L724
VM_LABEL L723
; IF
VM_PUSH INT X __SYSVA_CURSOR_ROW
VM_PUSH_IMM INT 5
VM_CMP_EQ INT
VM_JZ L725
; THEN
VM_PUSH BOOL X CurOnOff
VM_PUSH_AMP BOOL X SlaveOnOff[1]
VM_PUSH USINT X CurSlave
VM_ADDRESS USINT 1 30 16
VM_POPI BOOL
VM_JUMP L726
VM_LABEL L725
; IF
VM_PUSH INT X __SYSVA_CURSOR_ROW
VM_PUSH_IMM INT 6
VM_CMP_EQ INT
VM_JZ L727
; THEN
VM_PUSH REAL X CurSP
VM_PUSH_AMP REAL X SlaveSP[1]
VM_PUSH USINT X CurSlave
VM_ADDRESS USINT 1 30 16
VM_POPI REAL
VM_LABEL L727
; END_IF
VM_LABEL L726
VM_LABEL L724
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
VM_LABEL L722
; END_IF
VM_LABEL L721
VM_RTS

; SlaveSet_UP()
VM_FUNCTION _SlaveSet_UP_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L729
VM_POP_AWAY BOOL
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_LABEL L729
VM_JZ L728
; THEN
; IF
VM_PUSH BOOL X CurSlaveShow
VM_JZ L730
; THEN
; IF
VM_PUSH USINT X CurSlave
VM_PUSH_IMM USINT 1
VM_CMP_GT USINT
VM_JZ L731
; THEN
VM_PUSH USINT X CurSlave
VM_PUSH_IMM USINT 1
VM_SUB USINT
VM_POP USINT X CurSlave
VM_JUMP L732
VM_LABEL L731
; ELSE
VM_PUSH USINT X Num_Slaves
VM_POP USINT X CurSlave
; END_IF
VM_LABEL L732
VM_LABEL L730
; END_IF
VM_LABEL L728
; END_IF
VM_RTS

; SlaveSet_ALARM()
VM_FUNCTION _SlaveSet_ALARM_
VM_DATA 0
EF_STORE_MASK
VM_PUSH_IMM USINT 4
VM_POP USINT X StatePRG
; IF
VM_PUSH_AMP USINT X Show_SlaveStates[1]
VM_PUSH USINT X CurSlave
VM_ADDRESS USINT 1 30 16
VM_PUSHI USINT
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_JZ L734
; THEN
VM_PUSH_IMM USINT 3
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_JUMP L735
VM_LABEL L734
; ELSE
; IF
VM_PUSH_AMP INT X WORDs_SlaveAlarms[1]
VM_PUSH USINT X CurSlave
VM_ADDRESS USINT 1 30 16
VM_PUSHI INT
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_JZ L737
; THEN
EF_GOTO_MASK Slave_NoAlrms
VM_JUMP L738
VM_LABEL L737
; ELSE
VM_PUSH_IMM DINT 1
VM_POP DINT X Slave_AlrmIdx
VM_PUSH_IMM BOOL 1
VM_POP BOOL X CurSlaveAlarmShow
EF_GOTO_MASK Slave_Alrms
; END_IF
VM_LABEL L738
; END_IF
VM_LABEL L735
VM_RTS

; SlaveSet_DOWN()
VM_FUNCTION _SlaveSet_DOWN_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L741
VM_POP_AWAY BOOL
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_LABEL L741
VM_JZ L740
; THEN
; IF
VM_PUSH BOOL X CurSlaveShow
VM_JZ L742
; THEN
; IF
VM_PUSH USINT X CurSlave
VM_PUSH USINT X Num_Slaves
VM_CMP_LT USINT
VM_JZ L743
; THEN
VM_PUSH USINT X CurSlave
VM_PUSH_IMM USINT 1
VM_ADD USINT
VM_POP USINT X CurSlave
VM_JUMP L744
VM_LABEL L743
; ELSE
VM_PUSH_IMM USINT 1
VM_POP USINT X CurSlave
; END_IF
VM_LABEL L744
VM_LABEL L742
; END_IF
VM_LABEL L740
; END_IF
VM_RTS

; ChgPwd()
VM_FUNCTION _ChgPwd_
VM_DATA 0
EF_COMPARE
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF IncrTmp
; IF
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 4
VM_CMP_GE INT
VM_JZ L746
; THEN
EF_NEXT_FIELD
VM_PUSH_IMM INT 0
VM_POP INT EF IncrTmp
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng_ST.WritePwd
VM_JUMP L747
VM_LABEL L746
; ELSE
EF_DIGIT_RIGHT
; END_IF
VM_LABEL L747
VM_RTS

; SetUoMZone_UI()
VM_FUNCTION _SetUoMZone_UI_
VM_DATA 0
EF_COMPARE
VM_PUSH DINT X STD_UOM_ZONE_UI
VM_SYSTEM 49
VM_POP_AWAY DINT
EF_NEXT_FIELD
VM_RTS

; ENTER_button()
VM_FUNCTION _ENTER_button_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L749
; THEN
EF_COMPARE
EF_NEXT_FIELD
VM_LABEL L749
; END_IF
VM_RTS

; DeleteAlarmLog()
VM_FUNCTION _DeleteAlarmLog_
VM_DATA 0
; IF
VM_PUSH BOOL X AlrmLogDelete
VM_PUSH_IMM BOOL 1
VM_CMP_EQ BOOL
VM_JZ L750
; THEN
VM_SYSTEM 43
VM_POP_AWAY DINT
VM_PUSH USINT EF POPUP_TIME
VM_POP USINT X DTPopUp
EF_STORE_MASK
EF_GOTO_MASK AlrmLog_Cleared
VM_PUSH_IMM BOOL 0
VM_POP BOOL X AlrmLogDelete
VM_LABEL L750
; END_IF
EF_NEXT_FIELD
VM_RTS

; ClearAutoResetCounter()
VM_FUNCTION _ClearAutoResetCounter_
VM_DATA 0
; IF
VM_PUSH BOOL X ClrAutoResCounters
VM_PUSH_IMM BOOL 1
VM_CMP_EQ BOOL
VM_JZ L751
; THEN
VM_SYSTEM 38
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ClrAutoResCounters
VM_JSR _GlobalEsc_
VM_JUMP L752
VM_LABEL L751
; ELSE
EF_NEXT_FIELD
; END_IF
VM_LABEL L752
VM_RTS

; WipeMem()
VM_FUNCTION _WipeMem_
VM_DATA 0
; IF
VM_PUSH BOOL X En_WipeRetain
VM_JZ L754
; THEN
VM_PUSH_IMM UDINT 1
VM_POP UDINT X GeneralMng_ST.WipeMem[1]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_WipeMem
VM_LABEL L754
; END_IF
; IF
VM_PUSH BOOL X En_WipeNVRAM
VM_JZ L755
; THEN
VM_PUSH_IMM UDINT 2
VM_POP UDINT X GeneralMng_ST.WipeMem[1]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_WipeMem
VM_LABEL L755
; END_IF
; IF
VM_PUSH BOOL X En_WipeAll
VM_JZ L756
; THEN
VM_PUSH_IMM UDINT 3
VM_POP UDINT X GeneralMng_ST.WipeMem[1]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_WipeMem
VM_LABEL L756
; END_IF
EF_NEXT_FIELD
VM_RTS

; ParamImpExp()
VM_FUNCTION _ParamImpExp_
VM_DATA 0
EF_COMPARE
; IF
VM_PUSH BOOL X UnitOn
VM_DUP BOOL
VM_JZ L758
VM_POP_AWAY BOOL
VM_PUSH INT X EnImpExpTmp
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_LABEL L758
VM_JZ L757
; THEN
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
EF_STORE_MASK
VM_PUSH USINT EF POPUP_TIME
VM_POP USINT X DTPopUp
EF_GOTO_MASK ParamsImpExpErr
VM_PUSH_IMM INT 2
VM_POP INT EF MaskPos
VM_PUSH_IMM INT 0
VM_POP INT X EnImpExpTmp
VM_JUMP L759
VM_LABEL L757
; IF
VM_PUSH INT X EnImpExpTmp
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L761
VM_POP_AWAY BOOL
VM_PUSH BOOL X ImpExpSel
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_LABEL L761
VM_JZ L760
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ImpExpMng.En_ParamsImp
EF_STORE_MASK
VM_PUSH USINT EF POPUP_TIME
VM_POP USINT X DTPopUp
EF_GOTO_MASK ParamsImpExpRes
VM_PUSH_IMM INT 0
VM_POP INT X EnImpExpTmp
VM_JUMP L762
VM_LABEL L760
; IF
VM_PUSH INT X EnImpExpTmp
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L764
VM_POP_AWAY BOOL
VM_PUSH BOOL X ImpExpSel
VM_PUSH_IMM BOOL 1
VM_CMP_EQ BOOL
VM_LABEL L764
VM_JZ L763
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ImpExpMng.En_ParamsExp
EF_STORE_MASK
VM_PUSH USINT EF POPUP_TIME
VM_POP USINT X DTPopUp
EF_GOTO_MASK ParamsImpExpRes
VM_PUSH_IMM INT 0
VM_POP INT X EnImpExpTmp
VM_JUMP L765
VM_LABEL L763
; ELSE
EF_NEXT_FIELD
; END_IF
VM_LABEL L765
VM_LABEL L762
VM_LABEL L759
VM_RTS

; AlrmExp()
VM_FUNCTION _AlrmExp_
VM_DATA 0
EF_COMPARE
; IF
VM_PUSH INT X EnAlrmExpTmp
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L767
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng_ST.En_AlrmExp
EF_GOTO_MASK AlrmExpRes
VM_PUSH_IMM INT 0
VM_POP INT X EnAlrmExpTmp
VM_JUMP L768
VM_LABEL L767
; ELSE
EF_NEXT_FIELD
; END_IF
VM_LABEL L768
VM_RTS

; IOM_PRG_button()
VM_FUNCTION _IOM_PRG_button_
VM_DATA 0
EF_STORE_MASK
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L770
; THEN
; IF
VM_PUSH BOOL X UnitOn
VM_JZ L771
; THEN
VM_PUSH_IMM USINT 1
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_JUMP L772
VM_LABEL L771
; ELSE
VM_PUSH_IMM USINT 3
VM_POP USINT X StatePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ManualManage
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
; END_IF
VM_LABEL L772
VM_JUMP L774
VM_LABEL L770
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L775
; THEN
EF_COMPARE
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ManualManage
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
VM_LABEL L775
; END_IF
VM_LABEL L774
VM_RTS

; Sched_UP()
VM_FUNCTION _Sched_UP_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L777
VM_POP_AWAY BOOL
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_LABEL L777
VM_JZ L776
; THEN
; IF
VM_PUSH UINT X CurDayOfWeek
VM_PUSH_IMM UINT 1
VM_CMP_GT UINT
VM_JZ L778
; THEN
VM_PUSH UINT X CurDayOfWeek
VM_PUSH_IMM UINT 1
VM_SUB UINT
VM_POP UINT X CurDayOfWeek
VM_JUMP L779
VM_LABEL L778
; ELSE
VM_PUSH_IMM UINT 7
VM_POP UINT X CurDayOfWeek
; END_IF
VM_LABEL L779
VM_LABEL L776
; END_IF
VM_RTS

; Sched_DOWN()
VM_FUNCTION _Sched_DOWN_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L782
VM_POP_AWAY BOOL
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_LABEL L782
VM_JZ L781
; THEN
; IF
VM_PUSH UINT X CurDayOfWeek
VM_PUSH_IMM UINT 7
VM_CMP_LT UINT
VM_JZ L783
; THEN
VM_PUSH UINT X CurDayOfWeek
VM_PUSH_IMM UINT 1
VM_ADD UINT
VM_POP UINT X CurDayOfWeek
VM_JUMP L784
VM_LABEL L783
; ELSE
VM_PUSH_IMM UINT 1
VM_POP UINT X CurDayOfWeek
; END_IF
VM_LABEL L784
VM_LABEL L781
; END_IF
VM_RTS

; Sched_ENTER()
VM_FUNCTION _Sched_ENTER_
VM_DATA 0
EF_COMPARE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.Chg_Sched
VM_PUSH INT X __SYSVA_CURSOR_ROW
VM_POP INT X MaskMng.Sched_ROW
VM_PUSH INT X __SYSVA_CURSOR_COLUMN
VM_POP INT X MaskMng.Sched_COLUMN
EF_NEXT_FIELD
VM_RTS

; Sched_PRG()
VM_FUNCTION _Sched_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L786
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.CopyFromSched
EF_STORE_MASK
VM_PUSH_IMM USINT 3
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
VM_JUMP L787
VM_LABEL L786
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L788
; THEN
EF_COMPARE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.Chg_Sched
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.CopyToSched
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X TimeChangedLocal
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
VM_LABEL L788
; END_IF
VM_LABEL L787
VM_RTS

; Dep_REAL_1_UP()
VM_FUNCTION _Dep_REAL_1_UP_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_ADD REAL
VM_POP REAL X __SYSVA_TMP_VALUE
; IF
VM_PUSH INT X __SYSVA_CURSOR_ROW
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_JZ L789
; THEN
; IF
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH REAL X Par_Ws08
VM_CMP_GT REAL
VM_JZ L790
; THEN
VM_PUSH REAL X Par_Ws08
VM_POP REAL X __SYSVA_TMP_VALUE
VM_LABEL L790
; END_IF
VM_JUMP L791
VM_LABEL L789
; IF
VM_PUSH INT X __SYSVA_CURSOR_ROW
VM_PUSH_IMM INT 6
VM_CMP_EQ INT
VM_JZ L792
; THEN
; IF
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH REAL X Par_Ws07
VM_CMP_GT REAL
VM_JZ L793
; THEN
VM_PUSH REAL X Par_Ws07
VM_POP REAL X __SYSVA_TMP_VALUE
VM_LABEL L793
; END_IF
VM_JUMP L794
VM_LABEL L792
; ELSE
EF_CHECK_LIMITS_DECR
; END_IF
VM_LABEL L794
VM_LABEL L791
VM_RTS

; Dep_REAL_1_DOWN()
VM_FUNCTION _Dep_REAL_1_DOWN_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_SUB REAL
VM_POP REAL X __SYSVA_TMP_VALUE
; IF
VM_PUSH INT X __SYSVA_CURSOR_ROW
VM_PUSH_IMM INT 5
VM_CMP_EQ INT
VM_JZ L796
; THEN
; IF
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH REAL X Par_Ws08
VM_CMP_LT REAL
VM_JZ L797
; THEN
VM_PUSH REAL X Par_Ws08
VM_POP REAL X __SYSVA_TMP_VALUE
VM_LABEL L797
; END_IF
VM_JUMP L798
VM_LABEL L796
; IF
VM_PUSH INT X __SYSVA_CURSOR_ROW
VM_PUSH_IMM INT 6
VM_CMP_EQ INT
VM_JZ L799
; THEN
; IF
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH REAL X Par_Ws06
VM_CMP_LT REAL
VM_JZ L800
; THEN
VM_PUSH REAL X Par_Ws06
VM_POP REAL X __SYSVA_TMP_VALUE
VM_LABEL L800
; END_IF
VM_JUMP L801
VM_LABEL L799
; ELSE
EF_CHECK_LIMITS_DECR
; END_IF
VM_LABEL L801
VM_LABEL L798
VM_RTS

; Dep_REAL_1_ENTER()
VM_FUNCTION _Dep_REAL_1_ENTER_
VM_DATA 0
; IF
VM_PUSH INT X __SYSVA_CURSOR_ROW
VM_PUSH_IMM INT 6
VM_CMP_EQ INT
VM_JZ L803
; THEN
; IF
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH_IMM REAL 7
VM_CMP_GT REAL
VM_JZ L804
; THEN
VM_PUSH_IMM REAL 5
VM_POP REAL X Par_Ws06
VM_JUMP L805
VM_LABEL L804
; ELSE
VM_PUSH REAL X Par_Ws07
VM_POP REAL X Par_Ws06
; END_IF
VM_LABEL L805
VM_LABEL L803
; END_IF
EF_COMPARE
EF_NEXT_FIELD
VM_RTS

; Alrms_Log_ENTER()
VM_FUNCTION _Alrms_Log_ENTER_
VM_DATA 0
VM_PUSH DINT X AlrmLogCode
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X AlrmLogCode
VM_RTS

; Stats_1_PRG()
VM_FUNCTION _Stats_1_PRG_
VM_DATA 0
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_GE INT
VM_JZ L807
; THEN
VM_PUSH_IMM USINT 8
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L808
VM_LABEL L807
; ELSE
VM_PUSH_IMM USINT 4
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L808
VM_RTS

; Stats_2_PRG()
VM_FUNCTION _Stats_2_PRG_
VM_DATA 0
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_GE INT
VM_JZ L810
; THEN
VM_PUSH_IMM USINT 9
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L811
VM_LABEL L810
; ELSE
VM_PUSH_IMM USINT 4
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L811
VM_RTS

; Stats_3_PRG()
VM_FUNCTION _Stats_3_PRG_
VM_DATA 0
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_GE INT
VM_JZ L813
; THEN
VM_PUSH_IMM USINT 10
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L814
VM_LABEL L813
; ELSE
VM_PUSH_IMM USINT 4
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L814
VM_RTS

; Hide_UnitModel_Class_ENTER()
VM_FUNCTION _Hide_UnitModel_Class_ENTER_
VM_DATA 0
; IF
VM_PUSH BYTE X __SYSVA_TMP_VALUE
VM_CAST BYTE USINT
VM_PUSH USINT X UnitModel
VM_CMP_EQ USINT
VM_JZ L816
; THEN
EF_NEXT_FIELD
VM_JUMP L817
VM_LABEL L816
; ELSE
VM_PUSH BYTE X __SYSVA_TMP_VALUE
VM_CAST BYTE USINT
VM_POP USINT X UnitModel
; CASE
VM_PUSH USINT X UnitModel
; OF
VM_CASE USINT 1 L820
VM_CASE USINT 2 L820
VM_CASE USINT 3 L820
VM_CASE USINT 4 L820
VM_CASE USINT 5 L820
VM_CASE USINT 6 L820
VM_CASE USINT 7 L821
VM_CASE USINT 8 L821
VM_CASE USINT 9 L821
VM_POP_AWAY USINT
VM_JUMP L819
VM_LABEL L820
VM_PUSH_IMM DINT 1
VM_POP DINT X SUM_Comp
VM_JUMP L819
VM_LABEL L821
VM_PUSH_IMM DINT 2
VM_POP DINT X SUM_Comp
VM_LABEL L819
; END_IF
VM_LABEL L817
VM_RTS

; POOLConfig_PRG()
VM_FUNCTION _POOLConfig_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L822
; THEN
EF_STORE_MASK
VM_PUSH_IMM USINT 3
VM_POP USINT X StatePRG
VM_JUMP L823
VM_LABEL L822
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L824
; THEN
EF_COMPARE
; IF
VM_PUSH USINT X temp_HeatType
VM_PUSH USINT X HeatType
VM_CMP_NE USINT
VM_JZ L825
; THEN
; IF
VM_PUSH USINT X temp_HeatType
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L827
VM_POP_AWAY BOOL
VM_PUSH USINT X HeatType
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_LABEL L827
VM_JZ L826
; THEN
VM_PUSH_IMM USINT 3
VM_JSR _ShowPopUpQuestion_USINT_
VM_LABEL L826
; END_IF
VM_LABEL L825
; END_IF
; CASE
VM_PUSH USINT X UnitModel
; OF
VM_CASE USINT 1 L829
VM_CASE USINT 2 L829
VM_CASE USINT 3 L829
VM_CASE USINT 4 L829
VM_CASE USINT 5 L829
VM_CASE USINT 6 L829
VM_CASE USINT 7 L830
VM_CASE USINT 8 L830
VM_CASE USINT 9 L830
VM_POP_AWAY USINT
VM_JUMP L828
VM_LABEL L829
VM_PUSH_IMM DINT 1
VM_POP DINT X SUM_Comp
VM_JUMP L828
VM_LABEL L830
VM_PUSH_IMM DINT 2
VM_POP DINT X SUM_Comp
VM_LABEL L828
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_LABEL L824
; END_IF
VM_LABEL L823
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
VM_RTS

; POOLConfig_2_PRG()
VM_FUNCTION _POOLConfig_2_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L831
; THEN
EF_STORE_MASK
VM_PUSH_IMM USINT 3
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
VM_JUMP L832
VM_LABEL L831
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L833
; THEN
EF_COMPARE
; IF
VM_PUSH USINT X temp_HeatType
VM_PUSH USINT X HeatType
VM_CMP_NE USINT
VM_JZ L834
; THEN
; IF
VM_PUSH USINT X temp_HeatType
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L836
VM_POP_AWAY BOOL
VM_PUSH USINT X HeatType
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_LABEL L836
VM_JZ L835
; THEN
VM_PUSH_IMM USINT 3
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L837
VM_LABEL L835
; ELSE
VM_PUSH USINT X temp_HeatType
VM_POP USINT X HeatType
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
; END_IF
VM_LABEL L837
VM_JUMP L839
VM_LABEL L834
; ELSE
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
; END_IF
VM_LABEL L839
VM_LABEL L833
; END_IF
VM_LABEL L832
VM_RTS

; Upgrade_1_ENTER()
VM_FUNCTION _Upgrade_1_ENTER_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Upgrade.Check_Upgrade
VM_RTS

; Upgrade_1_PRG()
VM_FUNCTION _Upgrade_1_PRG_
VM_DATA 0
; IF
VM_PUSH BOOL X Upgrade.En_FirmWare
VM_JZ L841
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Upgrade.En_Upgrade
EF_GOTO_MASK Upgrade_Progress
VM_JUMP L842
VM_LABEL L841
; ELSE
VM_JSR _Upgrade_1_ENTER_
; END_IF
VM_LABEL L842
VM_RTS

; NetMap_ENTER()
VM_FUNCTION _NetMap_ENTER_
VM_DATA 0
VM_PUSH USINT X CurPosition
VM_POP USINT X CurSlave
VM_PUSH_IMM BOOL 1
VM_POP BOOL X CurSlaveShow
; IF
VM_PUSH_AMP BOOL X SlaveMode[1]
VM_PUSH USINT X CurSlave
VM_ADDRESS USINT 1 30 16
VM_PUSHI BOOL
VM_JZ L844
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_JUMP L845
VM_LABEL L844
; ELSE
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
; END_IF
VM_LABEL L845
EF_GOTO_MASK SlaveState
VM_RTS

; SlaveState_ESC()
VM_FUNCTION _SlaveState_ESC_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_POP BOOL X CurSlaveShow
; IF
VM_SYSTEM 32
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L847
; THEN
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_JUMP L848
VM_LABEL L847
; ELSE
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; END_IF
VM_LABEL L848
EF_GOTO_MASK NetMap
VM_RTS

; SEQ_Settings_Set()
VM_FUNCTION _SEQ_Settings_Set_
VM_DATA 0
EF_COMPARE
VM_PUSH USINT X CurDevice
VM_PUSH_AMP USINT X DevOrder[1]
VM_PUSH DINT X CurSEQ
VM_ADDRESS DINT 1 6 16
VM_POPI USINT
; IF
VM_PUSH USINT X CurDevice
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_JZ L850
; THEN
; CASE
VM_PUSH DINT X CurSEQ
; OF
VM_CASE DINT 1 L852
VM_CASE DINT 2 L853
VM_CASE DINT 4 L854
VM_CASE DINT 5 L855
VM_POP_AWAY DINT
VM_JUMP L851
VM_LABEL L852
VM_PUSH_IMM USINT 0
VM_POP USINT X DevOrder[2]
VM_PUSH_IMM USINT 0
VM_POP USINT X DevOrder[3]
VM_JUMP L851
VM_LABEL L853
VM_PUSH_IMM USINT 0
VM_POP USINT X DevOrder[3]
VM_JUMP L851
VM_LABEL L854
VM_PUSH_IMM USINT 0
VM_POP USINT X DevOrder[5]
VM_PUSH_IMM USINT 0
VM_POP USINT X DevOrder[6]
VM_JUMP L851
VM_LABEL L855
VM_PUSH_IMM USINT 0
VM_POP USINT X DevOrder[6]
VM_LABEL L851
VM_LABEL L850
; END_IF
VM_RTS

; SEQ_Settings_ESC()
VM_FUNCTION _SEQ_Settings_ESC_
VM_DATA 0
EF_RESTORE_MASK
VM_PUSH_IMM USINT 3
VM_POP USINT X StatePRG
VM_RTS

; SEQ_Settings_DOWN()
VM_FUNCTION _SEQ_Settings_DOWN_
VM_DATA 2
; CASE
VM_PUSH DINT X CurSEQ
; OF
VM_CASE DINT 1 L857
VM_CASE DINT 2 L858
VM_CASE DINT 3 L859
VM_CASE DINT 4 L860
VM_CASE DINT 5 L861
VM_CASE DINT 6 L862
VM_POP_AWAY DINT
VM_JUMP L856
VM_LABEL L857
VM_PUSH_IMM USINT 2
VM_POPL USINT 0
VM_PUSH_IMM USINT 3
VM_POPL USINT 1
VM_JUMP L856
VM_LABEL L858
VM_PUSH_IMM USINT 3
VM_POPL USINT 0
VM_PUSH_IMM USINT 1
VM_POPL USINT 1
VM_JUMP L856
VM_LABEL L859
VM_PUSH_IMM USINT 1
VM_POPL USINT 0
VM_PUSH_IMM USINT 2
VM_POPL USINT 1
VM_JUMP L856
VM_LABEL L860
VM_PUSH_IMM USINT 5
VM_POPL USINT 0
VM_PUSH_IMM USINT 6
VM_POPL USINT 1
VM_JUMP L856
VM_LABEL L861
VM_PUSH_IMM USINT 6
VM_POPL USINT 0
VM_PUSH_IMM USINT 4
VM_POPL USINT 1
VM_JUMP L856
VM_LABEL L862
VM_PUSH_IMM USINT 4
VM_POPL USINT 0
VM_PUSH_IMM USINT 5
VM_POPL USINT 1
VM_LABEL L856
; IF
VM_PUSH USINT X CurDevice
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_JZ L863
; THEN
VM_PUSH_IMM USINT 3
VM_POP USINT X CurDevice
VM_JUMP L864
VM_LABEL L863
; ELSE
VM_PUSH USINT X CurDevice
VM_PUSH_IMM USINT 1
VM_SUB USINT
VM_POP USINT X CurDevice
; END_IF
VM_LABEL L864
; IF
VM_PUSH USINT X CurDevice
VM_PUSH_IMM USINT 0
VM_CMP_NE USINT
VM_JZ L866
; THEN
; IF
VM_PUSH_AMP USINT X DevOrder[1]
VM_PUSHL USINT 0
VM_ADDRESS USINT 1 6 16
VM_PUSHI USINT
VM_PUSH USINT X CurDevice
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L868
VM_POP_AWAY BOOL
VM_PUSH_AMP USINT X DevOrder[1]
VM_PUSHL USINT 1
VM_ADDRESS USINT 1 6 16
VM_PUSHI USINT
VM_PUSH USINT X CurDevice
VM_CMP_EQ USINT
VM_LABEL L868
VM_JZ L867
; THEN
; IF
VM_PUSH USINT X CurDevice
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_JZ L869
; THEN
VM_PUSH_IMM USINT 3
VM_POP USINT X CurDevice
VM_JUMP L870
VM_LABEL L869
; ELSE
VM_PUSH USINT X CurDevice
VM_PUSH_IMM USINT 1
VM_SUB USINT
VM_POP USINT X CurDevice
; END_IF
VM_LABEL L870
VM_LABEL L867
; END_IF
VM_LABEL L866
; END_IF
VM_RTS

; Incr_REAL_x1000()
VM_FUNCTION _Incr_REAL_x1000_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 1000
VM_MUL REAL
VM_ADD REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Decr_REAL_x1000()
VM_FUNCTION _Decr_REAL_x1000_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 1000
VM_MUL REAL
VM_SUB REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; DeviceRole_Class_PRG()
VM_FUNCTION _DeviceRole_Class_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L872
; THEN
EF_STORE_MASK
VM_PUSH_IMM USINT 3
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 2
VM_POP USINT EF NextCycleAction
VM_JUMP L873
VM_LABEL L872
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L874
; THEN
EF_COMPARE
; IF
VM_PUSH USINT X temp_Role
VM_PUSH USINT X Role
VM_CMP_NE USINT
VM_JZ L875
; THEN
; IF
VM_PUSH USINT X temp_Role
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L877
VM_POP_AWAY BOOL
VM_PUSH BOOL X Role_Master
VM_LABEL L877
VM_JZ L876
; THEN
VM_PUSH_IMM USINT 4
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L878
VM_LABEL L876
; ELSE
VM_PUSH USINT X temp_Role
VM_POP USINT X Role
EF_STORE_MASK
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
; END_IF
VM_LABEL L878
VM_JUMP L880
VM_LABEL L875
; ELSE
EF_STORE_MASK
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
; END_IF
VM_LABEL L880
VM_LABEL L874
; END_IF
VM_LABEL L873
VM_RTS

; DeviceRole_Class_ENTER()
VM_FUNCTION _DeviceRole_Class_ENTER_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_NE USINT
VM_JZ L882
; THEN
EF_COMPARE
; IF
VM_PUSH USINT X temp_Role
VM_PUSH USINT X Role
VM_CMP_NE USINT
VM_JZ L883
; THEN
; IF
VM_PUSH USINT X temp_Role
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L885
VM_POP_AWAY BOOL
VM_PUSH BOOL X Role_Master
VM_LABEL L885
VM_JZ L884
; THEN
VM_PUSH_IMM USINT 4
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L886
VM_LABEL L884
; ELSE
VM_PUSH USINT X temp_Role
VM_POP USINT X Role
; END_IF
VM_LABEL L886
VM_LABEL L883
; END_IF
VM_LABEL L882
; END_IF
VM_RTS

; Config_Reset_ENTER()
VM_FUNCTION _Config_Reset_ENTER_
VM_DATA 0
EF_COMPARE
; IF
VM_PUSH BOOL X temp_Config_Reset
VM_JZ L888
; THEN
VM_PUSH_IMM USINT 2
VM_JSR _ShowPopUpQuestion_USINT_
VM_PUSH_IMM USINT 2
VM_POP USINT X StatePRG
VM_LABEL L888
; END_IF
VM_RTS

; Config_Reset_PRG()
VM_FUNCTION _Config_Reset_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L889
; THEN
EF_STORE_MASK
VM_PUSH_IMM USINT 3
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
VM_JUMP L890
VM_LABEL L889
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L891
; THEN
EF_COMPARE
; IF
VM_PUSH BOOL X temp_Config_Reset
VM_JZ L892
; THEN
VM_PUSH_IMM USINT 2
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L893
VM_LABEL L892
; ELSE
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
; END_IF
VM_LABEL L893
VM_LABEL L891
; END_IF
VM_LABEL L890
VM_RTS

; Config_Reset_Esc()
VM_FUNCTION _Config_Reset_Esc_
VM_DATA 0
VM_JSR _GlobalEsc_
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Config_Reset
VM_RTS

; HeatType_ENTER()
VM_FUNCTION _HeatType_ENTER_
VM_DATA 0
EF_COMPARE
; IF
VM_PUSH USINT X temp_HeatType
VM_PUSH USINT X HeatType
VM_CMP_NE USINT
VM_JZ L895
; THEN
; IF
VM_PUSH USINT X temp_HeatType
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L897
VM_POP_AWAY BOOL
VM_PUSH USINT X HeatType
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_LABEL L897
VM_JZ L896
; THEN
VM_PUSH_IMM USINT 3
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L898
VM_LABEL L896
; ELSE
VM_PUSH USINT X temp_HeatType
VM_POP USINT X HeatType
; END_IF
VM_LABEL L898
VM_LABEL L895
; END_IF
VM_RTS

; Main_Testing_ESC()
VM_FUNCTION _Main_Testing_ESC_
VM_DATA 0
; IF
VM_PUSH BOOL X EnPwdChgM
VM_JZ L900
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_Testing
EF_GOTO_MASK FC_mng
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_LABEL L900
; END_IF
VM_RTS

; Testing_ESC()
VM_FUNCTION _Testing_ESC_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_Testing
VM_JSR _GotoMain_
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_RTS

; Port_Sel_ENTER()
VM_FUNCTION _Port_Sel_ENTER_
VM_DATA 0
; IF
VM_PUSH USINT X Temp_MB_port
VM_PUSH BYTE X __SYSVA_TMP_VALUE
VM_CAST BYTE USINT
VM_CMP_NE USINT
VM_JZ L901
; THEN
EF_COMPARE
VM_JSR _Show_ports_
VM_JUMP L902
VM_LABEL L901
; ELSE
EF_NEXT_FIELD
; END_IF
VM_LABEL L902
VM_RTS

; MB_Settings_1_PRG()
VM_FUNCTION _MB_Settings_1_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L904
; THEN
EF_STORE_MASK
VM_PUSH_IMM USINT 3
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
VM_JUMP L905
VM_LABEL L904
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L906
; THEN
EF_COMPARE
; IF
VM_PUSH USINT X Temp_MB_port
VM_PUSH USINT X MB_port
VM_CMP_NE USINT
VM_DUP BOOL
VM_JNZ L908
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Address
VM_PUSH USINT X MB_Address
VM_CMP_NE USINT
VM_LABEL L908
VM_DUP BOOL
VM_JNZ L909
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L910
VM_POP_AWAY BOOL
VM_PUSH UDINT X Temp_MB_Baudrate
VM_PUSH UDINT X BMS_Card_Baudrate
VM_CMP_NE UDINT
VM_LABEL L910
VM_LABEL L909
VM_DUP BOOL
VM_JNZ L911
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L912
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Stopbits
VM_PUSH USINT X BMS_Card_StopBits
VM_CMP_NE USINT
VM_LABEL L912
VM_LABEL L911
VM_DUP BOOL
VM_JNZ L913
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L914
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Parity
VM_PUSH USINT X BMS_Card_Parity
VM_CMP_NE USINT
VM_LABEL L914
VM_LABEL L913
VM_DUP BOOL
VM_JNZ L915
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L916
VM_POP_AWAY BOOL
VM_PUSH UDINT X Temp_MB_Baudrate
VM_PUSH UDINT X BMS2_Baudrate
VM_CMP_NE UDINT
VM_LABEL L916
VM_LABEL L915
VM_DUP BOOL
VM_JNZ L917
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L918
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Stopbits
VM_PUSH USINT X BMS2_StopBits
VM_CMP_NE USINT
VM_LABEL L918
VM_LABEL L917
VM_DUP BOOL
VM_JNZ L919
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L920
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Parity
VM_PUSH USINT X BMS2_Parity
VM_CMP_NE USINT
VM_LABEL L920
VM_LABEL L919
VM_JZ L907
; THEN
VM_PUSH_IMM USINT 5
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L921
VM_LABEL L907
; ELSE
VM_JSR _Show_ports_
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
; END_IF
VM_LABEL L921
VM_LABEL L906
; END_IF
VM_LABEL L905
VM_RTS

; MB_Settings_1_ESC()
VM_FUNCTION _MB_Settings_1_ESC_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L923
; THEN
VM_JSR _GlobalEsc_
VM_JUMP L924
VM_LABEL L923
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L925
; THEN
EF_COMPARE
; IF
VM_PUSH USINT X Temp_MB_port
VM_PUSH USINT X MB_port
VM_CMP_NE USINT
VM_DUP BOOL
VM_JNZ L927
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Address
VM_PUSH USINT X MB_Address
VM_CMP_NE USINT
VM_LABEL L927
VM_DUP BOOL
VM_JNZ L928
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L929
VM_POP_AWAY BOOL
VM_PUSH UDINT X Temp_MB_Baudrate
VM_PUSH UDINT X BMS_Card_Baudrate
VM_CMP_NE UDINT
VM_LABEL L929
VM_LABEL L928
VM_DUP BOOL
VM_JNZ L930
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L931
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Stopbits
VM_PUSH USINT X BMS_Card_StopBits
VM_CMP_NE USINT
VM_LABEL L931
VM_LABEL L930
VM_DUP BOOL
VM_JNZ L932
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L933
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Parity
VM_PUSH USINT X BMS_Card_Parity
VM_CMP_NE USINT
VM_LABEL L933
VM_LABEL L932
VM_DUP BOOL
VM_JNZ L934
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L935
VM_POP_AWAY BOOL
VM_PUSH UDINT X Temp_MB_Baudrate
VM_PUSH UDINT X BMS2_Baudrate
VM_CMP_NE UDINT
VM_LABEL L935
VM_LABEL L934
VM_DUP BOOL
VM_JNZ L936
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L937
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Stopbits
VM_PUSH USINT X BMS2_StopBits
VM_CMP_NE USINT
VM_LABEL L937
VM_LABEL L936
VM_DUP BOOL
VM_JNZ L938
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L939
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Parity
VM_PUSH USINT X BMS2_Parity
VM_CMP_NE USINT
VM_LABEL L939
VM_LABEL L938
VM_JZ L926
; THEN
VM_PUSH_IMM USINT 5
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L940
VM_LABEL L926
; ELSE
VM_JSR _GlobalEsc_
; END_IF
VM_LABEL L940
VM_LABEL L925
; END_IF
VM_LABEL L924
VM_RTS

; Mul_DWORD_x2()
VM_FUNCTION _Mul_DWORD_x2_
VM_DATA 0
VM_PUSH DWORD X __SYSVA_TMP_VALUE
VM_PUSH_IMM DWORD 2
VM_MUL DWORD
VM_POP DWORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Div_DWORD_x2()
VM_FUNCTION _Div_DWORD_x2_
VM_DATA 0
VM_PUSH DWORD X __SYSVA_TMP_VALUE
VM_PUSH_IMM DWORD 2
VM_DIV DWORD
VM_POP DWORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Upgrade_OS_ESC()
VM_FUNCTION _Upgrade_OS_ESC_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Upgrade.REQ_OS_upgrade
EF_GOTO_MASK Upgrade_OS
VM_RTS

; Upgrade_OS_PRG()
VM_FUNCTION _Upgrade_OS_PRG_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Upgrade.ANSW_OS_upgrade
VM_RTS

; PRG_button_goto10()
VM_FUNCTION _PRG_button_goto10_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L942
; THEN
EF_STORE_MASK
VM_PUSH_IMM USINT 3
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 2
VM_POP USINT EF NextCycleAction
VM_JUMP L943
VM_LABEL L942
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L944
; THEN
EF_COMPARE
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
VM_LABEL L944
; END_IF
VM_LABEL L943
VM_RTS

; DOWN_ENTER_Move()
VM_FUNCTION _DOWN_ENTER_Move_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L945
; THEN
EF_NEXT_MASK
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF checkZeroColumn
VM_LABEL L945
; END_IF
VM_RTS

; UP_ENTER_Move()
VM_FUNCTION _UP_ENTER_Move_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L946
; THEN
EF_PREVIOUS_MASK
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF checkZeroColumn
VM_LABEL L946
; END_IF
VM_RTS

; Hide_DLE_Class_ENTER()
VM_FUNCTION _Hide_DLE_Class_ENTER_
VM_DATA 0
EF_COMPARE
; IF
VM_PUSH USINT X temp_CurDLE
VM_PUSH USINT X CurDLE
VM_CMP_NE USINT
VM_JZ L947
; THEN
; CASE
VM_PUSH USINT X temp_CurDLE
; OF
VM_CASE USINT 1 L949
VM_CASE USINT 2 L950
VM_CASE USINT 3 L951
VM_CASE USINT 4 L952
VM_CASE USINT 5 L953
VM_POP_AWAY USINT
VM_JUMP L948
VM_LABEL L949
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_DLE[1]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[2]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[3]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[4]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[5]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Use_Sensor_Troom2
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Use_ExhaustFilter
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Use_ExhFan
VM_JUMP L948
VM_LABEL L950
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_DLE[2]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[1]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[3]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[4]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[5]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Use_ExhFan
VM_JUMP L948
VM_LABEL L951
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_DLE[3]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[1]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[2]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[4]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[5]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Use_ExhaustFilter
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Use_ExhFan
VM_JUMP L948
VM_LABEL L952
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_DLE[4]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[1]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[2]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[3]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[5]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Use_Sensor_Troom2
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Use_Sensor_CO2
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Use_ExhaustFilter
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Use_ExhFan
VM_JUMP L948
VM_LABEL L953
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_DLE[5]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[1]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[2]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[3]
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_DLE[4]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Use_Sensor_Troom2
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Use_Sensor_CO2
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Use_ExhaustFilter
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Use_ExhFan
VM_LABEL L948
VM_PUSH USINT X temp_CurDLE
VM_POP USINT X CurDLE
VM_PUSH BOOL X Use_Sensor_CO2
VM_NOT BOOL
VM_POP BOOL X show_WorkPriority
VM_LABEL L947
; END_IF
VM_RTS

; Hide_DLE_Class_PRG()
VM_FUNCTION _Hide_DLE_Class_PRG_
VM_DATA 0
VM_JSR _Hide_DLE_Class_ENTER_
VM_JSR _PRG_button_goto10_
VM_RTS

; Temp_DLE_Class_ENTER()
VM_FUNCTION _Temp_DLE_Class_ENTER_
VM_DATA 0
; IF
VM_PUSH BYTE X __SYSVA_TMP_VALUE
VM_PUSH USINT X temp_CurDLE
VM_CAST USINT BYTE
VM_CMP_NE BYTE
VM_JZ L954
; THEN
EF_COMPARE
; CASE
VM_PUSH USINT X temp_CurDLE
; OF
VM_CASE USINT 1 L956
VM_CASE USINT 2 L957
VM_CASE USINT 3 L958
VM_CASE USINT 4 L959
VM_CASE USINT 5 L960
VM_POP_AWAY USINT
VM_JUMP L955
VM_LABEL L956
VM_PUSH_IMM BOOL 1
VM_POP BOOL X show_Use_ExhaustFilter
VM_PUSH_IMM BOOL 1
VM_POP BOOL X show_Use_Sensor_CO2
VM_PUSH_IMM BOOL 0
VM_POP BOOL X show_Use_Sensor_Troom2
VM_PUSH_IMM BOOL 1
VM_POP BOOL X temp_Use_ExhaustFilter
VM_PUSH_IMM BOOL 1
VM_POP BOOL X temp_Use_Sensor_CO2
VM_PUSH_IMM BOOL 1
VM_POP BOOL X temp_Use_Sensor_Troom2
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Use_SupplyFilter
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Use_GateHeater
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Use_VortexDiff
VM_PUSH_IMM USINT 0
VM_POP USINT X temp_DLE_CoolType
VM_PUSH_IMM USINT 0
VM_POP USINT X temp_DLE_HeatType
VM_JUMP L955
VM_LABEL L957
VM_PUSH_IMM BOOL 0
VM_POP BOOL X show_Use_ExhaustFilter
VM_PUSH_IMM BOOL 1
VM_POP BOOL X show_Use_Sensor_CO2
VM_PUSH_IMM BOOL 1
VM_POP BOOL X show_Use_Sensor_Troom2
VM_PUSH_IMM BOOL 1
VM_POP BOOL X temp_Use_ExhaustFilter
VM_PUSH_IMM BOOL 1
VM_POP BOOL X temp_Use_Sensor_CO2
VM_PUSH_IMM BOOL 1
VM_POP BOOL X temp_Use_Sensor_Troom2
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Use_SupplyFilter
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Use_GateHeater
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Use_VortexDiff
VM_PUSH_IMM USINT 0
VM_POP USINT X temp_DLE_CoolType
VM_PUSH_IMM USINT 0
VM_POP USINT X temp_DLE_HeatType
VM_JUMP L955
VM_LABEL L958
VM_PUSH_IMM BOOL 0
VM_POP BOOL X show_Use_ExhaustFilter
VM_PUSH_IMM BOOL 1
VM_POP BOOL X show_Use_Sensor_CO2
VM_PUSH_IMM BOOL 1
VM_POP BOOL X show_Use_Sensor_Troom2
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Use_ExhaustFilter
VM_PUSH_IMM BOOL 1
VM_POP BOOL X temp_Use_Sensor_CO2
VM_PUSH_IMM BOOL 1
VM_POP BOOL X temp_Use_Sensor_Troom2
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Use_SupplyFilter
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Use_GateHeater
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Use_VortexDiff
VM_PUSH_IMM USINT 0
VM_POP USINT X temp_DLE_CoolType
VM_PUSH_IMM USINT 0
VM_POP USINT X temp_DLE_HeatType
VM_JUMP L955
VM_LABEL L959
VM_PUSH_IMM BOOL 0
VM_POP BOOL X show_Use_ExhaustFilter
VM_PUSH_IMM BOOL 0
VM_POP BOOL X show_Use_Sensor_CO2
VM_PUSH_IMM BOOL 0
VM_POP BOOL X show_Use_Sensor_Troom2
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Use_ExhaustFilter
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Use_Sensor_CO2
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Use_Sensor_Troom2
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Use_SupplyFilter
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Use_GateHeater
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Use_VortexDiff
VM_PUSH_IMM USINT 0
VM_POP USINT X temp_DLE_CoolType
VM_PUSH_IMM USINT 0
VM_POP USINT X temp_DLE_HeatType
VM_JUMP L955
VM_LABEL L960
VM_PUSH_IMM BOOL 1
VM_POP BOOL X show_Use_ExhaustFilter
VM_PUSH_IMM BOOL 0
VM_POP BOOL X show_Use_Sensor_CO2
VM_PUSH_IMM BOOL 0
VM_POP BOOL X show_Use_Sensor_Troom2
VM_PUSH_IMM BOOL 1
VM_POP BOOL X temp_Use_ExhaustFilter
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Use_Sensor_CO2
VM_PUSH_IMM BOOL 1
VM_POP BOOL X temp_Use_Sensor_Troom2
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Use_SupplyFilter
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Use_GateHeater
VM_PUSH_IMM BOOL 0
VM_POP BOOL X temp_Use_VortexDiff
VM_PUSH_IMM USINT 0
VM_POP USINT X temp_DLE_CoolType
VM_PUSH_IMM USINT 0
VM_POP USINT X temp_DLE_HeatType
VM_LABEL L955
VM_JUMP L961
VM_LABEL L954
; ELSE
EF_COMPARE
; END_IF
VM_LABEL L961
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MakeChoice
VM_PUSH_IMM USINT 3
VM_POP USINT EF NextCycleAction
VM_RTS

; REF_Config_Confirm_PRG()
VM_FUNCTION _REF_Config_Confirm_PRG_
VM_DATA 0
VM_PUSH_IMM USINT 6
VM_JSR _ShowPopUpQuestion_USINT_
VM_RTS

; Decrement()
VM_FUNCTION _Decrement_
VM_DATA 0
VM_JSR _Decrement_BYTE_
VM_PUSH_IMM BOOL 1
VM_POP BOOL X downArrow
VM_RTS

; Increment()
VM_FUNCTION _Increment_
VM_DATA 0
VM_JSR _Increment_BYTE_
VM_PUSH_IMM BOOL 1
VM_POP BOOL X upArrow
VM_RTS

; BoolDown()
VM_FUNCTION _BoolDown_
VM_DATA 0
VM_JSR _BoolSwap_
VM_PUSH_IMM BOOL 1
VM_POP BOOL X downArrow
VM_RTS

; BoolUp()
VM_FUNCTION _BoolUp_
VM_DATA 0
VM_JSR _BoolSwap_
VM_PUSH_IMM BOOL 1
VM_POP BOOL X upArrow
VM_RTS

; FConfigSetBool()
VM_FUNCTION _FConfigSetBool_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MakeChoice
VM_PUSH_IMM USINT 3
VM_POP USINT EF NextCycleAction
VM_RTS

; FConfigSetByte()
VM_FUNCTION _FConfigSetByte_
VM_DATA 0
EF_COMPARE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MakeChoice
VM_PUSH_IMM USINT 3
VM_POP USINT EF NextCycleAction
VM_RTS

; FConfigSetPriority()
VM_FUNCTION _FConfigSetPriority_
VM_DATA 0
EF_COMPARE
VM_PUSH_IMM USINT 6
VM_POP USINT EF NextCycleAction
VM_RTS

; FConfig_LastMask()
VM_FUNCTION _FConfig_LastMask_
VM_DATA 0
EF_COMPARE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MakeChoice
; IF
VM_PUSH BOOL X En_POOL
VM_JZ L963
; THEN
VM_PUSH_IMM USINT 6
VM_POP USINT EF NextCycleAction
VM_JUMP L964
VM_LABEL L963
; ELSE
VM_PUSH_IMM USINT 5
VM_POP USINT EF NextCycleAction
; END_IF
VM_LABEL L964
VM_RTS

; FConfig_ESC()
VM_FUNCTION _FConfig_ESC_
VM_DATA 0
; IF
VM_PUSH BOOL X CompletePreConfig
VM_JZ L966
; THEN
VM_PUSH_IMM USINT 12
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L967
VM_LABEL L966
; ELSE
VM_PUSH_IMM USINT 2
VM_POP USINT X StatePRG
VM_PUSH_IMM BOOL 0
VM_POP BOOL X MakeChoice
VM_PUSH_IMM USINT 7
VM_JSR _ShowPopUpQuestion_USINT_
; END_IF
VM_LABEL L967
VM_RTS

; Decrement_Priority()
VM_FUNCTION _Decrement_Priority_
VM_DATA 0
; IF
VM_PUSH BOOL X show_WorkPriority
VM_JZ L969
; THEN
VM_JSR _Decrement_BYTE_
EF_COMPARE
VM_JSR _WorkPriority_
VM_POP_AWAY BOOL
VM_PUSH_IMM BOOL 1
VM_POP BOOL X downArrow
VM_LABEL L969
; END_IF
VM_RTS

; Increment_Priority()
VM_FUNCTION _Increment_Priority_
VM_DATA 0
; IF
VM_PUSH BOOL X show_WorkPriority
VM_JZ L970
; THEN
VM_JSR _Increment_BYTE_
EF_COMPARE
VM_JSR _WorkPriority_
VM_POP_AWAY BOOL
VM_PUSH_IMM BOOL 1
VM_POP BOOL X upArrow
VM_LABEL L970
; END_IF
VM_RTS

; Priority_Mask_Confirm()
VM_FUNCTION _Priority_Mask_Confirm_
VM_DATA 0
VM_PUSH_IMM USINT 6
VM_POP USINT EF NextCycleAction
VM_RTS

; ENTER_UP_goto10()
VM_FUNCTION _ENTER_UP_goto10_
VM_DATA 0
VM_JSR _Move_UP_
EF_GOTO_CURSOR 0 10
VM_RTS

; ENTER_DOWN_goto10()
VM_FUNCTION _ENTER_DOWN_goto10_
VM_DATA 0
VM_JSR _Move_DOWN_
EF_GOTO_CURSOR 0 10
VM_RTS

; Set_WorkPriority()
VM_FUNCTION _Set_WorkPriority_
VM_DATA 0
VM_PUSH DINT X temp_SEQ_Order[1]
VM_POP DINT X SEQ_Order[1]
VM_PUSH DINT X temp_SEQ_Order[2]
VM_POP DINT X SEQ_Order[2]
VM_PUSH DINT X temp_SEQ_Order[3]
VM_POP DINT X SEQ_Order[3]
VM_PUSH DINT X temp_SEQ_Order[4]
VM_POP DINT X SEQ_Order[4]
VM_PUSH DINT X temp_SEQ_Order[5]
VM_POP DINT X SEQ_Order[5]
VM_PUSH DINT X temp_SEQ_Order[6]
VM_POP DINT X SEQ_Order[6]
VM_RTS

; Equipment_Priority_Mask()
VM_FUNCTION _Equipment_Priority_Mask_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L971
; THEN
; IF
VM_PUSH BOOL X Use_Sensor_CO2
VM_JZ L972
; THEN
VM_JUMP L973
VM_LABEL L972
; ELSE
EF_STORE_MASK
VM_PUSH_IMM USINT 3
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 2
VM_POP USINT EF NextCycleAction
; END_IF
VM_LABEL L973
VM_PUSH USINT X ModeSEQ
VM_POP USINT X temp_ModeSEQ
VM_PUSH DINT X SEQ_Order[1]
VM_POP DINT X temp_SEQ_Order[1]
VM_PUSH DINT X SEQ_Order[2]
VM_POP DINT X temp_SEQ_Order[2]
VM_PUSH DINT X SEQ_Order[3]
VM_POP DINT X temp_SEQ_Order[3]
VM_PUSH DINT X SEQ_Order[4]
VM_POP DINT X temp_SEQ_Order[4]
VM_PUSH DINT X SEQ_Order[5]
VM_POP DINT X temp_SEQ_Order[5]
VM_PUSH DINT X SEQ_Order[6]
VM_POP DINT X temp_SEQ_Order[6]
VM_PUSH BOOL X Use_ExhaustFilter
VM_POP BOOL X temp_Use_ExhaustFilter
VM_PUSH BOOL X Use_Sensor_CO2
VM_POP BOOL X temp_Use_Sensor_CO2
VM_PUSH BOOL X Use_Sensor_Troom2
VM_POP BOOL X temp_Use_Sensor_Troom2
VM_PUSH BOOL X Use_SupplyFilter
VM_POP BOOL X temp_Use_SupplyFilter
VM_PUSH BOOL X Use_GateHeater
VM_POP BOOL X temp_Use_GateHeater
VM_PUSH BOOL X Use_VortexDiff
VM_POP BOOL X temp_Use_VortexDiff
VM_PUSH USINT X DLE_CoolType
VM_POP USINT X temp_DLE_CoolType
VM_PUSH USINT X DLE_HeatType
VM_POP USINT X temp_DLE_HeatType
VM_JUMP L975
VM_LABEL L971
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L976
; THEN
VM_JSR _Set_WorkPriority_
VM_PUSH_IMM USINT 1
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT EF NextCycleAction
VM_LABEL L976
; END_IF
VM_LABEL L975
VM_RTS

; CO2_SWAP()
VM_FUNCTION _CO2_SWAP_
VM_DATA 0
VM_JSR _BoolSwap_
VM_PUSH BOOL X Use_Sensor_CO2
VM_NOT BOOL
VM_POP BOOL X show_WorkPriority
VM_RTS

; SWAP_Sp100()
VM_FUNCTION _SWAP_Sp100_
VM_DATA 0
VM_JSR _BoolSwap_
; IF
VM_PUSH BOOL X mod_WCoil.loc_MODE_A_B
VM_DUP BOOL
VM_JZ L978
VM_POP_AWAY BOOL
VM_PUSH BOOL X Par_Sp100
VM_LABEL L978
VM_JZ L977
; THEN
VM_PUSH_IMM USINT 12
VM_PUSH USINT EF SHORT_POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Par_Sp100
VM_LABEL L977
; END_IF
VM_RTS

; SWAP_Tp10()
VM_FUNCTION _SWAP_Tp10_
VM_DATA 0
VM_JSR _BoolSwap_
; IF
VM_PUSH BOOL X Use_Sensor_Troom2
VM_NOT BOOL
VM_DUP BOOL
VM_JNZ L980
VM_POP_AWAY BOOL
VM_PUSH INT X BRK_SensorTroom2
VM_PUSH_IMM INT 10
VM_CMP_NE INT
VM_LABEL L980
VM_JZ L979
; THEN
; IF
VM_PUSH BOOL X Par_Tp10
VM_NOT BOOL
VM_JZ L981
; THEN
VM_PUSH_IMM USINT 11
VM_PUSH USINT EF SHORT_POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Par_Tp10
VM_LABEL L981
; END_IF
VM_LABEL L979
; END_IF
VM_RTS

; __INIT__()
VM_FUNCTION ___INIT___
VM_DATA 0
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
VM_PUSH_IMM INT 1
VM_POP INT X IdxImgQM
VM_PUSH_IMM BOOL 1
VM_POP BOOL X show_Use_ExhaustFilter
VM_PUSH_IMM BOOL 1
VM_POP BOOL X show_Use_Sensor_CO2
VM_PUSH_IMM BOOL 0
VM_POP BOOL X show_Use_Sensor_Troom2
VM_PUSH_IMM INT 3
VM_POP INT EF GROUP_MENU_ITEMS_NO
VM_PUSH_IMM INT 5
VM_POP INT EF QUICK_MENU_ITEMS_NO
VM_PUSH_IMM INT 9
VM_POP INT EF HIDE_SERVICE_MENU_ITEMS_NO
VM_PUSH_IMM INT 1
VM_POP INT EF IdxQM
VM_PUSH_IMM USINT 5
VM_POP USINT EF POPUP_TIME
VM_PUSH_IMM USINT 2
VM_POP USINT EF SHORT_POPUP_TIME
VM_PUSH_IMM INT 2
VM_POP INT EF FRIDGE_MENU_ITEMS_NO
VM_PUSH_IMM INT 2
VM_POP INT EF MCLIMATE_MENU_ITEMS_NO
VM_PUSH_IMM INT 2
VM_POP INT EF IOMANAGE_MENU_ITEMS_NO
VM_PUSH_IMM INT 4
VM_POP INT EF CONFIGURATOR_MENU_ITEMS_NO
VM_RTS
