VM_JSR _Move_DOWN_
VM_WORD_DIR 65535
VM_JSR _Move_UP_
VM_WORD_DIR 65535
VM_JSR _BoolSwap_
VM_WORD_DIR 65535
VM_JSR _SetCurrentValue_
VM_WORD_DIR 65535
VM_JSR _Increment_BYTE_
VM_WORD_DIR 65535
VM_JSR _Decrement_BYTE_
VM_WORD_DIR 65535
VM_JSR _Increment_WORD_
VM_WORD_DIR 65535
VM_JSR _Decrement_WORD_
VM_WORD_DIR 65535
VM_JSR _Increment_DWORD_
VM_WORD_DIR 65535
VM_JSR _Decrement_DWORD_
VM_WORD_DIR 65535
VM_JSR _Increment_REAL_0_
VM_WORD_DIR 65535
VM_JSR _Decrement_REAL_0_
VM_WORD_DIR 65535
VM_JSR _Increment_REAL_1_
VM_WORD_DIR 65535
VM_JSR _Decrement_REAL_1_
VM_WORD_DIR 65535
VM_JSR _Increment_REAL_2_
VM_WORD_DIR 65535
VM_JSR _Decrement_REAL_2_
VM_WORD_DIR 65535
VM_JSR _TIMED_LOOP_
VM_WORD_DIR 65535
VM_JSR _PopUpQuestion_Confirm_
VM_WORD_DIR 65535
VM_JSR _PopUpQuestion_Reject_
VM_WORD_DIR 65535
VM_JSR _PopUp_ESC_
VM_WORD_DIR 65535
VM_JSR _LangMsk_Esc_
VM_WORD_DIR 65535
VM_JSR _Lang_Rus_
VM_WORD_DIR 65535
VM_JSR _Lang_Eng_
VM_WORD_DIR 65535
VM_JSR _GotoMain_
VM_WORD_DIR 65535
VM_JSR _CheckActiveAlarm_
VM_WORD_DIR 65535
VM_JSR _gotoAlarmLog_
VM_WORD_DIR 65535
VM_JSR _Slave_Alrms_Esc_
VM_WORD_DIR 65535
VM_JSR _DoNothing_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarmLog_UP_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarmLog_DOWN_
VM_WORD_DIR 65535
VM_JSR _LedBlink_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarm_UP_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarm_DOWN_
VM_WORD_DIR 65535
VM_JSR _ResetGlobalAlarm_
VM_WORD_DIR 65535
VM_JSR _Slave_Alrms_ALARM_
VM_WORD_DIR 65535
VM_JSR _Slave_Alrms_UP_
VM_WORD_DIR 65535
VM_JSR _Slave_Alrms_DOWN_
VM_WORD_DIR 65535
VM_JSR _GotoMainMenu_
VM_WORD_DIR 65535
VM_JSR _QuickMenuUP_
VM_WORD_DIR 65535
VM_JSR _QuickMenuDOWN_
VM_WORD_DIR 65535
VM_JSR _QuickMenuENT_
VM_WORD_DIR 65535
VM_JSR _CompareOnly_
VM_WORD_DIR 65535
VM_JSR _Move_CurLeft_
VM_WORD_DIR 65535
VM_JSR _Move_CurRight_
VM_WORD_DIR 65535
VM_JSR _NetMapEsc_
VM_WORD_DIR 65535
VM_JSR _GlobalEsc_
VM_WORD_DIR 65535
VM_JSR _OnOffSwitch_UP_
VM_WORD_DIR 65535
VM_JSR _OnOffSwitch_DOWN_
VM_WORD_DIR 65535
VM_JSR _Set_PRG_
VM_WORD_DIR 65535
VM_JSR _Set_UP_
VM_WORD_DIR 65535
VM_JSR _Set_DOWN_
VM_WORD_DIR 65535
VM_JSR _SET_ENTER_
VM_WORD_DIR 65535
VM_JSR _SlaveSet_ENTER_
VM_WORD_DIR 65535
VM_JSR _SlaveState_ALARM_
VM_WORD_DIR 65535
VM_JSR _SlaveState_PRG_
VM_WORD_DIR 65535
VM_JSR _DOWN_button_
VM_WORD_DIR 65535
VM_JSR _UP_button_
VM_WORD_DIR 65535
VM_JSR _PwdLogOut_
VM_WORD_DIR 65535
VM_JSR _PwdLogIn_
VM_WORD_DIR 65535
VM_JSR _DecrDig_
VM_WORD_DIR 65535
VM_JSR _IncrDig_
VM_WORD_DIR 65535
VM_JSR _PRG_button_
VM_WORD_DIR 65535
VM_JSR _SetTimeZoneRu_
VM_WORD_DIR 65535
VM_JSR _SetTimeZone_
VM_WORD_DIR 65535
VM_JSR _TZUp_
VM_WORD_DIR 65535
VM_JSR _TZDwn_
VM_WORD_DIR 65535
VM_JSR _Date_PRG_button_
VM_WORD_DIR 65535
VM_JSR _EnDateChg_
VM_WORD_DIR 65535
VM_JSR _SlaveSet_ESC_
VM_WORD_DIR 65535
VM_JSR _SlaveSet_PRG_
VM_WORD_DIR 65535
VM_JSR _SlaveSet_UP_
VM_WORD_DIR 65535
VM_JSR _SlaveSet_ALARM_
VM_WORD_DIR 65535
VM_JSR _SlaveSet_DOWN_
VM_WORD_DIR 65535
VM_JSR _ChgPwd_
VM_WORD_DIR 65535
VM_JSR _SetUoMZone_UI_
VM_WORD_DIR 65535
VM_JSR _ENTER_button_
VM_WORD_DIR 65535
VM_JSR _DeleteAlarmLog_
VM_WORD_DIR 65535
VM_JSR _ClearAutoResetCounter_
VM_WORD_DIR 65535
VM_JSR _WipeMem_
VM_WORD_DIR 65535
VM_JSR _ParamImpExp_
VM_WORD_DIR 65535
VM_JSR _AlrmExp_
VM_WORD_DIR 65535
VM_JSR _Sched_UP_
VM_WORD_DIR 65535
VM_JSR _Sched_DOWN_
VM_WORD_DIR 65535
VM_JSR _Sched_ENTER_
VM_WORD_DIR 65535
VM_JSR _Sched_PRG_
VM_WORD_DIR 65535
VM_JSR _Schedule_1_ESC_
VM_WORD_DIR 65535
VM_JSR _Upgrade_1_ENTER_
VM_WORD_DIR 65535
VM_JSR _Upgrade_1_PRG_
VM_WORD_DIR 65535
VM_JSR _NetMap_ENTER_
VM_WORD_DIR 65535
VM_JSR _SlaveState_ESC_
VM_WORD_DIR 65535
VM_JSR _DeviceRole_Class_PRG_
VM_WORD_DIR 65535
VM_JSR _DeviceRole_Class_ENTER_
VM_WORD_DIR 65535
VM_JSR _Main_Testing_ESC_
VM_WORD_DIR 65535
VM_JSR _Testing_ESC_
VM_WORD_DIR 65535
VM_JSR _Port_Sel_ENTER_
VM_WORD_DIR 65535
VM_JSR _MB_Settings_1_PRG_
VM_WORD_DIR 65535
VM_JSR _MB_Settings_1_ESC_
VM_WORD_DIR 65535
VM_JSR _Upgrade_OS_ESC_
VM_WORD_DIR 65535
VM_JSR _Upgrade_OS_PRG_
VM_WORD_DIR 65535
VM_JSR _DOWN_ENTER_Move_
VM_WORD_DIR 65535
VM_JSR _UP_ENTER_Move_
VM_WORD_DIR 65535
VM_JSR _Decrement_
VM_WORD_DIR 65535
VM_JSR _Increment_
VM_WORD_DIR 65535
VM_JSR _Param_UP_
VM_WORD_DIR 65535
VM_JSR _Param_DOWN_
VM_WORD_DIR 65535
VM_JSR _Param_ENTER_
VM_WORD_DIR 65535
VM_JSR _Param_ESC_
VM_WORD_DIR 65535
VM_JSR _Param_PRG_
VM_WORD_DIR 65535
VM_JSR _ConfigMenu_UP_
VM_WORD_DIR 65535
VM_JSR _ConfigMenu_DOWN_
VM_WORD_DIR 65535
VM_JSR _ConfigMenu_ENTER_
VM_WORD_DIR 65535
VM_JSR _ConfigMenu_ESC_
VM_WORD_DIR 65535
VM_JSR _Signal_DOWN_
VM_WORD_DIR 65535
VM_JSR _Signal_UP_
VM_WORD_DIR 65535
VM_JSR _Signal_ESC_
VM_WORD_DIR 65535
VM_JSR _Signal_ENTER_
VM_WORD_DIR 65535
VM_JSR _Control_Mode_UP_
VM_WORD_DIR 65535
VM_JSR _Control_Mode_DOWN_
VM_WORD_DIR 65535
VM_JSR _Control_Mode_ENTER_
VM_WORD_DIR 65535
VM_JSR _Schedule_Manage_UP_
VM_WORD_DIR 65535
VM_JSR _Schedule_Manage_DOWN_
VM_WORD_DIR 65535
VM_JSR _Schedule_Manage_ENTER_
VM_WORD_DIR 65535
VM_JSR _IO_DOWN_
VM_WORD_DIR 65535
VM_JSR _IO_UP_
VM_WORD_DIR 65535
VM_JSR _IO_PRG_
VM_WORD_DIR 65535
VM_JSR _IO_ENTER_
VM_WORD_DIR 65535
VM_JSR _CORR_DOWN_
VM_WORD_DIR 65535
VM_JSR _CORR_UP_
VM_WORD_DIR 65535
VM_JSR _CORR_PRG_
VM_WORD_DIR 65535
VM_JSR _CORR_ENTER_
VM_WORD_DIR 65535
VM_JSR _MainMenu_DOWN_
VM_WORD_DIR 65535
VM_JSR _MainMenu_UP_
VM_WORD_DIR 65535
VM_JSR _MainMenu_ENTER_
VM_WORD_DIR 65535
VM_JSR _MainMenu_ESC_
VM_WORD_DIR 65535
VM_JSR _Hide_Baudrate_Class_DOWN_
VM_WORD_DIR 65535
VM_JSR _Hide_Baudrate_Class_UP_
VM_WORD_DIR 65535
VM_JSR _Net_Settings_ESC_
VM_WORD_DIR 65535
VM_JSR _Net_Settings_PRG_
VM_WORD_DIR 65535
VM_JSR _Stats_1_UP_
VM_WORD_DIR 65535
VM_JSR _Stats_1_DOWN_
VM_WORD_DIR 65535
VM_JSR _Stats_1_PRG_
VM_WORD_DIR 65535
VM_JSR _EthernetConfig_Mask_ESC_
VM_WORD_DIR 65535
VM_JSR _EthernetConfig_Mask_PRG_
VM_WORD_DIR 65535
VM_JSR _Res_Slave_Settings_Mask_ESC_
VM_WORD_DIR 65535
VM_JSR _Res_Slave_Settings_Mask_PRG_
VM_WORD_DIR 65535
VM_JSR _Hide_DHCP_BOOL_SWAP_Class_ENTER_
VM_WORD_DIR 65535
VM_JSR _Sequences_Mask_DOWN_
VM_WORD_DIR 65535
VM_JSR _Sequences_Mask_UP_
VM_WORD_DIR 65535
VM_JSR _Preset_PRG_
VM_WORD_DIR 65535
VM_JSR _Preset_DOWN_
VM_WORD_DIR 65535
VM_JSR _Preset_UP_
VM_WORD_DIR 65535
VM_JSR _Preset_ENTER_
VM_WORD_DIR 65535
VM_JSR _Main_Mask_ESC_DOWN_
VM_WORD_DIR 65535
VM_JSR _Goto_FRIDGE_STATS_
VM_WORD_DIR 65535
VM_JSR _SwitchPGD_
VM_WORD_DIR 65535
VM_JSR ___INIT___
VM_WORD_DIR 65535

DCL BOOL X dummy
DCL UINT X PwdIn
DCL INT X PwdRes
DCL BOOL X EnLogOut
DCL BOOL X EnPwdChgU
DCL BOOL X EnPwdChgS
DCL BOOL X EnPwdChgM
DCL INT X PwdTyp
DCL INT X PwdTypMenu
DCL INT X IdxImgQM
DCL BOOL X ImpExpSel
DCL INT X EnImpExpTmp
DCL INT X LangTime
DCL BOOL X EnLangChg
DCL REAL X BoardTempMsk
DCL INT X EnAlrmExpTmp
DCL BOOL X En_WipeRetain
DCL BOOL X En_WipeNVRAM
DCL BOOL X En_WipeAll
DCL UINT X TimeZoneTmp
DCL UINT X TimeZoneTmpRu
DCL INT X SetTimeZoneTmp
DCL DINT X AlrmIdx
DCL DINT X AlrmCode
DCL DINT X AlrmLogsIdx
DCL DINT X AlrmLogCode
DCL USINT X AlrmLogEventType
DCL REAL X AlrmStoredVarReal1
DCL REAL X AlrmStoredVarReal2
DCL BOOL X EnStoredVar1_REAL
DCL BOOL X EnStoredVar2_REAL
DCL DINT X N_Alrms
DCL BOOL X ClrAutoResCounters
DCL BOOL X AlrmLogDelete
DCL BOOL X ShowTemp
DCL USINT X CurPosition
DCL BOOL X CurShow[1]
DCL BOOL X ModePRG
DCL BOOL X NotModePRG
DCL USINT X DTPopUp
DCL BOOL X Show_DTPopUp
DCL INT X PIC_Fan
DCL BOOL X PIC_RoleSlave
DCL USINT X temp_Role
DCL BOOL X temp_En_Schedule
DCL USINT X Temp_MB_port
DCL BOOL X En_MB_Ethernet
DCL BOOL X En_MB_BMS
DCL USINT X Temp_MB_Address
DCL UDINT X Temp_MB_Baudrate
DCL USINT X Temp_MB_StopBits
DCL USINT X Temp_MB_Parity
DCL BOOL X upArrow
DCL BOOL X downArrow
DCL USINT X PopUp_Message
DCL USINT X PopUp_Question
DCL BOOL X hide_PassDigit1
DCL BOOL X hide_PassDigit2
DCL BOOL X hide_PassDigit3
DCL BYTE X __SYSVA_TMP_VALUE
DCL INT X __SYSVA_KEY_COUNTER
DCL WORD X __SYSVA_TMP_VALUE
DCL DWORD X __SYSVA_TMP_VALUE
DCL REAL X __SYSVA_TMP_VALUE
DCL USINT X StatePRG
DCL USINT EF STATE_PRG_READY
DCL USINT EF STATE_PRG_ALWAYS_ON
DCL USINT EF STATE_PRG_ON
DCL BOOL EF En_PopUpTimer
DCL USINT EF popup_StatePRG
DCL BOOL EF ReturnToPrevMask
DCL USINT X MaskIDLevel
DCL USINT X MaskIDStore[0]
DCL UINT X Display.MaskID
DCL BOOL X SystemPause
DCL INT EF IncrTmp
DCL BOOL X MainMenuVisibility_Is_Set
DCL BOOL X ParamVisibility_Is_Set
DCL BOOL X getMainMenu
DCL USINT EF STATE_PRG_OFF
DCL BOOL X LocalMode
DCL BOOL X Role_Slave
DCL BOOL X UnitOff
DCL USINT X MaskMng.LoadMaskMode
DCL BOOL X ConfigMng.checkConfigFile
DCL BOOL X IsConfigChanged
DCL BOOL X load_Config
DCL BOOL X save_Config
DCL DINT X CurMenuPoint
DCL DINT X Display.Path.MenuPoint[0]
DCL USINT X CurLevel
DCL DINT X Position
DCL DINT X Display.Path.Position[0]
DCL DINT X CurRow
DCL DINT X Display.Path.Row[0]
DCL DINT X CurRow_modePRG
DCL DINT X Display.Path.Row_PRG[0]
DCL UINT X Display.Descr[1]
DCL USINT EF POPUP_TIME
DCL BOOL X read_EthernetSettings
DCL BOOL X En_Schedule
DCL DINT EF AlrmLogsTot
DCL DINT X AlarmMng.AlrmLogTime
DCL DINT EF infoLogOk
DCL DINT EF LastValidRecord
DCL DINT X CurList_Position
DCL USINT EF ConfigStartLevel
DCL BOOL X getConfigMenu
DCL BOOL X getIOList
DCL BOOL X UnitOn
DCL BOOL X getParam
DCL USINT X Role
DCL BOOL X Role_Master
DCL USINT X Num_Slaves
DCL USINT X CurSlave
DCL BOOL X CurSlaveShow
DCL USINT X CurParam
DCL BOOL X getParamMenu
DCL DINT X cnt_Items
DCL DINT X Display.Index
DCL BOOL X MaskMng.getCorrList
DCL BOOL X is_TOP
DCL USINT X Ethernet.Protocol[1]
DCL USINT X MB_port
DCL USINT X BMS_card.Protocol
DCL USINT X BMS2.Protocol
DCL USINT X MB_Address
DCL BOOL EF En_MB_BMS_Card
DCL BOOL EF En_MB_BMS2
DCL UDINT X BMS_card.Baudrate
DCL USINT X BMS_card.StopBits
DCL USINT X BMS_card.Parity
DCL UDINT X BMS2.Baudrate
DCL USINT X BMS2.StopBits
DCL USINT X BMS2.Parity
DCL BOOL X isUSB
DCL BYTE X Upgrade.UpgradeDrive
DCL BOOL X Upgrade.Check_Upgrade
DCL USINT X NextCycleAction
DCL USINT EF SHORT_POPUP_TIME
DCL BOOL X IsDLE
DCL USINT X Mode_Control
DCL USINT X temp_Mode_Control
DCL BOOL X MaskMng.setStatePRG
DCL UDINT X FBus2.Baudrate
DCL USINT X FBus2.Parity
DCL USINT X FBus2.StopBits
DCL UINT X Display.Hint
DCL BOOL X getIOConfig
DCL BOOL X MaskMng.get_Slave_IP
DCL USINT X MaskIDStore[1]
DCL USINT X MaskIDStore[2]
DCL USINT X MaskIDStore[3]
DCL USINT X MaskIDStore[4]
DCL USINT X MaskIDStore[5]
DCL USINT X MaskIDStore[6]
DCL USINT X MaskIDStore[7]
DCL USINT X MaskIDStore[8]
DCL USINT X MaskIDStore[9]
DCL DINT X Display.Path.MenuPoint[1]
DCL DINT X Display.Path.Position[1]
DCL DINT X Display.Path.Row[1]
DCL DINT X Display.Path.MenuPoint[2]
DCL DINT X Display.Path.Position[2]
DCL DINT X Display.Path.Row[2]
DCL DINT X Display.Path.MenuPoint[3]
DCL DINT X Display.Path.Position[3]
DCL DINT X Display.Path.Row[3]
DCL DINT X Display.Path.MenuPoint[4]
DCL DINT X Display.Path.Position[4]
DCL DINT X Display.Path.Row[4]
DCL DINT X Display.Path.MenuPoint[5]
DCL DINT X Display.Path.Position[5]
DCL DINT X Display.Path.Row[5]
DCL DINT X Display.Path.MenuPoint[6]
DCL DINT X Display.Path.Position[6]
DCL DINT X Display.Path.Row[6]
DCL DINT X Display.Path.MenuPoint[7]
DCL DINT X Display.Path.Position[7]
DCL DINT X Display.Path.Row[7]
DCL DINT X Display.Path.MenuPoint[8]
DCL DINT X Display.Path.Position[8]
DCL DINT X Display.Path.Row[8]
DCL DINT X Display.Path.MenuPoint[9]
DCL DINT X Display.Path.Position[9]
DCL DINT X Display.Path.Row[9]
DCL DINT X Display.Path.MenuPoint[10]
DCL DINT X Display.Path.Position[10]
DCL DINT X Display.Path.Row[10]
DCL BOOL EF isActiveAlarmLoop
DCL BOOL EF isNoAlarmMask
DCL USINT EF PopUpKeyDelay
DCL USINT X __SYSVA_KEY_PRESSED
DCL BOOL EF autoHideArrowsOff
DCL BOOL X ManualManage
DCL BOOL X MaskMng.reset_ManualMode
DCL BOOL X MaskMng.reset_ManualMode_Outputs
DCL USINT X Show_Message.Num
DCL USINT X Show_Message.Time
DCL BOOL X Show_Message.Esc
DCL USINT X Show_Message.LastNum
DCL USINT X Show_Question.Num
DCL BOOL X Show_Question.Esc
DCL USINT X Show_Question.LastNum
DCL USINT X LoadMask.MaskID
DCL USINT X LoadMask.Param
DCL BOOL X En_Reboot
DCL BOOL EF checkZeroColumn
DCL INT X __SYSVA_CURSOR_COLUMN
DCL INT X __SYSVA_CURSOR_ROW
DCL BOOL X FWMismatch
DCL BOOL EF old_FWMismatch
DCL BOOL X NoConnect
DCL BOOL X EQ_Fans.Supply.DO
DCL BOOL X EQ_Fans.Exhaust.DO
DCL BOOL X FLR_FanSupplyTK.Active
DCL BOOL X FLR_FanExhTK.Active
DCL USINT X CurState
DCL BOOL X MaskMng.SlaveNoAlarms
DCL BOOL X BootEnd
DCL BOOL X firstConfig
DCL DINT X GeneralMng.ID_Lang
DCL BOOL EF enConfigMask
DCL BOOL X isConfigMenu
DCL BOOL X RetainIsClear
DCL BOOL EF enEndDef
DCL BOOL EF enLogo
DCL INT EF LogoTime
DCL BOOL X StartupJmp
DCL BOOL X GeneralMng.VerMismatch
DCL BOOL X isAlarm
DCL DINT EF N_Alrms_Prev
DCL BOOL X GeneralMng.RESERVED3
DCL USINT X __SYSVA_MANUAL_BUZZER_ON
DCL USINT X __SYSVA_MANUAL_BUZZER_OFF
DCL BOOL EF EnCheckAlarm
DCL DINT X AlarmMng.AlrmTime
DCL BOOL X AlarmMng.AlrmResByPGD1
DCL INT EF DTQM
DCL INT EF QUICK_MENU_ITEMS_NO
DCL INT EF DTRetMain
DCL INT EF CntDwnPwdTypMenu
DCL BOOL EF En_CheckAlrm_Reset
DCL REAL X GeneralMng.BoardTemp_Msk
DCL UDINT X GeneralMng.BoardTyp[1]
DCL BOOL EF FirstCycleDone
DCL DINT X STD_UOM_ZONE_UI
DCL BOOL X GeneralMng.Reset_Params
DCL USINT EF temp_HeatType
DCL USINT X HeatType
DCL USINT X FBus2.Protocol
DCL BOOL X write_EthernetSettings
DCL BOOL X Reset_Hours_Circ1_Comp[1]
DCL BOOL X Reset_Hours_Circ1_Comp[2]
DCL BOOL X Reset_Hours_Circ1_Comp[3]
DCL BOOL EF isPasswordRequest
DCL BOOL X ConfigMng.clearConfig
DCL BOOL X ConfigMng.setRButtons
DCL BOOL X ConfigMng.setDefaultChoice
DCL BOOL X ConfigMng.release_IO
DCL BOOL X ConfigMng.ConfigVerify
DCL BYTE X Upgrade.CurDrive
DCL BOOL X Upgrade.restoreParam
DCL BOOL X Upgrade.storeParam
DCL BOOL X MaskMng.setChanges
DCL BYTE X ConfigMng.CurDrive
DCL BOOL X LangRu
DCL BOOL X LangEn
DCL BOOL X CurSlaveAlarmShow
DCL DINT EF AlrmLogsIdxTemp
DCL DINT EF AlrmLogInfoErr
DCL DINT EF AlrmLogCodeTemp
DCL USINT EF AlrmLogEventTypeTemp
DCL DINT EF AlrmLogTimeTemp
DCL BOOL EF Cmd_ResetAlarms
DCL BOOL X Reserve.Use
DCL BOOL X KeybOnOff
DCL BOOL X SlaveAlrmRes[1]
DCL DINT X Slave_AlrmIdx
DCL DINT X Slave_N_Alrms
DCL UINT EF DF_MID_MMENU
DCL INT EF IdxQM
DCL USINT X ModelLine
DCL BOOL X EQ_Humid.Use
DCL BOOL X setParam
DCL REAL X Display.value_REAL[1]
DCL REAL X Display.value_MaxREAL[1]
DCL REAL X Display.value_MinREAL[1]
DCL BOOL X ApplyCurSettings
DCL INT X WORDs_SlaveAlarms[1]
DCL BOOL X PwdDev
DCL UINT X GeneralMng.PwdUser
DCL UINT X GeneralMng.PwdService
DCL UINT X GeneralMng.RESERVED1
DCL UDINT X __SYSVA_TMP_VALUE
DCL BOOL X Prepare_2.EnPwdChgM
DCL BOOL X Prepare_2.EnPwdChgS
DCL BOOL X Prepare_2.EnPwdChgU
DCL BOOL X FLR_Disc_CTRL.Active
DCL UINT X GeneralMng.Zone_Write
DCL BOOL X GeneralMng.SetTimezone
DCL BOOL X GeneralMng.ReadTimezone
DCL UINT X GeneralMng.Second
DCL UINT X GeneralMng.SecondIn
DCL UINT X GeneralMng.Minute
DCL UINT X GeneralMng.MinuteIn
DCL UINT X GeneralMng.Hour
DCL UINT X GeneralMng.HourIn
DCL UINT X GeneralMng.Day
DCL UINT X GeneralMng.DayIn
DCL UINT X GeneralMng.Month
DCL UINT X GeneralMng.MonthIn
DCL UINT X GeneralMng.Year
DCL UINT X GeneralMng.YearIn
DCL UINT X GeneralMng.Zone_Read
DCL BOOL X GeneralMng.En_Date
DCL BOOL X TimeChangedLocal
DCL BOOL X En_TimeSync
DCL BOOL X GeneralMng.WritePwd
DCL UDINT X GeneralMng.WipeMem[1]
DCL BOOL X En_WipeMem
DCL BOOL X ImpExpMng.En_ParamsImp
DCL BOOL X ImpExpMng.En_ParamsExp
DCL BOOL X GeneralMng.En_AlrmExp
DCL UINT X CurDayOfWeek
DCL BOOL X MaskMng.Chg_Sched
DCL INT X MaskMng.Sched_ROW
DCL INT X MaskMng.Sched_COLUMN
DCL BOOL X MaskMng.getData
DCL BOOL X Upgrade.En_FirmWare
DCL BOOL X Upgrade.En_Upgrade
DCL BOOL X En_Testing
DCL BOOL X Upgrade.REQ_OS_upgrade
DCL BOOL X Upgrade.ANSW_OS_upgrade
DCL DINT X num_Rows
DCL BOOL X update_ParamMenu_List
DCL UINT X Display.value_Storage[1]
DCL USINT X Display.value_BOOL[1]
DCL INT X Display.value_INT[1]
DCL INT X Display.value_MinINT[1]
DCL INT X Display.value_MaxINT[1]
DCL BOOL X Param.BOOL[1]
DCL UINT X Display.value_Address[1]
DCL INT X Param.INT[1]
DCL REAL X Param.REAL[1]
DCL USINT X MaskMng.param_ChangeNotify
DCL BOOL X setConfigItem
DCL DINT X mask_List_pos
DCL UINT X mask_List[1]
DCL UINT X mask_List_Sec[1]
DCL BOOL X ConfigMng.recount_Types
DCL BOOL X recount_IO
DCL BOOL X getMinMax
DCL DINT X ConfigMng.mask_IO_List_pos
DCL DINT X ConfigMng.cnt_IO_Items
DCL USINT X ConfigMng.mask_IO_List[0]
DCL UINT X Display.Descr[2]
DCL DINT X ConfigMng.mask_TypeList_pos
DCL DINT X ConfigMng.cnt_TypeItems
DCL USINT X ConfigMng.mask_TypeList[0]
DCL UINT X Display.Descr[3]
DCL REAL X Display.value_REAL[4]
DCL REAL X Display.value_MinREAL[4]
DCL REAL X Display.value_MaxREAL[4]
DCL REAL X Display.value_REAL[5]
DCL REAL X Display.value_MinREAL[5]
DCL REAL X Display.value_MaxREAL[5]
DCL BOOL X ConfigMng.setIoItem
DCL BOOL X ConfigMng.setMinMax
DCL BOOL X IsPOOL
DCL USINT X Display.value_BOOL[2]
DCL BOOL X MaskMng.ValueWasChanged
DCL BOOL X Display.en_RealValue[1]
DCL BOOL X Display.en_IntValue[1]
DCL USINT X Display.value_BOOL[3]
DCL UINT X cfgIO.Link_toCodes[1]
DCL DINT X MaskMng.sig_start
DCL REAL X Display.value_REAL[8]
DCL INT X Display.value_INT[8]
DCL UINT X Display.UoM[1]
DCL BOOL X update_MainMenu_List
DCL USINT X Display.value_Type[1]
DCL UINT X Display.UoM[2]
DCL UINT X Display.UoM[3]
DCL UDINT X __SYSVA_TMP_VALUE
DCL BOOL X Ethernet.DHCP
DCL USINT X Display.MaskHeader
DCL USINT X Display.value_BOOL[7]
DCL USINT X MaskMng.gotoParam

; Move_DOWN()
VM_FUNCTION _Move_DOWN_
VM_DATA 0
EF_NEXT_MASK
VM_RTS

; Move_UP()
VM_FUNCTION _Move_UP_
VM_DATA 0
EF_PREVIOUS_MASK
VM_RTS

; BoolSwap()
VM_FUNCTION _BoolSwap_
VM_DATA 0
EF_SWAP
VM_RTS

; SetCurrentValue()
VM_FUNCTION _SetCurrentValue_
VM_DATA 0
EF_COMPARE
EF_NEXT_FIELD
VM_RTS

; Increment_BYTE()
VM_FUNCTION _Increment_BYTE_
VM_DATA 0
VM_PUSH BYTE X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT BYTE
VM_ADD BYTE
VM_POP BYTE X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_BYTE()
VM_FUNCTION _Decrement_BYTE_
VM_DATA 0
VM_PUSH BYTE X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT BYTE
VM_SUB BYTE
VM_POP BYTE X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_WORD()
VM_FUNCTION _Increment_WORD_
VM_DATA 0
VM_PUSH WORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT WORD
VM_ADD WORD
VM_POP WORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_WORD()
VM_FUNCTION _Decrement_WORD_
VM_DATA 0
VM_PUSH WORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT WORD
VM_SUB WORD
VM_POP WORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_DWORD()
VM_FUNCTION _Increment_DWORD_
VM_DATA 0
VM_PUSH DWORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DWORD
VM_ADD DWORD
VM_POP DWORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_DWORD()
VM_FUNCTION _Decrement_DWORD_
VM_DATA 0
VM_PUSH DWORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DWORD
VM_SUB DWORD
VM_POP DWORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_REAL_0()
VM_FUNCTION _Increment_REAL_0_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_ADD REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_REAL_0()
VM_FUNCTION _Decrement_REAL_0_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_SUB REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_REAL_1()
VM_FUNCTION _Increment_REAL_1_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_ADD REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_REAL_1()
VM_FUNCTION _Decrement_REAL_1_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_SUB REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_REAL_2()
VM_FUNCTION _Increment_REAL_2_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 100
VM_DIV REAL
VM_ADD REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_REAL_2()
VM_FUNCTION _Decrement_REAL_2_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 100
VM_DIV REAL
VM_SUB REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; ButtonsSupport()
VM_FUNCTION _ButtonsSupport_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L0
; THEN
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_JUMP L1
VM_LABEL L0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ALWAYS_ON
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L3
VM_POP_AWAY BOOL
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_LABEL L3
VM_JZ L2
; THEN
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_JUMP L4
VM_LABEL L2
; ELSE
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; END_IF
VM_LABEL L4
VM_LABEL L1
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ALWAYS_ON
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L7
VM_POP_AWAY BOOL
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_LABEL L7
VM_JZ L6
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ModePRG
VM_JUMP L8
VM_LABEL L6
; ELSE
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ModePRG
; END_IF
VM_LABEL L8
VM_PUSH BOOL X ModePRG
VM_NOT BOOL
VM_POP BOOL X NotModePRG
VM_RTS

; CleanPwd()
VM_FUNCTION _CleanPwd_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_POP BOOL X hide_PassDigit1
VM_PUSH_IMM BOOL 0
VM_POP BOOL X hide_PassDigit2
VM_PUSH_IMM BOOL 0
VM_POP BOOL X hide_PassDigit3
VM_RTS

; SaveMenuPos()
VM_FUNCTION _SaveMenuPos_
VM_DATA 0
VM_PUSH DINT X CurMenuPoint
VM_PUSH_AMP DINT X Display.Path.MenuPoint[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_POPI DINT
VM_PUSH DINT X Position
VM_PUSH_AMP DINT X Display.Path.Position[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_POPI DINT
VM_PUSH DINT X CurRow
VM_PUSH_AMP DINT X Display.Path.Row[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_POPI DINT
VM_PUSH DINT X CurRow_modePRG
VM_PUSH_AMP DINT X Display.Path.Row_PRG[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_POPI DINT
; IF
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L80
VM_POP_AWAY BOOL
VM_PUSH DINT X CurRow_modePRG
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L80
VM_JZ L79
; THEN
VM_PUSH_AMP UINT X Display.Descr[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_CAST UINT DINT
VM_POP DINT X CurMenuPoint
VM_JUMP L81
VM_LABEL L79
; IF
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L82
; THEN
VM_PUSH_AMP UINT X Display.Descr[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_CAST UINT DINT
VM_POP DINT X CurMenuPoint
VM_LABEL L82
; END_IF
VM_LABEL L81
; IF
VM_PUSH USINT X CurLevel
VM_PUSH_IMM USINT 10
VM_CMP_LT USINT
VM_JZ L83
; THEN
VM_PUSH USINT X CurLevel
VM_PUSH_IMM USINT 1
VM_ADD USINT
VM_POP USINT X CurLevel
VM_JUMP L84
VM_LABEL L83
; ELSE
VM_PUSH_IMM USINT 10
VM_POP USINT X CurLevel
; END_IF
VM_LABEL L84
VM_RTS

; ShowPopUpMessage(USINT, USINT, BOOL)
VM_FUNCTION _ShowPopUpMessage_USINT_USINT_BOOL_
VM_DATA 3
VM_POPL BOOL 2
VM_POPL USINT 1
VM_POPL USINT 0
VM_PUSH USINT X StatePRG
VM_POP USINT EF popup_StatePRG
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
; IF
VM_PUSHL BOOL 2
VM_JZ L76
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF ReturnToPrevMask
VM_JUMP L77
VM_LABEL L76
; ELSE
EF_STORE_MASK
VM_JSR _SaveMenuPos_
; END_IF
VM_LABEL L77
VM_PUSHL USINT 1
VM_POP USINT X DTPopUp
VM_PUSHL USINT 0
VM_POP USINT X PopUp_Message
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Show_DTPopUp
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF En_PopUpTimer
EF_GOTO_MASK PopUp_Message_Mask
VM_RTS

; CheckStoredVar_Log()
VM_FUNCTION _CheckStoredVar_Log_
VM_DATA 0
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM USINT 1
VM_PUSH_AMP REAL X AlrmStoredVarReal1
VM_SYSTEM 42
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L87
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnStoredVar1_REAL
VM_JUMP L88
VM_LABEL L87
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnStoredVar1_REAL
; END_IF
VM_LABEL L88
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM USINT 2
VM_PUSH_AMP REAL X AlrmStoredVarReal2
VM_SYSTEM 42
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L90
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnStoredVar2_REAL
VM_JUMP L91
VM_LABEL L90
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnStoredVar2_REAL
; END_IF
VM_LABEL L91
VM_RTS

; gotoAlarmLog()
VM_FUNCTION _gotoAlarmLog_
VM_DATA 0
VM_SYSTEM 39
VM_POP DINT EF AlrmLogsTot
; IF
VM_PUSH DINT EF AlrmLogsTot
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L86
; THEN
VM_PUSH_IMM DINT 1
VM_POP DINT X AlrmLogsIdx
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_AMP DINT X AlrmLogCode
VM_PUSH_AMP USINT X AlrmLogEventType
VM_PUSH_AMP DINT X AlarmMng.AlrmLogTime
VM_SYSTEM 40
VM_POP DINT EF infoLogOk
VM_JSR _CheckStoredVar_Log_
VM_JUMP L93
VM_LABEL L86
; ELSE
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmLogsIdx
VM_PUSH_IMM DINT -1
VM_POP DINT EF infoLogOk
; END_IF
VM_LABEL L93
; IF
VM_PUSH DINT EF infoLogOk
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L95
; THEN
VM_PUSH DINT X AlrmLogsIdx
VM_POP DINT EF LastValidRecord
EF_GOTO_MASK Alrms_Log
VM_JUMP L96
VM_LABEL L95
; ELSE
EF_GOTO_MASK Alrms_NoLog
; END_IF
VM_LABEL L96
VM_RTS

; Show_ports()
VM_FUNCTION _Show_ports_
VM_DATA 0
; IF
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_JZ L137
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_MB_Ethernet
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_MB_BMS_Card
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_MB_BMS2
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_MB_BMS
VM_JUMP L138
VM_LABEL L137
; IF
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L139
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_MB_Ethernet
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_MB_BMS_Card
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_MB_BMS2
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_MB_BMS
VM_JUMP L140
VM_LABEL L139
; IF
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_JZ L141
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_MB_Ethernet
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF En_MB_BMS_Card
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_MB_BMS2
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_MB_BMS
VM_PUSH UDINT X BMS_card.Baudrate
VM_POP UDINT X Temp_MB_Baudrate
VM_PUSH USINT X BMS_card.StopBits
VM_POP USINT X Temp_MB_StopBits
VM_PUSH USINT X BMS_card.Parity
VM_POP USINT X Temp_MB_Parity
VM_JUMP L142
VM_LABEL L141
; IF
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L143
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_MB_Ethernet
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_MB_BMS_Card
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF En_MB_BMS2
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_MB_BMS
VM_PUSH UDINT X BMS2.Baudrate
VM_POP UDINT X Temp_MB_Baudrate
VM_PUSH USINT X BMS2.StopBits
VM_POP USINT X Temp_MB_StopBits
VM_PUSH USINT X BMS2.Parity
VM_POP USINT X Temp_MB_Parity
VM_LABEL L143
; END_IF
VM_LABEL L142
VM_LABEL L140
VM_LABEL L138
VM_RTS

; ShowPopUpQuestion(USINT, BOOL)
VM_FUNCTION _ShowPopUpQuestion_USINT_BOOL_
VM_DATA 2
VM_POPL BOOL 1
VM_POPL USINT 0
; IF
VM_PUSHL BOOL 1
VM_JZ L172
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF ReturnToPrevMask
VM_JUMP L173
VM_LABEL L172
; ELSE
VM_PUSH USINT X StatePRG
VM_POP USINT EF popup_StatePRG
EF_STORE_MASK
; END_IF
VM_LABEL L173
VM_PUSH_IMM USINT 0
VM_POP USINT X StatePRG
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_PopUpTimer
VM_PUSHL USINT 0
VM_POP USINT X PopUp_Question
EF_GOTO_MASK PopUp_Question_Mask
VM_RTS

; ShowPopUpMessage(USINT, USINT)
VM_FUNCTION _ShowPopUpMessage_USINT_USINT_
VM_DATA 2
VM_POPL USINT 1
VM_POPL USINT 0
VM_PUSH USINT X StatePRG
VM_POP USINT EF popup_StatePRG
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
EF_STORE_MASK
VM_JSR _SaveMenuPos_
VM_PUSHL USINT 1
VM_POP USINT X DTPopUp
VM_PUSHL USINT 0
VM_POP USINT X PopUp_Message
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Show_DTPopUp
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF En_PopUpTimer
EF_GOTO_MASK PopUp_Message_Mask
VM_RTS

; LoadMaskID(USINT, USINT)
VM_FUNCTION _LoadMaskID_USINT_USINT_
VM_DATA 2
VM_POPL USINT 1
VM_POPL USINT 0
VM_PUSHL USINT 0
VM_CAST USINT UINT
VM_POP UINT X Display.MaskID
; CASE
VM_PUSHL USINT 0
; OF
VM_CASE USINT 1 L15
VM_CASE USINT 2 L16
VM_CASE USINT 3 L17
VM_CASE USINT 4 L18
VM_CASE USINT 5 L19
VM_CASE USINT 6 L20
VM_CASE USINT 7 L21
VM_CASE USINT 8 L22
VM_CASE USINT 9 L23
VM_CASE USINT 10 L24
VM_CASE USINT 11 L25
VM_CASE USINT 12 L26
VM_CASE USINT 13 L27
VM_CASE USINT 14 L28
VM_CASE USINT 15 L29
VM_CASE USINT 16 L30
VM_CASE USINT 17 L31
VM_CASE USINT 18 L32
VM_CASE USINT 19 L33
VM_CASE USINT 20 L34
VM_CASE USINT 21 L35
VM_CASE USINT 22 L36
VM_CASE USINT 23 L37
VM_CASE USINT 24 L38
VM_CASE USINT 25 L39
VM_CASE USINT 26 L40
VM_CASE USINT 27 L41
VM_CASE USINT 28 L42
VM_CASE USINT 29 L43
VM_CASE USINT 30 L44
VM_CASE USINT 31 L45
VM_CASE USINT 32 L46
VM_CASE USINT 33 L47
VM_CASE USINT 34 L48
VM_CASE USINT 35 L49
VM_CASE USINT 36 L50
VM_CASE USINT 37 L51
VM_CASE USINT 38 L52
VM_CASE USINT 39 L53
VM_CASE USINT 40 L54
VM_CASE USINT 41 L55
VM_CASE USINT 42 L56
VM_CASE USINT 43 L57
VM_CASE USINT 44 L58
VM_CASE USINT 45 L59
VM_POP_AWAY USINT
VM_JUMP L14
VM_LABEL L15
EF_GOTO_MASK Main_Mask
VM_PUSH_IMM BOOL 0
VM_POP BOOL X SystemPause
VM_JUMP L14
VM_LABEL L16
VM_PUSH_IMM UINT 0
VM_POP UINT X PwdIn
VM_PUSH_IMM INT 0
VM_POP INT EF IncrTmp
VM_PUSH_IMM INT 0
VM_POP INT X PwdRes
VM_JSR _CleanPwd_
EF_GOTO_MASK Pwd_LogIn
VM_JUMP L14
VM_LABEL L17
VM_PUSH_IMM BOOL 0
VM_POP BOOL X MainMenuVisibility_Is_Set
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ParamVisibility_Is_Set
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getMainMenu
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
EF_GOTO_MASK Menu_Main
VM_PUSH_IMM BOOL 0
VM_POP BOOL X SystemPause
VM_JUMP L14
VM_LABEL L18
; IF
VM_PUSH BOOL X LocalMode
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_DUP BOOL
VM_JZ L61
VM_POP_AWAY BOOL
VM_PUSH BOOL X Role_Slave
VM_LABEL L61
VM_JZ L60
; THEN
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_JUMP L62
VM_LABEL L60
; ELSE
VM_PUSH USINT EF STATE_PRG_ALWAYS_ON
VM_POP USINT X StatePRG
; END_IF
VM_LABEL L62
EF_GOTO_MASK OnOff
VM_JUMP L14
VM_LABEL L19
; IF
VM_PUSH BOOL X UnitOff
VM_JZ L64
; THEN
VM_PUSHL USINT 1
VM_POP USINT X MaskMng.LoadMaskMode
; IF
VM_PUSHL USINT 1
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_JZ L65
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ConfigMng.checkConfigFile
VM_JUMP L66
VM_LABEL L65
; IF
VM_PUSHL USINT 1
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L67
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ConfigMng.checkConfigFile
VM_JUMP L68
VM_LABEL L67
; IF
VM_PUSHL USINT 1
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_JZ L69
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X IsConfigChanged
VM_PUSH_IMM BOOL 1
VM_POP BOOL X load_Config
VM_JUMP L70
VM_LABEL L69
; IF
VM_PUSHL USINT 1
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L71
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X save_Config
VM_JUMP L72
VM_LABEL L71
; IF
VM_PUSHL USINT 1
VM_PUSH_IMM USINT 4
VM_CMP_EQ USINT
VM_JZ L73
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X save_Config
VM_LABEL L73
; END_IF
VM_LABEL L72
VM_LABEL L70
VM_LABEL L68
VM_LABEL L66
EF_GOTO_MASK LoadConfig_Mask
VM_JUMP L74
VM_LABEL L64
; ELSE
VM_PUSH_IMM USINT 1
VM_PUSH USINT EF POPUP_TIME
VM_PUSH_IMM BOOL 1
VM_JSR _ShowPopUpMessage_USINT_USINT_BOOL_
; END_IF
VM_LABEL L74
VM_JUMP L14
VM_LABEL L20
VM_PUSH_IMM BOOL 1
VM_POP BOOL X read_EthernetSettings
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
EF_GOTO_MASK EthernetConfig_Mask
VM_JUMP L14
VM_LABEL L21
VM_PUSH BOOL X En_Schedule
VM_POP BOOL X temp_En_Schedule
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
EF_GOTO_MASK Schedule_Manage
VM_JUMP L14
VM_LABEL L22
VM_JSR _gotoAlarmLog_
VM_JUMP L14
VM_LABEL L23
EF_GOTO_MASK Sequences_Mask
VM_JUMP L14
VM_LABEL L24
; IF
VM_PUSHL USINT 1
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L98
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X CurMenuPoint
VM_PUSH_IMM DINT 1
VM_POP DINT X Position
VM_PUSH_IMM DINT 1
VM_POP DINT X CurList_Position
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_PUSH USINT X CurLevel
VM_POP USINT EF ConfigStartLevel
VM_LABEL L98
; END_IF
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getConfigMenu
EF_GOTO_MASK REF_CONFIGURATOR
VM_JUMP L14
VM_LABEL L25
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getIOList
; IF
VM_PUSH BOOL X UnitOn
VM_JZ L99
; THEN
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
VM_JUMP L100
VM_LABEL L99
; ELSE
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
; END_IF
VM_LABEL L100
EF_GOTO_MASK IO_DI
VM_JUMP L14
VM_LABEL L26
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getIOList
; IF
VM_PUSH BOOL X UnitOn
VM_JZ L102
; THEN
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
VM_JUMP L103
VM_LABEL L102
; ELSE
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
; END_IF
VM_LABEL L103
EF_GOTO_MASK IO_AI
VM_JUMP L14
VM_LABEL L27
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getIOList
; IF
VM_PUSH BOOL X UnitOn
VM_JZ L105
; THEN
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
VM_JUMP L106
VM_LABEL L105
; ELSE
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
; END_IF
VM_LABEL L106
EF_GOTO_MASK IO_DO
VM_JUMP L14
VM_LABEL L28
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getIOList
; IF
VM_PUSH BOOL X UnitOn
VM_JZ L108
; THEN
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
VM_JUMP L109
VM_LABEL L108
; ELSE
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
; END_IF
VM_LABEL L109
EF_GOTO_MASK IO_AO
VM_JUMP L14
VM_LABEL L29
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getParam
; IF
VM_PUSH BOOL X LocalMode
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_DUP BOOL
VM_JZ L112
VM_POP_AWAY BOOL
VM_PUSH BOOL X Role_Slave
VM_LABEL L112
VM_JZ L111
; THEN
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_JUMP L113
VM_LABEL L111
; ELSE
VM_PUSH USINT EF STATE_PRG_ALWAYS_ON
VM_POP USINT X StatePRG
; END_IF
VM_LABEL L113
EF_GOTO_MASK Set
VM_JUMP L14
VM_LABEL L30
EF_GOTO_MASK Pwd_LogOut
VM_JUMP L14
VM_LABEL L31
VM_PUSH USINT X Role
VM_POP USINT X temp_Role
VM_PUSH USINT EF STATE_PRG_ALWAYS_ON
VM_POP USINT X StatePRG
EF_GOTO_MASK DeviceRole
EF_GOTO_CURSOR 0 10
VM_JUMP L14
VM_LABEL L32
; IF
VM_PUSH BOOL X Role_Master
VM_JZ L115
; THEN
; IF
VM_PUSH USINT X Num_Slaves
VM_PUSH_IMM USINT 0
VM_CMP_GT USINT
VM_JZ L116
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X CurSlave
VM_PUSH_IMM BOOL 1
VM_POP BOOL X CurSlaveShow
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
EF_GOTO_MASK SlaveSet
VM_JUMP L117
VM_LABEL L116
; ELSE
VM_PUSH_IMM USINT 6
VM_PUSH USINT EF POPUP_TIME
VM_PUSH_IMM BOOL 1
VM_JSR _ShowPopUpMessage_USINT_USINT_BOOL_
; END_IF
VM_LABEL L117
VM_JUMP L119
VM_LABEL L115
; ELSE
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
EF_GOTO_MASK LocalSet
EF_GOTO_CURSOR 0 10
; END_IF
VM_LABEL L119
VM_JUMP L14
VM_LABEL L33
; IF
VM_PUSH BOOL X Role_Master
VM_JZ L121
; THEN
VM_PUSH USINT EF STATE_PRG_ALWAYS_ON
VM_POP USINT X StatePRG
EF_GOTO_MASK GroupStructure
EF_GOTO_CURSOR 0 10
VM_JUMP L122
VM_LABEL L121
; ELSE
VM_PUSH_IMM USINT 2
VM_PUSH USINT EF POPUP_TIME
VM_PUSH_IMM BOOL 1
VM_JSR _ShowPopUpMessage_USINT_USINT_BOOL_
; END_IF
VM_LABEL L122
VM_JUMP L14
VM_LABEL L34
VM_PUSHL USINT 1
VM_POP USINT X CurParam
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getParamMenu
VM_PUSH_IMM DINT 0
VM_POP DINT X cnt_Items
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
EF_GOTO_MASK REF_Parameters
VM_JUMP L14
VM_LABEL L35
VM_PUSH_IMM DINT -1
VM_POP DINT X Display.Index
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
EF_GOTO_MASK Stats_1
VM_JUMP L14
VM_LABEL L36
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
EF_GOTO_MASK DateTimeChg
VM_JUMP L14
VM_LABEL L37
VM_PUSH USINT EF STATE_PRG_ALWAYS_ON
VM_POP USINT X StatePRG
EF_GOTO_MASK Language
VM_JUMP L14
VM_LABEL L38
VM_PUSH_IMM INT 0
VM_POP INT EF IncrTmp
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
EF_GOTO_MASK PwdChg
VM_JUMP L14
VM_LABEL L39
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.getCorrList
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
EF_GOTO_MASK CORR_AI
VM_JUMP L14
VM_LABEL L40
; IF
VM_PUSH BOOL X is_TOP
VM_JZ L124
; THEN
VM_PUSH_IMM USINT 9
VM_PUSH USINT EF POPUP_TIME
VM_PUSH_IMM BOOL 1
VM_JSR _ShowPopUpMessage_USINT_USINT_BOOL_
VM_JUMP L125
VM_LABEL L124
; ELSE
; IF
VM_PUSH USINT X Ethernet.Protocol[1]
VM_PUSH_IMM USINT 4
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L128
VM_POP_AWAY BOOL
VM_PUSH USINT X Ethernet.Protocol[1]
VM_PUSH_IMM USINT 5
VM_CMP_EQ USINT
VM_LABEL L128
VM_JZ L127
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X MB_port
VM_JUMP L129
VM_LABEL L127
; IF
VM_PUSH USINT X BMS_card.Protocol
VM_PUSH_IMM USINT 4
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L131
VM_POP_AWAY BOOL
VM_PUSH USINT X BMS_card.Protocol
VM_PUSH_IMM USINT 5
VM_CMP_EQ USINT
VM_LABEL L131
VM_JZ L130
; THEN
VM_PUSH_IMM USINT 2
VM_POP USINT X MB_port
VM_JUMP L132
VM_LABEL L130
; IF
VM_PUSH USINT X BMS2.Protocol
VM_PUSH_IMM USINT 4
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L134
VM_POP_AWAY BOOL
VM_PUSH USINT X BMS2.Protocol
VM_PUSH_IMM USINT 5
VM_CMP_EQ USINT
VM_LABEL L134
VM_JZ L133
; THEN
VM_PUSH_IMM USINT 3
VM_POP USINT X MB_port
VM_JUMP L135
VM_LABEL L133
; ELSE
VM_PUSH_IMM USINT 0
VM_POP USINT X MB_port
; END_IF
VM_LABEL L135
VM_LABEL L132
VM_LABEL L129
VM_PUSH USINT X MB_port
VM_POP USINT X Temp_MB_port
VM_PUSH USINT X MB_Address
VM_POP USINT X Temp_MB_Address
VM_JSR _Show_ports_
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
EF_GOTO_MASK MB_Settings_1
; END_IF
VM_LABEL L125
VM_JUMP L14
VM_LABEL L41
; IF
VM_PUSH BOOL X UnitOff
VM_JZ L144
; THEN
; IF
VM_PUSHL USINT 1
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L145
; THEN
; IF
VM_PUSH BOOL X isUSB
VM_JZ L146
; THEN
VM_PUSH_IMM BYTE 1
VM_POP BYTE X Upgrade.UpgradeDrive
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Upgrade.Check_Upgrade
VM_PUSH USINT EF STATE_PRG_ALWAYS_ON
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 4
VM_POP USINT X NextCycleAction
VM_JUMP L147
VM_LABEL L146
; ELSE
VM_PUSH_IMM USINT 24
VM_PUSH USINT EF SHORT_POPUP_TIME
VM_PUSH_IMM BOOL 1
VM_JSR _ShowPopUpMessage_USINT_USINT_BOOL_
; END_IF
VM_LABEL L147
VM_JUMP L149
VM_LABEL L145
; ELSE
VM_PUSH_IMM BYTE 0
VM_POP BYTE X Upgrade.UpgradeDrive
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Upgrade.Check_Upgrade
VM_PUSH USINT EF STATE_PRG_ALWAYS_ON
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 4
VM_POP USINT X NextCycleAction
; END_IF
VM_LABEL L149
VM_JUMP L151
VM_LABEL L144
; ELSE
VM_PUSH_IMM USINT 1
VM_PUSH USINT EF POPUP_TIME
VM_PUSH_IMM BOOL 1
VM_JSR _ShowPopUpMessage_USINT_USINT_BOOL_
; END_IF
VM_LABEL L151
VM_JUMP L14
VM_LABEL L42
; IF
VM_PUSH BOOL X is_TOP
VM_JZ L153
; THEN
VM_PUSH_IMM USINT 9
VM_PUSH USINT EF POPUP_TIME
VM_PUSH_IMM BOOL 1
VM_JSR _ShowPopUpMessage_USINT_USINT_BOOL_
VM_JUMP L154
VM_LABEL L153
; IF
VM_PUSH BOOL X IsDLE
VM_DUP BOOL
VM_JZ L156
VM_POP_AWAY BOOL
VM_PUSH BOOL X Role_Slave
VM_LABEL L156
VM_JZ L155
; THEN
VM_PUSH_IMM USINT 10
VM_PUSH USINT EF POPUP_TIME
VM_PUSH_IMM BOOL 1
VM_JSR _ShowPopUpMessage_USINT_USINT_BOOL_
VM_JUMP L157
VM_LABEL L155
; ELSE
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
EF_GOTO_MASK Schedule_1
; END_IF
VM_LABEL L157
VM_LABEL L154
VM_JUMP L14
VM_LABEL L43
; IF
VM_PUSH BOOL X is_TOP
VM_JZ L159
; THEN
VM_PUSH_IMM USINT 9
VM_PUSH USINT EF POPUP_TIME
VM_PUSH_IMM BOOL 1
VM_JSR _ShowPopUpMessage_USINT_USINT_BOOL_
VM_JUMP L160
VM_LABEL L159
; IF
VM_PUSH BOOL X IsDLE
VM_DUP BOOL
VM_JZ L162
VM_POP_AWAY BOOL
VM_PUSH BOOL X Role_Slave
VM_LABEL L162
VM_DUP BOOL
VM_JZ L163
VM_POP_AWAY BOOL
VM_PUSH BOOL X LocalMode
VM_NOT BOOL
VM_LABEL L163
VM_JZ L161
; THEN
VM_PUSH_IMM USINT 10
VM_PUSH USINT EF POPUP_TIME
VM_PUSH_IMM BOOL 1
VM_JSR _ShowPopUpMessage_USINT_USINT_BOOL_
VM_JUMP L164
VM_LABEL L161
; ELSE
VM_PUSH USINT X Mode_Control
VM_POP USINT X temp_Mode_Control
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
EF_GOTO_MASK Control_Mode
; END_IF
VM_LABEL L164
VM_LABEL L160
VM_JUMP L14
VM_LABEL L44
VM_JUMP L14
VM_LABEL L45
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF ReturnToPrevMask
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 0
VM_POP USINT X DTPopUp
VM_PUSHL USINT 1
VM_POP USINT X PopUp_Question
EF_GOTO_MASK PopUp_Question_Mask
VM_JUMP L14
VM_LABEL L46
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.setStatePRG
EF_GOTO_MASK SlaveState
VM_JUMP L14
VM_LABEL L47
VM_PUSH USINT X Role
VM_POP USINT X temp_Role
VM_PUSH USINT EF STATE_PRG_ALWAYS_ON
VM_POP USINT X StatePRG
EF_GOTO_MASK TOP_Config_1
EF_GOTO_CURSOR 0 10
VM_JUMP L14
VM_LABEL L48
; IF
VM_PUSH BOOL X Role_Slave
VM_DUP BOOL
VM_JNZ L167
VM_POP_AWAY BOOL
VM_PUSH BOOL X is_TOP
VM_LABEL L167
VM_JZ L166
; THEN
VM_PUSH UDINT X BMS2.Baudrate
VM_POP UDINT X Temp_MB_Baudrate
VM_PUSH USINT X BMS2.Parity
VM_POP USINT X Temp_MB_Parity
VM_PUSH USINT X BMS2.StopBits
VM_POP USINT X Temp_MB_StopBits
VM_JUMP L168
VM_LABEL L166
; ELSE
VM_PUSH UDINT X FBus2.Baudrate
VM_POP UDINT X Temp_MB_Baudrate
VM_PUSH USINT X FBus2.Parity
VM_POP USINT X Temp_MB_Parity
VM_PUSH USINT X FBus2.StopBits
VM_POP USINT X Temp_MB_StopBits
; END_IF
VM_LABEL L168
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_MB_BMS
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
EF_GOTO_MASK BMS_Settings_Master
VM_JUMP L14
VM_LABEL L49
; IF
VM_PUSH BOOL X isUSB
VM_JZ L170
; THEN
VM_PUSHL USINT 1
VM_CAST USINT UINT
VM_POP UINT X Display.Hint
; IF
VM_PUSHL USINT 1
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L171
; THEN
VM_PUSH_IMM USINT 23
VM_PUSH_IMM BOOL 1
VM_JSR _ShowPopUpQuestion_USINT_BOOL_
VM_JUMP L175
VM_LABEL L171
; ELSE
VM_PUSH_IMM USINT 22
VM_PUSH_IMM BOOL 1
VM_JSR _ShowPopUpQuestion_USINT_BOOL_
; END_IF
VM_LABEL L175
VM_JUMP L177
VM_LABEL L170
; ELSE
VM_PUSH_IMM USINT 24
VM_PUSH USINT EF SHORT_POPUP_TIME
VM_PUSH_IMM BOOL 1
VM_JSR _ShowPopUpMessage_USINT_USINT_BOOL_
; END_IF
VM_LABEL L177
VM_JUMP L14
VM_LABEL L50
VM_PUSH_IMM DINT 1
VM_POP DINT X Position
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X cnt_Items
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getIOConfig
EF_GOTO_MASK CFG_DI
VM_JUMP L14
VM_LABEL L51
VM_PUSH_IMM DINT 1
VM_POP DINT X Position
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X cnt_Items
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getIOConfig
EF_GOTO_MASK CFG_AI
VM_JUMP L14
VM_LABEL L52
VM_PUSH_IMM DINT 1
VM_POP DINT X Position
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X cnt_Items
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getIOConfig
EF_GOTO_MASK CFG_DO
VM_JUMP L14
VM_LABEL L53
VM_PUSH_IMM DINT 1
VM_POP DINT X Position
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X cnt_Items
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getIOConfig
EF_GOTO_MASK CFG_AO
VM_JUMP L14
VM_LABEL L54
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
EF_GOTO_MASK Fridge_1x1
VM_JUMP L14
VM_LABEL L55
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
; IF
VM_PUSH BOOL X Role_Master
VM_JZ L179
; THEN
; IF
VM_PUSH USINT X Num_Slaves
VM_PUSH_IMM USINT 0
VM_CMP_GT USINT
VM_JZ L180
; THEN
EF_GOTO_MASK NetMap
; IF
VM_PUSH USINT X CurPosition
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L182
VM_POP_AWAY BOOL
VM_PUSH USINT X CurPosition
VM_PUSH USINT X Num_Slaves
VM_CMP_GT USINT
VM_LABEL L182
VM_JZ L181
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X CurPosition
VM_LABEL L181
; END_IF
VM_PUSH_IMM BOOL 1
VM_PUSH_AMP BOOL X CurShow[1]
VM_PUSH USINT X CurPosition
VM_ADDRESS USINT 1 30 16
VM_POPI BOOL
VM_JUMP L183
VM_LABEL L180
; ELSE
VM_PUSH_IMM USINT 6
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L183
VM_JUMP L185
VM_LABEL L179
; ELSE
EF_GOTO_MASK MasterState
; END_IF
VM_LABEL L185
VM_JUMP L14
VM_LABEL L56
EF_GOTO_MASK SwInfo
VM_JUMP L14
VM_LABEL L57
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getParam
VM_PUSH USINT EF STATE_PRG_ALWAYS_ON
VM_POP USINT X StatePRG
EF_GOTO_MASK Preset
EF_GOTO_CURSOR 0 10
VM_JUMP L14
VM_LABEL L58
EF_GOTO_MASK Humid_Prop
VM_JUMP L14
VM_LABEL L59
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.get_Slave_IP
EF_GOTO_MASK Res_Slave_Settings
VM_LABEL L14
VM_RTS

; ReStoreMaskID()
VM_FUNCTION _ReStoreMaskID_
VM_DATA 0
; IF
VM_PUSH USINT X MaskIDLevel
VM_PUSH_IMM USINT 0
VM_CMP_GT USINT
VM_JZ L13
; THEN
VM_PUSH USINT X MaskIDLevel
VM_PUSH_IMM USINT 1
VM_SUB USINT
VM_POP USINT X MaskIDLevel
VM_LABEL L13
; END_IF
VM_PUSH_AMP USINT X MaskIDStore[0]
VM_PUSH USINT X MaskIDLevel
VM_ADDRESS USINT 0 9 16
VM_PUSHI USINT
VM_CAST USINT UINT
VM_POP UINT X Display.MaskID
VM_PUSH_IMM USINT 0
VM_PUSH_AMP USINT X MaskIDStore[0]
VM_PUSH USINT X MaskIDLevel
VM_ADDRESS USINT 0 9 16
VM_POPI USINT
VM_PUSH UINT X Display.MaskID
VM_CAST UINT USINT
VM_PUSH_IMM USINT 0
VM_JSR _LoadMaskID_USINT_USINT_
VM_RTS

; ClearHistory()
VM_FUNCTION _ClearHistory_
VM_DATA 0
VM_PUSH_IMM USINT 0
VM_POP USINT X MaskIDLevel
VM_PUSH_IMM USINT 0
VM_POP USINT X MaskIDStore[0]
VM_PUSH_IMM USINT 0
VM_POP USINT X MaskIDStore[1]
VM_PUSH_IMM USINT 0
VM_POP USINT X MaskIDStore[2]
VM_PUSH_IMM USINT 0
VM_POP USINT X MaskIDStore[3]
VM_PUSH_IMM USINT 0
VM_POP USINT X MaskIDStore[4]
VM_PUSH_IMM USINT 0
VM_POP USINT X MaskIDStore[5]
VM_PUSH_IMM USINT 0
VM_POP USINT X MaskIDStore[6]
VM_PUSH_IMM USINT 0
VM_POP USINT X MaskIDStore[7]
VM_PUSH_IMM USINT 0
VM_POP USINT X MaskIDStore[8]
VM_PUSH_IMM USINT 0
VM_POP USINT X MaskIDStore[9]
VM_PUSH_IMM DINT 0
VM_POP DINT X Position
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurList_Position
VM_PUSH_IMM USINT 0
VM_POP USINT X CurLevel
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.MenuPoint[0]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Position[0]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Row[0]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.MenuPoint[1]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Position[1]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Row[1]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.MenuPoint[2]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Position[2]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Row[2]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.MenuPoint[3]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Position[3]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Row[3]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.MenuPoint[4]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Position[4]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Row[4]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.MenuPoint[5]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Position[5]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Row[5]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.MenuPoint[6]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Position[6]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Row[6]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.MenuPoint[7]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Position[7]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Row[7]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.MenuPoint[8]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Position[8]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Row[8]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.MenuPoint[9]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Position[9]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Row[9]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.MenuPoint[10]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Position[10]
VM_PUSH_IMM DINT 0
VM_POP DINT X Display.Path.Row[10]
VM_RTS

; StoreMaskID()
VM_FUNCTION _StoreMaskID_
VM_DATA 0
VM_PUSH UINT X Display.MaskID
VM_CAST UINT USINT
VM_PUSH_AMP USINT X MaskIDStore[0]
VM_PUSH USINT X MaskIDLevel
VM_ADDRESS USINT 0 9 16
VM_POPI USINT
; IF
VM_PUSH USINT X MaskIDLevel
VM_PUSH_IMM USINT 9
VM_CMP_LT USINT
VM_JZ L191
; THEN
VM_PUSH USINT X MaskIDLevel
VM_PUSH_IMM USINT 1
VM_ADD USINT
VM_POP USINT X MaskIDLevel
VM_LABEL L191
; END_IF
VM_RTS

; GotoMaskID(USINT)
VM_FUNCTION _GotoMaskID_USINT_
VM_DATA 1
VM_POPL USINT 0
VM_JSR _StoreMaskID_
VM_PUSHL USINT 0
VM_PUSH_IMM USINT 0
VM_JSR _LoadMaskID_USINT_USINT_
VM_RTS

; GotoMain()
VM_FUNCTION _GotoMain_
VM_DATA 0
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnLangChg
VM_JSR _ClearHistory_
VM_PUSH_IMM USINT 1
VM_JSR _GotoMaskID_USINT_
VM_RTS

; LoadMenuPos()
VM_FUNCTION _LoadMenuPos_
VM_DATA 0
; IF
VM_PUSH USINT X CurLevel
VM_PUSH_IMM USINT 0
VM_CMP_GT USINT
VM_JZ L192
; THEN
VM_PUSH USINT X CurLevel
VM_PUSH_IMM USINT 1
VM_SUB USINT
VM_POP USINT X CurLevel
VM_JUMP L193
VM_LABEL L192
; ELSE
VM_PUSH_IMM USINT 0
VM_POP USINT X CurLevel
; END_IF
VM_LABEL L193
VM_PUSH_AMP DINT X Display.Path.MenuPoint[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_PUSHI DINT
VM_POP DINT X CurMenuPoint
VM_PUSH_AMP DINT X Display.Path.Position[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_PUSHI DINT
VM_POP DINT X Position
VM_PUSH_AMP DINT X Display.Path.Row[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_PUSHI DINT
VM_POP DINT X CurRow
VM_PUSH_AMP DINT X Display.Path.Row_PRG[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_PUSHI DINT
VM_POP DINT X CurRow_modePRG
VM_PUSH DINT X Position
VM_PUSH DINT X CurRow
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X CurList_Position
VM_PUSH_IMM DINT 0
VM_PUSH_AMP DINT X Display.Path.MenuPoint[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_POPI DINT
VM_PUSH_IMM DINT 0
VM_PUSH_AMP DINT X Display.Path.Position[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_POPI DINT
VM_PUSH_IMM DINT 0
VM_PUSH_AMP DINT X Display.Path.Row[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_POPI DINT
VM_PUSH_IMM DINT 0
VM_PUSH_AMP DINT X Display.Path.Row_PRG[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_POPI DINT
VM_RTS

; resetConditions()
VM_FUNCTION _resetConditions_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 4
VM_CMP_EQ USINT
VM_JZ L195
; THEN
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_JUMP L196
VM_LABEL L195
; ELSE
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
; END_IF
VM_LABEL L196
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF isActiveAlarmLoop
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF isNoAlarmMask
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_RTS

; GlobalEsc()
VM_FUNCTION _GlobalEsc_
VM_DATA 0
VM_JSR _ReStoreMaskID_
; CASE
VM_PUSH UINT X Display.MaskID
; OF
VM_CASE UINT 0 L188
VM_CASE UINT 1 L188
VM_CASE UINT 3 L189
VM_CASE UINT 10 L190
VM_POP_AWAY UINT
VM_JUMP L187
VM_LABEL L188
VM_JSR _GotoMain_
VM_JUMP L187
VM_LABEL L189
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_JSR _LoadMenuPos_
VM_JUMP L187
VM_LABEL L190
VM_JSR _LoadMenuPos_
VM_LABEL L187
VM_JSR _resetConditions_
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ModePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X NotModePRG
VM_RTS

; PopUp_ESC()
VM_FUNCTION _PopUp_ESC_
VM_DATA 0
VM_PUSH USINT EF popup_StatePRG
VM_POP USINT X StatePRG
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_PopUpTimer
; IF
VM_PUSH BOOL EF ReturnToPrevMask
VM_JZ L12
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF ReturnToPrevMask
VM_JSR _GlobalEsc_
VM_JUMP L198
VM_LABEL L12
; ELSE
; CASE
VM_PUSH USINT EF popup_StatePRG
; OF
VM_CASE USINT 3 L201
VM_POP_AWAY USINT
VM_JUMP L200
VM_LABEL L201
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ModePRG
VM_PUSH_IMM BOOL 0
VM_POP BOOL X NotModePRG
VM_LABEL L200
EF_RESTORE_MASK
VM_JSR _LoadMenuPos_
; END_IF
VM_LABEL L198
VM_RTS

; PopUpSupport()
VM_FUNCTION _PopUpSupport_
VM_DATA 0
; IF
VM_PUSH BOOL EF En_PopUpTimer
VM_JZ L10
; THEN
; IF
VM_PUSH USINT X DTPopUp
VM_PUSH_IMM USINT 0
VM_CMP_LE USINT
VM_JZ L11
; THEN
VM_JSR _PopUp_ESC_
VM_JUMP L202
VM_LABEL L11
; ELSE
VM_PUSH USINT X DTPopUp
VM_PUSH_IMM USINT 1
VM_SUB USINT
VM_POP USINT X DTPopUp
VM_PUSH USINT EF PopUpKeyDelay
VM_PUSH_IMM USINT 1
VM_ADD USINT
VM_POP USINT EF PopUpKeyDelay
; IF
VM_PUSH USINT X __SYSVA_KEY_PRESSED
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L204
; THEN
; IF
VM_PUSH USINT EF PopUpKeyDelay
VM_PUSH_IMM USINT 1
VM_CMP_GT USINT
VM_JZ L205
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_PopUpTimer
VM_JUMP L206
VM_LABEL L205
; ELSE
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_KEY_PRESSED
; END_IF
VM_LABEL L206
VM_LABEL L204
; END_IF
; IF
VM_PUSH USINT X DTPopUp
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_JZ L208
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Show_DTPopUp
VM_LABEL L208
; END_IF
; END_IF
VM_LABEL L202
VM_JUMP L209
VM_LABEL L10
; ELSE
VM_PUSH_IMM USINT 0
VM_POP USINT EF PopUpKeyDelay
VM_PUSH_IMM USINT 0
VM_POP USINT X DTPopUp
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Show_DTPopUp
; END_IF
VM_LABEL L209
VM_RTS

; ArrowSupport()
VM_FUNCTION _ArrowSupport_
VM_DATA 0
; IF
VM_PUSH BOOL EF autoHideArrowsOff
VM_NOT BOOL
VM_JZ L211
; THEN
; IF
VM_PUSH BOOL X upArrow
VM_JZ L212
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X upArrow
VM_LABEL L212
; END_IF
; IF
VM_PUSH BOOL X downArrow
VM_JZ L213
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X downArrow
VM_LABEL L213
; END_IF
VM_LABEL L211
; END_IF
VM_RTS

; ShowPopUpQuestion(USINT)
VM_FUNCTION _ShowPopUpQuestion_USINT_
VM_DATA 1
VM_POPL USINT 0
VM_PUSH USINT X StatePRG
VM_POP USINT EF popup_StatePRG
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
EF_STORE_MASK
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_PopUpTimer
VM_PUSHL USINT 0
VM_POP USINT X PopUp_Question
EF_GOTO_MASK PopUp_Question_Mask
VM_RTS

; UpdateCurPos()
VM_FUNCTION _UpdateCurPos_
VM_DATA 0
; IF
VM_PUSH BOOL X ModePRG
VM_JZ L238
; THEN
VM_PUSH_AMP UINT X Display.Descr[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_POP UINT X Display.Hint
VM_PUSH DINT X Position
VM_PUSH DINT X CurRow_modePRG
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X CurList_Position
VM_JUMP L239
VM_LABEL L238
; ELSE
VM_PUSH_AMP UINT X Display.Descr[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_POP UINT X Display.Hint
VM_PUSH DINT X Position
VM_PUSH DINT X CurRow
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X CurList_Position
; END_IF
VM_LABEL L239
VM_RTS

; GotoMaskID(USINT, USINT)
VM_FUNCTION _GotoMaskID_USINT_USINT_
VM_DATA 2
VM_POPL USINT 1
VM_POPL USINT 0
VM_JSR _StoreMaskID_
VM_PUSHL USINT 0
VM_PUSHL USINT 1
VM_JSR _LoadMaskID_USINT_USINT_
VM_RTS

; NextCycleAction()
VM_FUNCTION _NextCycleAction_
VM_DATA 0
; IF
VM_PUSH USINT X NextCycleAction
VM_PUSH_IMM USINT 0
VM_CMP_NE USINT
VM_JZ L214
; THEN
; CASE
VM_PUSH USINT X NextCycleAction
; OF
VM_CASE USINT 1 L216
VM_CASE USINT 2 L217
VM_CASE USINT 4 L218
VM_CASE USINT 9 L219
VM_CASE USINT 10 L220
VM_CASE USINT 11 L221
VM_CASE USINT 12 L222
VM_CASE USINT 13 L223
VM_CASE USINT 14 L224
VM_CASE USINT 15 L225
VM_CASE USINT 16 L226
VM_CASE USINT 17 L227
VM_CASE USINT 18 L228
VM_CASE USINT 19 L229
VM_CASE USINT 20 L230
VM_CASE USINT 22 L231
VM_CASE USINT 23 L232
VM_CASE USINT 24 L233
VM_CASE USINT 25 L234
VM_CASE USINT 27 L235
VM_CASE USINT 30 L236
VM_POP_AWAY USINT
VM_JUMP L215
VM_LABEL L216
EF_RESTORE_MASK
VM_JUMP L215
VM_LABEL L217
EF_RESTORE_MASK
EF_GOTO_CURSOR 0 10
VM_JUMP L215
VM_LABEL L218
EF_GOTO_MASK Upgrade_OS
VM_JUMP L215
VM_LABEL L219
VM_PUSH_IMM USINT 13
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L215
VM_LABEL L220
VM_PUSH_IMM USINT 14
VM_PUSH USINT EF SHORT_POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_JUMP L215
VM_LABEL L221
; IF
VM_PUSH BOOL X ManualManage
VM_JZ L237
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.reset_ManualMode
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.reset_ManualMode_Outputs
VM_PUSH_IMM USINT 16
VM_PUSH USINT EF SHORT_POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_LABEL L237
; END_IF
VM_JUMP L215
VM_LABEL L222
VM_JSR _UpdateCurPos_
VM_JUMP L215
VM_LABEL L223
EF_GOTO_MASK REF_Parameters
VM_PUSH_IMM UINT 20
VM_POP UINT X Display.MaskID
VM_JUMP L215
VM_LABEL L224
VM_PUSH_IMM USINT 36
VM_PUSH_IMM USINT 0
VM_JSR _GotoMaskID_USINT_USINT_
VM_JUMP L215
VM_LABEL L225
VM_PUSH_IMM USINT 37
VM_PUSH_IMM USINT 0
VM_JSR _GotoMaskID_USINT_USINT_
VM_JUMP L215
VM_LABEL L226
VM_PUSH_IMM USINT 38
VM_PUSH_IMM USINT 0
VM_JSR _GotoMaskID_USINT_USINT_
VM_JUMP L215
VM_LABEL L227
VM_PUSH_IMM USINT 39
VM_PUSH_IMM USINT 0
VM_JSR _GotoMaskID_USINT_USINT_
VM_JUMP L215
VM_LABEL L228
VM_PUSH_IMM USINT 5
VM_PUSH_IMM USINT 3
VM_JSR _GotoMaskID_USINT_USINT_
VM_JUMP L215
VM_LABEL L229
VM_PUSH_IMM USINT 5
VM_PUSH_IMM USINT 4
VM_JSR _LoadMaskID_USINT_USINT_
VM_JUMP L215
VM_LABEL L230
VM_PUSH_IMM USINT 5
VM_PUSH_IMM USINT 0
VM_JSR _LoadMaskID_USINT_USINT_
VM_JUMP L215
VM_LABEL L231
VM_PUSH USINT EF ConfigStartLevel
VM_POP USINT X CurLevel
VM_PUSH_IMM BOOL 0
VM_POP BOOL X IsConfigChanged
VM_JSR _GlobalEsc_
VM_JUMP L215
VM_LABEL L232
VM_PUSH_IMM USINT 16
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L215
VM_LABEL L233
VM_PUSH_IMM USINT 10
VM_PUSH_IMM USINT 1
VM_JSR _LoadMaskID_USINT_USINT_
VM_JUMP L215
VM_LABEL L234
VM_JSR _GlobalEsc_
VM_JUMP L215
VM_LABEL L235
VM_JSR _PopUp_ESC_
VM_JUMP L215
VM_LABEL L236
VM_PUSH_IMM USINT 20
VM_PUSH USINT EF SHORT_POPUP_TIME
VM_PUSH_IMM BOOL 1
VM_JSR _ShowPopUpMessage_USINT_USINT_BOOL_
VM_LABEL L215
VM_PUSH_IMM USINT 0
VM_POP USINT X NextCycleAction
VM_LABEL L214
; END_IF
VM_RTS

; ShowMessage()
VM_FUNCTION _ShowMessage_
VM_DATA 0
; IF
VM_PUSH USINT X Show_Message.Num
VM_PUSH_IMM USINT 0
VM_CMP_NE USINT
VM_JZ L241
; THEN
VM_PUSH USINT X Show_Message.Num
VM_PUSH USINT X Show_Message.Time
VM_PUSH BOOL X Show_Message.Esc
VM_JSR _ShowPopUpMessage_USINT_USINT_BOOL_
VM_PUSH USINT X Show_Message.Num
VM_POP USINT X Show_Message.LastNum
VM_PUSH_IMM USINT 0
VM_POP USINT X Show_Message.Num
VM_PUSH_IMM USINT 0
VM_POP USINT X Show_Message.Time
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Show_Message.Esc
VM_LABEL L241
; END_IF
VM_RTS

; ShowQuestion()
VM_FUNCTION _ShowQuestion_
VM_DATA 0
; IF
VM_PUSH USINT X Show_Question.Num
VM_PUSH_IMM USINT 0
VM_CMP_NE USINT
VM_JZ L242
; THEN
VM_PUSH USINT X Show_Question.Num
VM_PUSH BOOL X Show_Question.Esc
VM_JSR _ShowPopUpQuestion_USINT_BOOL_
VM_PUSH USINT X Show_Question.Num
VM_POP USINT X Show_Question.LastNum
VM_PUSH_IMM USINT 0
VM_POP USINT X Show_Question.Num
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Show_Question.Esc
VM_LABEL L242
; END_IF
VM_RTS

; LoadMask()
VM_FUNCTION _LoadMask_
VM_DATA 0
; IF
VM_PUSH USINT X LoadMask.MaskID
VM_PUSH_IMM USINT 0
VM_CMP_NE USINT
VM_JZ L243
; THEN
VM_PUSH USINT X LoadMask.MaskID
VM_PUSH USINT X LoadMask.Param
VM_JSR _GotoMaskID_USINT_USINT_
VM_PUSH_IMM USINT 0
VM_POP USINT X LoadMask.MaskID
VM_PUSH_IMM USINT 0
VM_POP USINT X LoadMask.Param
VM_LABEL L243
; END_IF
VM_RTS

; MyLoopFunction()
VM_FUNCTION _MyLoopFunction_
VM_DATA 0
; IF
VM_PUSH BOOL X En_Reboot
VM_JZ L244
; THEN
EF_GOTO_MASK Reboot
VM_LABEL L244
; END_IF
; IF
VM_PUSH BOOL EF checkZeroColumn
VM_JZ L245
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF checkZeroColumn
EF_STORE_MASK
; IF
VM_PUSH INT X __SYSVA_CURSOR_COLUMN
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L247
VM_POP_AWAY BOOL
VM_PUSH INT X __SYSVA_CURSOR_ROW
VM_PUSH_IMM INT 10
VM_CMP_NE INT
VM_LABEL L247
VM_JZ L246
; THEN
EF_GOTO_CURSOR 0 10
VM_LABEL L246
; END_IF
VM_LABEL L245
; END_IF
; IF
VM_PUSH BOOL X FWMismatch
VM_JZ L248
; THEN
; IF
VM_PUSH BOOL EF old_FWMismatch
VM_NOT BOOL
VM_JZ L249
; THEN
VM_PUSH BOOL X FWMismatch
VM_POP BOOL EF old_FWMismatch
EF_GOTO_MASK Main_Mask
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_LABEL L249
; END_IF
VM_JUMP L250
VM_LABEL L248
; ELSE
; IF
VM_PUSH BOOL EF old_FWMismatch
VM_JZ L252
; THEN
VM_PUSH BOOL X FWMismatch
VM_POP BOOL EF old_FWMismatch
EF_GOTO_MASK Main_Mask
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
VM_LABEL L252
; END_IF
; END_IF
VM_LABEL L250
VM_PUSH BOOL X Role_Master
VM_NOT BOOL
VM_POP BOOL X PIC_RoleSlave
; IF
VM_PUSH BOOL X ManualManage
VM_JZ L253
; THEN
; IF
VM_PUSH BOOL X UnitOn
VM_JZ L254
; THEN
VM_PUSH_IMM USINT 11
VM_POP USINT X NextCycleAction
VM_LABEL L254
; END_IF
VM_LABEL L253
; END_IF
; IF
VM_PUSH BOOL X is_TOP
VM_DUP BOOL
VM_JZ L256
VM_POP_AWAY BOOL
VM_PUSH BOOL X NoConnect
VM_LABEL L256
VM_JZ L255
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X PIC_Fan
VM_JUMP L257
VM_LABEL L255
; ELSE
; IF
VM_PUSH BOOL X EQ_Fans.Supply.DO
VM_DUP BOOL
VM_JNZ L260
VM_POP_AWAY BOOL
VM_PUSH BOOL X EQ_Fans.Exhaust.DO
VM_LABEL L260
VM_JZ L259
; THEN
; IF
VM_PUSH INT X PIC_Fan
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L261
; THEN
VM_PUSH_IMM INT 2
VM_POP INT X PIC_Fan
VM_JUMP L262
VM_LABEL L261
; ELSE
VM_PUSH_IMM INT 1
VM_POP INT X PIC_Fan
; END_IF
VM_LABEL L262
VM_JUMP L264
VM_LABEL L259
; IF
VM_PUSH BOOL X FLR_FanSupplyTK.Active
VM_DUP BOOL
VM_JNZ L266
VM_POP_AWAY BOOL
VM_PUSH BOOL X FLR_FanExhTK.Active
VM_LABEL L266
VM_JZ L265
; THEN
VM_PUSH_IMM INT 3
VM_POP INT X PIC_Fan
VM_JUMP L267
VM_LABEL L265
; ELSE
VM_PUSH_IMM INT 0
VM_POP INT X PIC_Fan
; END_IF
VM_LABEL L267
VM_LABEL L264
; END_IF
VM_LABEL L257
; IF
VM_PUSH BOOL X CurSlaveShow
VM_JZ L269
; THEN
; IF
VM_PUSH USINT X CurState
VM_PUSH_IMM USINT 5
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L271
VM_POP_AWAY BOOL
VM_PUSH USINT X CurState
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_LABEL L271
VM_JZ L270
; THEN
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_JUMP L272
VM_LABEL L270
; ELSE
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; END_IF
VM_LABEL L272
VM_LABEL L269
; END_IF
; IF
VM_PUSH BOOL X MaskMng.SlaveNoAlarms
VM_JZ L274
; THEN
EF_GOTO_MASK Slave_NoAlrms
VM_PUSH_IMM BOOL 0
VM_POP BOOL X MaskMng.SlaveNoAlarms
VM_LABEL L274
; END_IF
VM_RTS

; ShowLangMskTime()
VM_FUNCTION _ShowLangMskTime_
VM_DATA 0
; IF
VM_PUSH USINT X __SYSVA_KEY_PRESSED
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L279
; THEN
VM_PUSH_IMM INT 30
VM_POP INT X LangTime
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_KEY_PRESSED
VM_LABEL L279
; END_IF
; IF
VM_PUSH INT X LangTime
VM_PUSH_IMM INT 0
VM_CMP_GT INT
VM_JZ L280
; THEN
VM_PUSH INT X LangTime
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X LangTime
VM_JUMP L281
VM_LABEL L280
; ELSE
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnLangChg
; END_IF
VM_LABEL L281
VM_RTS

; Boot()
VM_FUNCTION _Boot_
VM_DATA 0
; IF
VM_PUSH BOOL X firstConfig
VM_JZ L276
; THEN
; IF
VM_PUSH DINT X GeneralMng.ID_Lang
VM_PUSH_IMM DINT -1
VM_CMP_EQ DINT
VM_JZ L277
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X GeneralMng.ID_Lang
VM_PUSH_IMM INT 30
VM_POP INT X LangTime
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnLangChg
EF_GOTO_MASK Language
VM_PUSH USINT EF STATE_PRG_ALWAYS_ON
VM_POP USINT X StatePRG
VM_LABEL L277
; END_IF
; IF
VM_PUSH BOOL X EnLangChg
VM_JZ L278
; THEN
VM_JSR _ShowLangMskTime_
VM_JUMP L283
VM_LABEL L278
; ELSE
; IF
VM_PUSH BOOL EF enConfigMask
VM_NOT BOOL
VM_JZ L285
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF enConfigMask
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ModePRG
VM_PUSH USINT EF STATE_PRG_ALWAYS_ON
VM_POP USINT X StatePRG
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL X isConfigMenu
VM_PUSH_IMM USINT 10
VM_PUSH_IMM USINT 1
VM_JSR _LoadMaskID_USINT_USINT_
VM_LABEL L285
; END_IF
; END_IF
VM_LABEL L283
VM_JUMP L286
VM_LABEL L276
; ELSE
; IF
VM_PUSH BOOL X RetainIsClear
VM_JZ L288
; THEN
; IF
VM_PUSH BOOL EF enEndDef
VM_NOT BOOL
VM_JZ L289
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF enEndDef
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
EF_GOTO_MASK EndDefault
VM_LABEL L289
; END_IF
VM_JUMP L290
VM_LABEL L288
; IF
VM_PUSH BOOL EF enLogo
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_JZ L291
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF enLogo
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
EF_GOTO_MASK LogoMask
VM_PUSH_IMM INT 5
VM_POP INT EF LogoTime
VM_JUMP L292
VM_LABEL L291
; IF
VM_PUSH INT EF LogoTime
VM_PUSH_IMM INT 0
VM_CMP_GT INT
VM_JZ L293
; THEN
VM_PUSH INT EF LogoTime
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT EF LogoTime
VM_JUMP L294
VM_LABEL L293
; IF
VM_PUSH DINT X GeneralMng.ID_Lang
VM_PUSH_IMM DINT -1
VM_CMP_EQ DINT
VM_JZ L295
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X GeneralMng.ID_Lang
VM_PUSH DINT X GeneralMng.ID_Lang
VM_SYSTEM 31
VM_POP_AWAY DINT
VM_JUMP L296
VM_LABEL L295
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X BootEnd
VM_PUSH_IMM BOOL 0
VM_POP BOOL X StartupJmp
VM_JSR _GotoMain_
; END_IF
VM_LABEL L296
VM_LABEL L294
VM_LABEL L292
VM_LABEL L290
; END_IF
VM_LABEL L286
VM_RTS

; CheckStoredVar_Alrm()
VM_FUNCTION _CheckStoredVar_Alrm_
VM_DATA 0
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM USINT 1
VM_PUSH_AMP REAL X AlrmStoredVarReal1
VM_SYSTEM 35
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L305
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnStoredVar1_REAL
VM_JUMP L306
VM_LABEL L305
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnStoredVar1_REAL
; END_IF
VM_LABEL L306
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM USINT 2
VM_PUSH_AMP REAL X AlrmStoredVarReal2
VM_SYSTEM 35
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L308
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnStoredVar2_REAL
VM_JUMP L309
VM_LABEL L308
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnStoredVar2_REAL
; END_IF
VM_LABEL L309
VM_RTS

; CheckActiveAlarm()
VM_FUNCTION _CheckActiveAlarm_
VM_DATA 4
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnCheckAlarm
VM_SYSTEM 32
VM_POP DINT X N_Alrms
VM_PUSH_IMM USINT 1
VM_POP USINT X __SYSVA_MANUAL_BUZZER_OFF
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_MANUAL_BUZZER_ON
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L304
; THEN
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM DINT 1
VM_POP DINT X AlrmIdx
VM_PUSH DINT X AlrmIdx
VM_PUSH_AMP DINT X AlrmCode
VM_PUSH_AMP DINT X AlarmMng.AlrmTime
VM_SYSTEM 33
VM_POPL DINT 0
VM_JSR _CheckStoredVar_Alrm_
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF isActiveAlarmLoop
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF isNoAlarmMask
EF_GOTO_MASK Alrms_Active
VM_JUMP L311
VM_LABEL L304
; ELSE
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 1
VM_CMP_LE INT
VM_JZ L313
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF isNoAlarmMask
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF isActiveAlarmLoop
EF_GOTO_MASK Alrms_NoAlrms
VM_JUMP L314
VM_LABEL L313
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 3
VM_CMP_GE INT
VM_JZ L315
; THEN
VM_SYSTEM 36
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL X AlarmMng.AlrmResByPGD1
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
VM_LABEL L315
; END_IF
VM_LABEL L314
; END_IF
VM_LABEL L311
VM_RTS

; CheckAlarm()
VM_FUNCTION _CheckAlarm_
VM_DATA 0
VM_SYSTEM 32
VM_POP DINT X N_Alrms
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_POP BOOL X isAlarm
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH DINT EF N_Alrms_Prev
VM_CMP_GT DINT
VM_JZ L300
; THEN
; IF
VM_PUSH BOOL X GeneralMng.RESERVED3
VM_JZ L301
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X __SYSVA_MANUAL_BUZZER_ON
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_MANUAL_BUZZER_OFF
VM_LABEL L301
; END_IF
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnCheckAlarm
; IF
VM_PUSH BOOL EF isNoAlarmMask
VM_DUP BOOL
VM_JNZ L303
VM_POP_AWAY BOOL
VM_PUSH BOOL EF isActiveAlarmLoop
VM_LABEL L303
VM_JZ L302
; THEN
VM_JSR _CheckActiveAlarm_
VM_LABEL L302
; END_IF
VM_JUMP L316
VM_LABEL L300
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L318
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH DINT EF N_Alrms_Prev
VM_CMP_LT DINT
VM_LABEL L318
VM_JZ L317
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X __SYSVA_MANUAL_BUZZER_OFF
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_MANUAL_BUZZER_ON
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; IF
VM_PUSH BOOL EF isActiveAlarmLoop
VM_JZ L319
; THEN
VM_JSR _CheckActiveAlarm_
VM_LABEL L319
; END_IF
VM_JUMP L320
VM_LABEL L317
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH DINT EF N_Alrms_Prev
VM_CMP_LT DINT
VM_JZ L321
; THEN
; IF
VM_PUSH BOOL EF isActiveAlarmLoop
VM_JZ L322
; THEN
VM_JSR _CheckActiveAlarm_
VM_LABEL L322
; END_IF
VM_LABEL L321
; END_IF
VM_LABEL L320
VM_LABEL L316
VM_PUSH DINT X N_Alrms
VM_POP DINT EF N_Alrms_Prev
VM_RTS

; BlinkQuickMenu()
VM_FUNCTION _BlinkQuickMenu_
VM_DATA 0
; IF
VM_PUSH INT EF DTQM
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L324
VM_POP_AWAY BOOL
VM_PUSH INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_PUSH_IMM INT 1
VM_ADD INT
VM_CMP_LT INT
VM_LABEL L324
VM_JZ L323
; THEN
VM_PUSH_IMM INT 0
VM_POP INT EF DTQM
VM_PUSH INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_ADD INT
VM_POP INT X IdxImgQM
VM_JUMP L325
VM_LABEL L323
; IF
VM_PUSH INT EF DTQM
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L327
VM_POP_AWAY BOOL
VM_PUSH INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_CMP_GT INT
VM_LABEL L327
VM_JZ L326
; THEN
VM_PUSH_IMM INT 0
VM_POP INT EF DTQM
VM_PUSH INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_SUB INT
VM_POP INT X IdxImgQM
VM_LABEL L326
; END_IF
VM_LABEL L325
VM_PUSH INT EF DTQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF DTQM
VM_RTS

; RetMainMsk()
VM_FUNCTION _RetMainMsk_
VM_DATA 0
; IF
VM_PUSH USINT X __SYSVA_KEY_PRESSED
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L328
; THEN
VM_PUSH_IMM INT 0
VM_POP INT EF DTRetMain
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_KEY_PRESSED
VM_JUMP L329
VM_LABEL L328
; IF
VM_PUSH BOOL X EnPwdChgM
VM_NOT BOOL
VM_DUP BOOL
VM_JZ L331
VM_POP_AWAY BOOL
VM_PUSH INT EF DTRetMain
VM_PUSH_IMM INT 300
VM_CMP_EQ INT
VM_LABEL L331
VM_DUP BOOL
VM_JNZ L332
VM_POP_AWAY BOOL
VM_PUSH BOOL X EnPwdChgM
VM_DUP BOOL
VM_JZ L333
VM_POP_AWAY BOOL
VM_PUSH INT EF DTRetMain
VM_PUSH_IMM INT 1200
VM_CMP_EQ INT
VM_LABEL L333
VM_LABEL L332
VM_JZ L330
; THEN
VM_PUSH_IMM UINT 0
VM_POP UINT X PwdIn
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnLogOut
; IF
VM_PUSH BOOL X CurSlaveShow
VM_JZ L334
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X CurSlaveShow
; IF
VM_SYSTEM 32
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L335
; THEN
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_JUMP L336
VM_LABEL L335
; ELSE
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; END_IF
VM_LABEL L336
VM_LABEL L334
; END_IF
VM_PUSH_IMM USINT 11
VM_POP USINT X NextCycleAction
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
VM_JSR _resetConditions_
VM_JSR _GotoMain_
VM_LABEL L330
; END_IF
VM_LABEL L329
; IF
VM_PUSH BOOL X SystemPause
VM_NOT BOOL
VM_JZ L338
; THEN
VM_PUSH INT EF DTRetMain
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF DTRetMain
VM_LABEL L338
; END_IF
VM_RTS

; UsrAccessMenu()
VM_FUNCTION _UsrAccessMenu_
VM_DATA 0
; IF
VM_PUSH INT EF CntDwnPwdTypMenu
VM_PUSH_IMM INT 0
VM_CMP_GT INT
VM_JZ L339
; THEN
VM_PUSH INT EF CntDwnPwdTypMenu
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT EF CntDwnPwdTypMenu
VM_JUMP L340
VM_LABEL L339
; IF
VM_PUSH INT EF CntDwnPwdTypMenu
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_JZ L341
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X PwdTypMenu
VM_LABEL L341
; END_IF
VM_LABEL L340
VM_RTS

; CheckAlrm_Reset()
VM_FUNCTION _CheckAlrm_Reset_
VM_DATA 0
; IF
VM_PUSH BOOL EF En_CheckAlrm_Reset
VM_JZ L342
; THEN
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L343
; THEN
EF_GOTO_MASK Alrms_NoAlrms
VM_JUMP L344
VM_LABEL L343
; ELSE
VM_JSR _CheckActiveAlarm_
; END_IF
VM_LABEL L344
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_CheckAlrm_Reset
VM_LABEL L342
; END_IF
VM_RTS

; TIMED_LOOP()
VM_FUNCTION _TIMED_LOOP_
VM_DATA 0
VM_JSR _ButtonsSupport_
VM_JSR _PopUpSupport_
VM_JSR _ArrowSupport_
VM_JSR _NextCycleAction_
VM_JSR _ShowMessage_
VM_JSR _ShowQuestion_
VM_JSR _LoadMask_
VM_JSR _MyLoopFunction_
; IF
VM_PUSH BOOL X BootEnd
VM_NOT BOOL
VM_JZ L275
; THEN
VM_JSR _Boot_
VM_JUMP L298
VM_LABEL L275
; IF
VM_PUSH BOOL X GeneralMng.VerMismatch
VM_NOT BOOL
VM_JZ L299
; THEN
VM_JSR _CheckAlarm_
VM_JSR _BlinkQuickMenu_
VM_JSR _RetMainMsk_
VM_JSR _UsrAccessMenu_
VM_JSR _CheckAlrm_Reset_
VM_LABEL L299
; END_IF
VM_LABEL L298
VM_PUSH_IMM DINT 1
VM_PUSH_IMM UDINT 240
VM_SYSTEM 46
VM_POP_AWAY DINT
VM_PUSH_IMM DINT 2
VM_PUSH_IMM UDINT 240
VM_SYSTEM 19
VM_POP_AWAY DINT
VM_PUSH REAL X GeneralMng.BoardTemp_Msk
VM_POP REAL X BoardTempMsk
; IF
VM_PUSH UDINT X GeneralMng.BoardTyp[1]
VM_PUSH_IMM UDINT 12
VM_CMP_EQ UDINT
VM_JZ L346
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ShowTemp
VM_JUMP L347
VM_LABEL L346
; IF
VM_PUSH UDINT X GeneralMng.BoardTyp[1]
VM_PUSH_IMM UDINT 12
VM_CMP_NE UDINT
VM_JZ L348
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ShowTemp
VM_LABEL L348
; END_IF
VM_LABEL L347
; IF
VM_PUSH BOOL EF FirstCycleDone
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_JZ L349
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF FirstCycleDone
VM_PUSH DINT X STD_UOM_ZONE_UI
VM_SYSTEM 49
VM_POP_AWAY DINT
VM_LABEL L349
; END_IF
VM_RTS

; PopUpQuestion_Confirm()
VM_FUNCTION _PopUpQuestion_Confirm_
VM_DATA 0
VM_PUSH USINT EF popup_StatePRG
VM_POP USINT X StatePRG
; CASE
VM_PUSH USINT X PopUp_Question
; OF
VM_CASE USINT 1 L351
VM_CASE USINT 2 L352
VM_CASE USINT 3 L353
VM_CASE USINT 4 L354
VM_CASE USINT 5 L355
VM_CASE USINT 6 L356
VM_CASE USINT 8 L357
VM_CASE USINT 9 L358
VM_CASE USINT 10 L359
VM_CASE USINT 12 L360
VM_CASE USINT 13 L361
VM_CASE USINT 14 L362
VM_CASE USINT 15 L363
VM_CASE USINT 16 L364
VM_CASE USINT 18 L365
VM_CASE USINT 19 L366
VM_CASE USINT 20 L367
VM_CASE USINT 21 L368
VM_CASE USINT 22 L369
VM_CASE USINT 23 L370
VM_CASE USINT 24 L371
VM_CASE USINT 25 L372
VM_POP_AWAY USINT
VM_JUMP L350
VM_LABEL L351
VM_PUSH_IMM BOOL 1
VM_POP BOOL X LocalMode
VM_PUSH USINT EF STATE_PRG_ALWAYS_ON
VM_POP USINT X StatePRG
EF_RESTORE_MASK
EF_GOTO_CURSOR 0 10
VM_JUMP L350
VM_LABEL L352
EF_GOTO_MASK Reboot
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng.Reset_Params
VM_JUMP L350
VM_LABEL L353
EF_GOTO_MASK Reboot
VM_PUSH USINT EF temp_HeatType
VM_POP USINT X HeatType
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_Reboot
VM_JUMP L350
VM_LABEL L354
EF_GOTO_MASK Reboot
VM_PUSH USINT X temp_Role
VM_POP USINT X Role
VM_PUSH_IMM USINT 0
VM_POP USINT X FBus2.Protocol
VM_PUSH_IMM USINT 0
VM_POP USINT X BMS2.Protocol
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_Reboot
VM_JUMP L350
VM_LABEL L355
EF_GOTO_MASK Reboot
VM_PUSH USINT X Temp_MB_port
VM_POP USINT X MB_port
VM_PUSH USINT X Temp_MB_Address
VM_POP USINT X MB_Address
; CASE
VM_PUSH USINT X Temp_MB_port
; OF
VM_CASE USINT 0 L374
VM_CASE USINT 1 L375
VM_CASE USINT 2 L376
VM_CASE USINT 3 L377
VM_POP_AWAY USINT
VM_JUMP L373
VM_LABEL L374
VM_PUSH_IMM USINT 255
VM_POP USINT X Ethernet.Protocol[1]
VM_PUSH_IMM USINT 255
VM_POP USINT X BMS_card.Protocol
VM_PUSH_IMM USINT 255
VM_POP USINT X BMS2.Protocol
VM_JUMP L373
VM_LABEL L375
VM_PUSH_IMM USINT 4
VM_POP USINT X Ethernet.Protocol[1]
VM_PUSH_IMM USINT 255
VM_POP USINT X BMS_card.Protocol
VM_PUSH_IMM USINT 255
VM_POP USINT X BMS2.Protocol
VM_JUMP L373
VM_LABEL L376
VM_PUSH_IMM USINT 255
VM_POP USINT X Ethernet.Protocol[1]
VM_PUSH_IMM USINT 4
VM_POP USINT X BMS_card.Protocol
VM_PUSH_IMM USINT 255
VM_POP USINT X BMS2.Protocol
VM_PUSH UDINT X Temp_MB_Baudrate
VM_POP UDINT X BMS_card.Baudrate
VM_PUSH USINT X Temp_MB_StopBits
VM_POP USINT X BMS_card.StopBits
VM_PUSH USINT X Temp_MB_Parity
VM_POP USINT X BMS_card.Parity
VM_JUMP L373
VM_LABEL L377
VM_PUSH_IMM USINT 255
VM_POP USINT X Ethernet.Protocol[1]
VM_PUSH_IMM USINT 255
VM_POP USINT X BMS_card.Protocol
VM_PUSH_IMM USINT 4
VM_POP USINT X BMS2.Protocol
VM_PUSH UDINT X Temp_MB_Baudrate
VM_POP UDINT X BMS2.Baudrate
VM_PUSH USINT X Temp_MB_StopBits
VM_POP USINT X BMS2.StopBits
VM_PUSH USINT X Temp_MB_Parity
VM_POP USINT X BMS2.Parity
VM_LABEL L373
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_Reboot
VM_JUMP L350
VM_LABEL L356
VM_PUSH_IMM BOOL 1
VM_POP BOOL X write_EthernetSettings
VM_JSR _PopUp_ESC_
VM_JUMP L350
VM_LABEL L357
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Reset_Hours_Circ1_Comp[1]
VM_JSR _PopUp_ESC_
VM_JUMP L350
VM_LABEL L358
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Reset_Hours_Circ1_Comp[2]
VM_JSR _PopUp_ESC_
VM_JUMP L350
VM_LABEL L359
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Reset_Hours_Circ1_Comp[3]
VM_JSR _PopUp_ESC_
VM_JUMP L350
VM_LABEL L360
VM_JSR _GlobalEsc_
VM_JUMP L350
VM_LABEL L361
VM_PUSH_IMM UINT 0
VM_POP UINT X PwdIn
VM_PUSH_IMM INT 0
VM_POP INT EF IncrTmp
VM_PUSH_IMM INT 0
VM_POP INT X PwdRes
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnLogOut
VM_JSR _CleanPwd_
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF isPasswordRequest
EF_GOTO_MASK Pwd_LogIn
VM_JUMP L350
VM_LABEL L362
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ConfigMng.clearConfig
VM_PUSH USINT EF ConfigStartLevel
VM_POP USINT X CurLevel
VM_PUSH_IMM DINT 1
VM_POP DINT X CurList_Position
VM_JSR _PopUp_ESC_
VM_JUMP L350
VM_LABEL L363
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ConfigMng.setRButtons
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ConfigMng.setDefaultChoice
VM_JUMP L350
VM_LABEL L364
VM_PUSH_IMM USINT 5
VM_PUSH_IMM USINT 2
VM_JSR _GotoMaskID_USINT_USINT_
VM_JUMP L350
VM_LABEL L365
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.reset_ManualMode
VM_JSR _PopUp_ESC_
VM_JUMP L350
VM_LABEL L366
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ConfigMng.release_IO
VM_JSR _PopUp_ESC_
VM_JUMP L350
VM_LABEL L367
EF_GOTO_MASK Reboot
; IF
VM_PUSH BOOL X Role_Slave
VM_DUP BOOL
VM_JNZ L379
VM_POP_AWAY BOOL
VM_PUSH BOOL X is_TOP
VM_LABEL L379
VM_JZ L378
; THEN
VM_PUSH UDINT X Temp_MB_Baudrate
VM_POP UDINT X BMS2.Baudrate
VM_PUSH USINT X Temp_MB_StopBits
VM_POP USINT X BMS2.StopBits
VM_PUSH USINT X Temp_MB_Parity
VM_POP USINT X BMS2.Parity
VM_JUMP L380
VM_LABEL L378
; ELSE
VM_PUSH UDINT X Temp_MB_Baudrate
VM_POP UDINT X FBus2.Baudrate
VM_PUSH USINT X Temp_MB_StopBits
VM_POP USINT X FBus2.StopBits
VM_PUSH USINT X Temp_MB_Parity
VM_POP USINT X FBus2.Parity
; END_IF
VM_LABEL L380
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_Reboot
VM_JUMP L350
VM_LABEL L368
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ConfigMng.ConfigVerify
VM_JUMP L350
VM_LABEL L369
EF_GOTO_MASK Param_Mng
VM_PUSH_IMM BYTE 1
VM_POP BYTE X Upgrade.CurDrive
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Upgrade.restoreParam
VM_JUMP L350
VM_LABEL L370
EF_GOTO_MASK Param_Mng
VM_PUSH_IMM BYTE 1
VM_POP BYTE X Upgrade.CurDrive
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Upgrade.storeParam
VM_JUMP L350
VM_LABEL L371
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_Reboot
VM_JUMP L350
VM_LABEL L372
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.setChanges
VM_JSR _PopUp_ESC_
VM_LABEL L350
VM_RTS

; PopUpQuestion_Reject()
VM_FUNCTION _PopUpQuestion_Reject_
VM_DATA 0
; CASE
VM_PUSH USINT X PopUp_Question
; OF
VM_CASE USINT 3 L383
VM_CASE USINT 5 L384
VM_CASE USINT 16 L385
VM_CASE USINT 20 L386
VM_CASE USINT 21 L387
VM_POP_AWAY USINT
; ELSE
VM_JSR _PopUp_ESC_
VM_JUMP L382
VM_LABEL L383
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
VM_JSR _PopUp_ESC_
VM_JUMP L382
VM_LABEL L384
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
VM_PUSH USINT X MB_port
VM_POP USINT X Temp_MB_port
VM_PUSH USINT X MB_Address
VM_POP USINT X Temp_MB_Address
; CASE
VM_PUSH USINT X Temp_MB_port
; OF
VM_CASE USINT 0 L389
VM_CASE USINT 1 L390
VM_CASE USINT 2 L391
VM_CASE USINT 3 L392
VM_POP_AWAY USINT
VM_JUMP L388
VM_LABEL L389
VM_JUMP L388
VM_LABEL L390
VM_JUMP L388
VM_LABEL L391
VM_PUSH UDINT X BMS_card.Baudrate
VM_POP UDINT X Temp_MB_Baudrate
VM_PUSH USINT X BMS_card.StopBits
VM_POP USINT X Temp_MB_StopBits
VM_PUSH USINT X BMS_card.Parity
VM_POP USINT X Temp_MB_Parity
VM_JUMP L388
VM_LABEL L392
VM_PUSH UDINT X BMS2.Baudrate
VM_POP UDINT X Temp_MB_Baudrate
VM_PUSH USINT X BMS2.StopBits
VM_POP USINT X Temp_MB_StopBits
VM_PUSH USINT X BMS2.Parity
VM_POP USINT X Temp_MB_Parity
VM_LABEL L388
VM_JSR _Show_ports_
VM_JSR _PopUp_ESC_
VM_JUMP L382
VM_LABEL L385
VM_PUSH_IMM BYTE 0
VM_POP BYTE X ConfigMng.CurDrive
VM_JSR _PopUp_ESC_
VM_JUMP L382
VM_LABEL L386
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT EF popup_StatePRG
VM_JSR _PopUp_ESC_
VM_JUMP L382
VM_LABEL L387
VM_PUSH_IMM USINT 5
VM_PUSH_IMM USINT 0
VM_JSR _LoadMaskID_USINT_USINT_
VM_LABEL L382
VM_RTS

; LangMsk_Esc()
VM_FUNCTION _LangMsk_Esc_
VM_DATA 0
; IF
VM_PUSH BOOL X EnLangChg
VM_JZ L393
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnLangChg
VM_JUMP L394
VM_LABEL L393
; ELSE
VM_JSR _GlobalEsc_
; END_IF
VM_LABEL L394
VM_RTS

; Lang_Rus()
VM_FUNCTION _Lang_Rus_
VM_DATA 0
; IF
VM_PUSH DINT X GeneralMng.ID_Lang
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L396
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X GeneralMng.ID_Lang
VM_PUSH_IMM BOOL 1
VM_POP BOOL X LangRu
VM_PUSH_IMM BOOL 0
VM_POP BOOL X LangEn
VM_PUSH DINT X GeneralMng.ID_Lang
VM_SYSTEM 31
VM_POP_AWAY DINT
VM_LABEL L396
; END_IF
VM_RTS

; Lang_Eng()
VM_FUNCTION _Lang_Eng_
VM_DATA 0
; IF
VM_PUSH DINT X GeneralMng.ID_Lang
VM_PUSH_IMM DINT 1
VM_CMP_NE DINT
VM_JZ L397
; THEN
VM_PUSH_IMM DINT 1
VM_POP DINT X GeneralMng.ID_Lang
VM_PUSH_IMM BOOL 1
VM_POP BOOL X LangEn
VM_PUSH_IMM BOOL 0
VM_POP BOOL X LangRu
VM_PUSH DINT X GeneralMng.ID_Lang
VM_SYSTEM 31
VM_POP_AWAY DINT
VM_LABEL L397
; END_IF
VM_RTS

; Slave_Alrms_Esc()
VM_FUNCTION _Slave_Alrms_Esc_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_POP BOOL X CurSlaveAlarmShow
EF_RESTORE_MASK
EF_GOTO_CURSOR 0 10
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 4
VM_CMP_EQ USINT
VM_JZ L398
; THEN
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_LABEL L398
; END_IF
VM_RTS

; DoNothing()
VM_FUNCTION _DoNothing_
VM_DATA 0
VM_RTS

; ScrollAlarmLog_UP()
VM_FUNCTION _ScrollAlarmLog_UP_
VM_DATA 0
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L399
; THEN
EF_BEEP
VM_JUMP L400
VM_LABEL L399
; ELSE
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X AlrmLogsIdx
VM_PUSH DINT EF AlrmLogsIdxTemp
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT EF AlrmLogsIdxTemp
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_AMP DINT X AlrmLogCode
VM_PUSH_AMP USINT X AlrmLogEventType
VM_PUSH_AMP DINT X AlarmMng.AlrmLogTime
VM_SYSTEM 40
VM_POP DINT EF AlrmLogInfoErr
VM_JSR _CheckStoredVar_Log_
; END_IF
VM_LABEL L400
VM_RTS

; ScrollAlarmLog_DOWN()
VM_FUNCTION _ScrollAlarmLog_DOWN_
VM_DATA 0
VM_PUSH DINT X AlrmLogsIdx
VM_POP DINT EF AlrmLogsIdxTemp
VM_PUSH DINT EF AlrmLogsIdxTemp
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT EF AlrmLogsIdxTemp
VM_PUSH DINT EF AlrmLogsIdxTemp
VM_PUSH_AMP DINT EF AlrmLogCodeTemp
VM_PUSH_AMP USINT EF AlrmLogEventTypeTemp
VM_PUSH_AMP DINT EF AlrmLogTimeTemp
VM_SYSTEM 40
VM_POP DINT EF AlrmLogInfoErr
; IF
VM_PUSH DINT EF AlrmLogInfoErr
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L402
; THEN
EF_BEEP
VM_JUMP L403
VM_LABEL L402
; ELSE
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 999
VM_CMP_LT DINT
VM_JZ L405
; THEN
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X AlrmLogsIdx
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_AMP DINT X AlrmLogCode
VM_PUSH_AMP USINT X AlrmLogEventType
VM_PUSH_AMP DINT X AlarmMng.AlrmLogTime
VM_SYSTEM 40
VM_POP DINT EF AlrmLogInfoErr
VM_JSR _CheckStoredVar_Log_
VM_JUMP L406
VM_LABEL L405
; ELSE
VM_PUSH_IMM DINT 999
VM_POP DINT X AlrmLogsIdx
EF_BEEP
; END_IF
VM_LABEL L406
; END_IF
VM_LABEL L403
VM_RTS

; LedBlink()
VM_FUNCTION _LedBlink_
VM_DATA 0
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_RTS

; ScrollAlarm_UP()
VM_FUNCTION _ScrollAlarm_UP_
VM_DATA 0
VM_SYSTEM 32
VM_POP DINT X N_Alrms
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L408
; THEN
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_CMP_GT DINT
VM_DUP BOOL
VM_JZ L410
VM_POP_AWAY BOOL
VM_PUSH DINT X AlrmIdx
VM_PUSH DINT X N_Alrms
VM_CMP_LE DINT
VM_LABEL L410
VM_JZ L409
; THEN
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X AlrmIdx
VM_JUMP L411
VM_LABEL L409
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L412
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
EF_PREVIOUS_MASK
VM_JUMP L413
VM_LABEL L412
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L415
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L415
VM_JZ L414
; THEN
VM_PUSH DINT X N_Alrms
VM_POP DINT X AlrmIdx
EF_PREVIOUS_MASK
VM_LABEL L414
; END_IF
VM_LABEL L413
VM_LABEL L411
VM_PUSH DINT X AlrmIdx
VM_PUSH_AMP DINT X AlrmCode
VM_PUSH_AMP DINT X AlarmMng.AlrmTime
VM_SYSTEM 33
VM_POP_AWAY DINT
VM_JSR _CheckStoredVar_Alrm_
VM_JUMP L416
VM_LABEL L408
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L417
; THEN
EF_GOTO_MASK Alrms_NoAlrms
VM_LABEL L417
; END_IF
VM_LABEL L416
VM_RTS

; ScrollAlarm_DOWN()
VM_FUNCTION _ScrollAlarm_DOWN_
VM_DATA 0
VM_SYSTEM 32
VM_POP DINT X N_Alrms
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L419
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L419
VM_JZ L418
; THEN
EF_NEXT_MASK
VM_LABEL L418
; END_IF
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_GE DINT
VM_DUP BOOL
VM_JZ L421
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L421
VM_JZ L420
; THEN
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_GE DINT
VM_DUP BOOL
VM_JZ L423
VM_POP_AWAY BOOL
VM_PUSH DINT X AlrmIdx
VM_PUSH DINT X N_Alrms
VM_CMP_LT DINT
VM_LABEL L423
VM_JZ L422
; THEN
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X AlrmIdx
VM_JUMP L424
VM_LABEL L422
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH DINT X N_Alrms
VM_CMP_GE DINT
VM_JZ L425
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
EF_NEXT_MASK
VM_LABEL L425
; END_IF
VM_LABEL L424
VM_PUSH DINT X AlrmIdx
VM_PUSH_AMP DINT X AlrmCode
VM_PUSH_AMP DINT X AlarmMng.AlrmTime
VM_SYSTEM 33
VM_POP_AWAY DINT
VM_JSR _CheckStoredVar_Alrm_
VM_JUMP L426
VM_LABEL L420
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L427
; THEN
EF_GOTO_MASK Alrms_NoAlrms
VM_LABEL L427
; END_IF
VM_LABEL L426
VM_RTS

; ResetGlobalAlarm()
VM_FUNCTION _ResetGlobalAlarm_
VM_DATA 0
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 3
VM_CMP_GE INT
VM_DUP BOOL
VM_JNZ L429
VM_POP_AWAY BOOL
VM_PUSH BOOL EF Cmd_ResetAlarms
VM_LABEL L429
VM_JZ L428
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF Cmd_ResetAlarms
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_GE INT
VM_JZ L430
; THEN
VM_SYSTEM 36
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL X AlarmMng.AlrmResByPGD1
VM_PUSH_IMM DINT 1
VM_POP DINT X AlrmIdx
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF En_CheckAlrm_Reset
; IF
VM_PUSH BOOL X UnitOff
VM_DUP BOOL
VM_JZ L432
VM_POP_AWAY BOOL
VM_PUSH BOOL X Reserve.Use
VM_NOT BOOL
VM_LABEL L432
VM_JZ L431
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X KeybOnOff
VM_LABEL L431
; END_IF
VM_JUMP L433
VM_LABEL L430
; ELSE
VM_PUSH_IMM USINT 13
VM_JSR _ShowPopUpQuestion_USINT_
; END_IF
VM_LABEL L433
VM_LABEL L428
; END_IF
VM_RTS

; Slave_Alrms_ALARM()
VM_FUNCTION _Slave_Alrms_ALARM_
VM_DATA 0
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 3
VM_CMP_GE INT
VM_JZ L435
; THEN
VM_PUSH_IMM BOOL 1
VM_PUSH_AMP BOOL X SlaveAlrmRes[1]
VM_PUSH USINT X CurSlave
VM_ADDRESS USINT 1 30 16
VM_POPI BOOL
VM_LABEL L435
; END_IF
VM_RTS

; Slave_Alrms_UP()
VM_FUNCTION _Slave_Alrms_UP_
VM_DATA 0
; IF
VM_PUSH DINT X Slave_AlrmIdx
VM_PUSH_IMM DINT 1
VM_CMP_GT DINT
VM_DUP BOOL
VM_JZ L437
VM_POP_AWAY BOOL
VM_PUSH DINT X Slave_AlrmIdx
VM_PUSH DINT X Slave_N_Alrms
VM_CMP_LE DINT
VM_LABEL L437
VM_JZ L436
; THEN
VM_PUSH DINT X Slave_AlrmIdx
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X Slave_AlrmIdx
VM_JUMP L438
VM_LABEL L436
; IF
VM_PUSH DINT X Slave_AlrmIdx
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L439
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X Slave_AlrmIdx
EF_PREVIOUS_MASK
VM_JUMP L440
VM_LABEL L439
; IF
VM_PUSH DINT X Slave_AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L442
VM_POP_AWAY BOOL
VM_PUSH DINT X Slave_N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L442
VM_JZ L441
; THEN
VM_PUSH DINT X Slave_N_Alrms
VM_POP DINT X Slave_AlrmIdx
EF_PREVIOUS_MASK
VM_LABEL L441
; END_IF
VM_LABEL L440
VM_LABEL L438
VM_RTS

; Slave_Alrms_DOWN()
VM_FUNCTION _Slave_Alrms_DOWN_
VM_DATA 0
; IF
VM_PUSH DINT X Slave_AlrmIdx
VM_PUSH_IMM DINT 1
VM_CMP_GE DINT
VM_DUP BOOL
VM_JZ L444
VM_POP_AWAY BOOL
VM_PUSH DINT X Slave_AlrmIdx
VM_PUSH DINT X Slave_N_Alrms
VM_CMP_LT DINT
VM_LABEL L444
VM_JZ L443
; THEN
VM_PUSH DINT X Slave_AlrmIdx
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X Slave_AlrmIdx
VM_JUMP L445
VM_LABEL L443
; IF
VM_PUSH DINT X Slave_AlrmIdx
VM_PUSH DINT X Slave_N_Alrms
VM_CMP_EQ DINT
VM_JZ L446
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X Slave_AlrmIdx
EF_NEXT_MASK
VM_JUMP L447
VM_LABEL L446
; IF
VM_PUSH DINT X Slave_AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L449
VM_POP_AWAY BOOL
VM_PUSH DINT X Slave_N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L449
VM_JZ L448
; THEN
VM_PUSH_IMM DINT 1
VM_POP DINT X Slave_AlrmIdx
EF_NEXT_MASK
VM_LABEL L448
; END_IF
VM_LABEL L447
VM_LABEL L445
VM_RTS

; GotoMainMenu()
VM_FUNCTION _GotoMainMenu_
VM_DATA 0
; IF
VM_PUSH UINT X Display.MaskID
VM_PUSH UINT EF DF_MID_MMENU
VM_CMP_NE UINT
VM_JZ L450
; THEN
; IF
VM_PUSH BOOL X EnLogOut
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_JZ L451
; THEN
VM_PUSH_IMM USINT 2
VM_JSR _GotoMaskID_USINT_
VM_JUMP L452
VM_LABEL L451
; ELSE
VM_PUSH_IMM DINT 0
VM_POP DINT X CurMenuPoint
VM_PUSH_IMM USINT 1
VM_POP USINT X CurLevel
VM_PUSH_IMM USINT 3
VM_JSR _GotoMaskID_USINT_
; END_IF
VM_LABEL L452
VM_PUSH INT X PwdTyp
VM_POP INT X PwdTypMenu
VM_PUSH_IMM INT 5
VM_POP INT EF CntDwnPwdTypMenu
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 1
VM_POP DINT X CurList_Position
VM_LABEL L450
; END_IF
VM_RTS

; QuickMenuUP()
VM_FUNCTION _QuickMenuUP_
VM_DATA 0
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF IdxQM
; IF
VM_PUSH INT EF IdxQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_CMP_GT INT
VM_JZ L454
; THEN
VM_PUSH_IMM INT 1
VM_POP INT EF IdxQM
VM_PUSH_IMM INT 1
VM_POP INT X IdxImgQM
VM_JUMP L455
VM_LABEL L454
; ELSE
VM_PUSH INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImgQM
; END_IF
VM_LABEL L455
; CASE
VM_PUSH USINT X ModelLine
; OF
VM_CASE USINT 2 L458
VM_CASE USINT 3 L459
VM_CASE USINT 4 L459
VM_CASE USINT 5 L459
VM_CASE USINT 7 L460
VM_POP_AWAY USINT
VM_JUMP L457
VM_LABEL L458
; IF
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 3
VM_CMP_EQ INT
VM_JZ L461
; THEN
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF IdxQM
VM_PUSH INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImgQM
VM_LABEL L461
; END_IF
VM_JUMP L457
VM_LABEL L459
; IF
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_JZ L462
; THEN
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF IdxQM
VM_PUSH INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImgQM
VM_LABEL L462
; END_IF
VM_JUMP L457
VM_LABEL L460
; IF
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 3
VM_CMP_EQ INT
VM_JZ L463
; THEN
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF IdxQM
VM_PUSH INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImgQM
VM_LABEL L463
; END_IF
; IF
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_JZ L464
; THEN
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF IdxQM
VM_PUSH INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImgQM
VM_LABEL L464
; END_IF
VM_LABEL L457
; IF
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 5
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L466
VM_POP_AWAY BOOL
VM_PUSH BOOL X EQ_Humid.Use
VM_NOT BOOL
VM_LABEL L466
VM_JZ L465
; THEN
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF IdxQM
VM_PUSH INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImgQM
VM_LABEL L465
; END_IF
VM_RTS

; QuickMenuDOWN()
VM_FUNCTION _QuickMenuDOWN_
VM_DATA 0
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT EF IdxQM
; IF
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_CMP_LT INT
VM_JZ L467
; THEN
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_POP INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_POP INT EF IdxQM
VM_JUMP L468
VM_LABEL L467
; ELSE
VM_PUSH INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImgQM
; END_IF
VM_LABEL L468
; IF
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 5
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L471
VM_POP_AWAY BOOL
VM_PUSH BOOL X EQ_Humid.Use
VM_NOT BOOL
VM_LABEL L471
VM_JZ L470
; THEN
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT EF IdxQM
VM_PUSH INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImgQM
VM_LABEL L470
; END_IF
; CASE
VM_PUSH USINT X ModelLine
; OF
VM_CASE USINT 2 L473
VM_CASE USINT 3 L474
VM_CASE USINT 4 L474
VM_CASE USINT 5 L474
VM_CASE USINT 7 L475
VM_POP_AWAY USINT
VM_JUMP L472
VM_LABEL L473
; IF
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 3
VM_CMP_EQ INT
VM_JZ L476
; THEN
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT EF IdxQM
VM_PUSH INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImgQM
VM_LABEL L476
; END_IF
VM_JUMP L472
VM_LABEL L474
; IF
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_JZ L477
; THEN
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT EF IdxQM
VM_PUSH INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImgQM
VM_LABEL L477
; END_IF
VM_JUMP L472
VM_LABEL L475
; IF
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_JZ L478
; THEN
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT EF IdxQM
VM_PUSH INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImgQM
VM_LABEL L478
; END_IF
; IF
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 3
VM_CMP_EQ INT
VM_JZ L479
; THEN
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT EF IdxQM
VM_PUSH INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImgQM
VM_LABEL L479
; END_IF
VM_LABEL L472
VM_RTS

; QuickMenuENT()
VM_FUNCTION _QuickMenuENT_
VM_DATA 0
; CASE
VM_PUSH INT EF IdxQM
; OF
VM_CASE INT 1 L481
VM_CASE INT 2 L482
VM_CASE INT 3 L483
VM_CASE INT 4 L484
VM_CASE INT 5 L485
VM_CASE INT 6 L486
VM_CASE INT 7 L487
VM_POP_AWAY INT
VM_JUMP L480
VM_LABEL L481
VM_PUSH_IMM USINT 4
VM_JSR _GotoMaskID_USINT_
VM_JUMP L480
VM_LABEL L482
VM_PUSH_IMM USINT 43
VM_JSR _GotoMaskID_USINT_
VM_JUMP L480
VM_LABEL L483
VM_PUSH_IMM USINT 40
VM_JSR _GotoMaskID_USINT_
VM_JUMP L480
VM_LABEL L484
VM_PUSH_IMM USINT 41
VM_JSR _GotoMaskID_USINT_
VM_JUMP L480
VM_LABEL L485
VM_PUSH_IMM USINT 44
VM_JSR _GotoMaskID_USINT_
VM_JUMP L480
VM_LABEL L486
VM_PUSH_IMM USINT 42
VM_JSR _GotoMaskID_USINT_
VM_JUMP L480
VM_LABEL L487
VM_PUSH_IMM USINT 9
VM_JSR _GotoMaskID_USINT_
VM_LABEL L480
VM_RTS

; CompareOnly()
VM_FUNCTION _CompareOnly_
VM_DATA 0
EF_COMPARE
VM_RTS

; Move_CurLeft()
VM_FUNCTION _Move_CurLeft_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_PUSH_AMP BOOL X CurShow[1]
VM_PUSH USINT X CurPosition
VM_ADDRESS USINT 1 30 16
VM_POPI BOOL
; IF
VM_PUSH USINT X CurPosition
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L488
; THEN
VM_PUSH USINT X Num_Slaves
VM_POP USINT X CurPosition
VM_JUMP L489
VM_LABEL L488
; ELSE
VM_PUSH USINT X CurPosition
VM_PUSH_IMM USINT 1
VM_SUB USINT
VM_POP USINT X CurPosition
; END_IF
VM_LABEL L489
VM_PUSH_IMM BOOL 1
VM_PUSH_AMP BOOL X CurShow[1]
VM_PUSH USINT X CurPosition
VM_ADDRESS USINT 1 30 16
VM_POPI BOOL
VM_RTS

; Move_CurRight()
VM_FUNCTION _Move_CurRight_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_PUSH_AMP BOOL X CurShow[1]
VM_PUSH USINT X CurPosition
VM_ADDRESS USINT 1 30 16
VM_POPI BOOL
; IF
VM_PUSH USINT X CurPosition
VM_PUSH USINT X Num_Slaves
VM_CMP_EQ USINT
VM_JZ L491
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X CurPosition
VM_JUMP L492
VM_LABEL L491
; ELSE
VM_PUSH USINT X CurPosition
VM_PUSH_IMM USINT 1
VM_ADD USINT
VM_POP USINT X CurPosition
; END_IF
VM_LABEL L492
VM_PUSH_IMM BOOL 1
VM_PUSH_AMP BOOL X CurShow[1]
VM_PUSH USINT X CurPosition
VM_ADDRESS USINT 1 30 16
VM_POPI BOOL
VM_RTS

; NetMapEsc()
VM_FUNCTION _NetMapEsc_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_PUSH_AMP BOOL X CurShow[1]
VM_PUSH USINT X CurPosition
VM_ADDRESS USINT 1 30 16
VM_POPI BOOL
VM_JSR _GotoMain_
VM_RTS

; OnOffSwitch_UP()
VM_FUNCTION _OnOffSwitch_UP_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X KeybOnOff
VM_RTS

; OnOffSwitch_DOWN()
VM_FUNCTION _OnOffSwitch_DOWN_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_POP BOOL X KeybOnOff
VM_RTS

; Set_PRG()
VM_FUNCTION _Set_PRG_
VM_DATA 0
; IF
VM_PUSH BOOL X Role_Slave
VM_DUP BOOL
VM_JZ L495
VM_POP_AWAY BOOL
VM_PUSH BOOL X LocalMode
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_LABEL L495
VM_JZ L494
; THEN
VM_PUSH USINT EF STATE_PRG_ALWAYS_ON
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L496
VM_LABEL L494
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X setParam
; END_IF
VM_LABEL L496
VM_RTS

; Set_UP()
VM_FUNCTION _Set_UP_
VM_DATA 0
; IF
VM_PUSH BOOL X Role_Slave
VM_JZ L498
; THEN
; IF
VM_PUSH BOOL X LocalMode
VM_JZ L499
; THEN
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_ADD REAL
VM_POP REAL X Display.value_REAL[1]
; IF
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH REAL X Display.value_MaxREAL[1]
VM_CMP_GT REAL
VM_JZ L500
; THEN
VM_PUSH REAL X Display.value_MinREAL[1]
VM_POP REAL X Display.value_REAL[1]
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
EF_BEEP
VM_LABEL L500
; END_IF
VM_JUMP L501
VM_LABEL L499
; ELSE
VM_JSR _Set_PRG_
; END_IF
VM_LABEL L501
VM_JUMP L503
VM_LABEL L498
; ELSE
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_ADD REAL
VM_POP REAL X Display.value_REAL[1]
; IF
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH REAL X Display.value_MaxREAL[1]
VM_CMP_GT REAL
VM_JZ L505
; THEN
VM_PUSH REAL X Display.value_MinREAL[1]
VM_POP REAL X Display.value_REAL[1]
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
EF_BEEP
VM_LABEL L505
; END_IF
; END_IF
VM_LABEL L503
VM_PUSH_IMM BOOL 1
VM_POP BOOL X upArrow
VM_RTS

; Set_DOWN()
VM_FUNCTION _Set_DOWN_
VM_DATA 0
; IF
VM_PUSH BOOL X Role_Slave
VM_JZ L506
; THEN
; IF
VM_PUSH BOOL X LocalMode
VM_JZ L507
; THEN
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_SUB REAL
VM_POP REAL X Display.value_REAL[1]
; IF
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH REAL X Display.value_MinREAL[1]
VM_CMP_LT REAL
VM_JZ L508
; THEN
VM_PUSH REAL X Display.value_MaxREAL[1]
VM_POP REAL X Display.value_REAL[1]
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
EF_BEEP
VM_LABEL L508
; END_IF
VM_JUMP L509
VM_LABEL L507
; ELSE
VM_JSR _Set_PRG_
; END_IF
VM_LABEL L509
VM_JUMP L511
VM_LABEL L506
; ELSE
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_SUB REAL
VM_POP REAL X Display.value_REAL[1]
; IF
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH REAL X Display.value_MinREAL[1]
VM_CMP_LT REAL
VM_JZ L513
; THEN
VM_PUSH REAL X Display.value_MaxREAL[1]
VM_POP REAL X Display.value_REAL[1]
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
EF_BEEP
VM_LABEL L513
; END_IF
; END_IF
VM_LABEL L511
VM_PUSH_IMM BOOL 1
VM_POP BOOL X downArrow
VM_RTS

; SET_ENTER()
VM_FUNCTION _SET_ENTER_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X setParam
VM_RTS

; SlaveSet_ENTER()
VM_FUNCTION _SlaveSet_ENTER_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L514
; THEN
EF_COMPARE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ApplyCurSettings
EF_NEXT_FIELD
VM_LABEL L514
; END_IF
VM_RTS

; SlaveState_ALARM()
VM_FUNCTION _SlaveState_ALARM_
VM_DATA 0
EF_STORE_MASK
; IF
VM_PUSH USINT X CurState
VM_PUSH_IMM USINT 8
VM_CMP_EQ USINT
VM_JZ L515
; THEN
VM_PUSH_IMM USINT 3
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_JUMP L516
VM_LABEL L515
; ELSE
; IF
VM_PUSH_AMP INT X WORDs_SlaveAlarms[1]
VM_PUSH USINT X CurSlave
VM_ADDRESS USINT 1 30 16
VM_PUSHI INT
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_JZ L518
; THEN
EF_GOTO_MASK Slave_NoAlrms
VM_JUMP L519
VM_LABEL L518
; ELSE
VM_PUSH_IMM DINT 1
VM_POP DINT X Slave_AlrmIdx
VM_PUSH_IMM BOOL 1
VM_POP BOOL X CurSlaveAlarmShow
EF_GOTO_MASK Slave_Alrms
; END_IF
VM_LABEL L519
; END_IF
VM_LABEL L516
VM_RTS

; SlaveState_PRG()
VM_FUNCTION _SlaveState_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L521
; THEN
EF_STORE_MASK
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
VM_JUMP L522
VM_LABEL L521
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L523
; THEN
EF_COMPARE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ApplyCurSettings
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
VM_LABEL L523
; END_IF
VM_LABEL L522
VM_RTS

; DOWN_button()
VM_FUNCTION _DOWN_button_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_OFF
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L525
VM_POP_AWAY BOOL
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_LABEL L525
VM_JZ L524
; THEN
VM_JSR _Move_DOWN_
VM_LABEL L524
; END_IF
VM_RTS

; UP_button()
VM_FUNCTION _UP_button_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_OFF
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L527
VM_POP_AWAY BOOL
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_LABEL L527
VM_JZ L526
; THEN
VM_JSR _Move_UP_
VM_LABEL L526
; END_IF
VM_RTS

; PwdLogOut()
VM_FUNCTION _PwdLogOut_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnLogOut
VM_PUSH_IMM INT 0
VM_POP INT X PwdTyp
VM_PUSH_IMM UINT 0
VM_POP UINT X PwdIn
VM_PUSH_IMM INT 0
VM_POP INT X PwdRes
VM_PUSH INT X PwdTyp
VM_POP INT X PwdTypMenu
VM_PUSH_IMM BOOL 0
VM_POP BOOL X PwdDev
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
VM_JSR _ClearHistory_
VM_PUSH_IMM USINT 1
VM_PUSH_IMM USINT 0
VM_JSR _LoadMaskID_USINT_USINT_
VM_RTS

; PwdLogIn()
VM_FUNCTION _PwdLogIn_
VM_DATA 0
EF_COMPARE
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF IncrTmp
EF_DIGIT_RIGHT
; CASE
VM_PUSH INT EF IncrTmp
; OF
VM_CASE INT 1 L529
VM_CASE INT 2 L530
VM_CASE INT 3 L531
VM_POP_AWAY INT
; ELSE
VM_JSR _CleanPwd_
VM_JUMP L528
VM_LABEL L529
VM_PUSH_IMM BOOL 1
VM_POP BOOL X hide_PassDigit1
VM_JUMP L528
VM_LABEL L530
VM_PUSH_IMM BOOL 1
VM_POP BOOL X hide_PassDigit2
VM_JUMP L528
VM_LABEL L531
VM_PUSH_IMM BOOL 1
VM_POP BOOL X hide_PassDigit3
VM_LABEL L528
; IF
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng.PwdUser
VM_CMP_NE UINT
VM_DUP BOOL
VM_JZ L533
VM_POP_AWAY BOOL
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng.PwdService
VM_CMP_NE UINT
VM_LABEL L533
VM_DUP BOOL
VM_JZ L534
VM_POP_AWAY BOOL
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng.RESERVED1
VM_CMP_NE UINT
VM_LABEL L534
VM_DUP BOOL
VM_JZ L535
VM_POP_AWAY BOOL
VM_PUSH UINT X PwdIn
VM_PUSH_IMM UINT 9274
VM_CMP_NE UINT
VM_LABEL L535
VM_DUP BOOL
VM_JZ L536
VM_POP_AWAY BOOL
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_LABEL L536
VM_JZ L532
; THEN
VM_PUSH_IMM UDINT 0
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_PUSH_IMM INT 1
VM_POP INT X PwdRes
VM_PUSH_IMM INT 0
VM_POP INT EF IncrTmp
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnLogOut
VM_JUMP L537
VM_LABEL L532
; IF
VM_PUSH UINT X PwdIn
VM_PUSH_IMM UINT 9274
VM_CMP_EQ UINT
VM_DUP BOOL
VM_JZ L539
VM_POP_AWAY BOOL
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_LABEL L539
VM_JZ L538
; THEN
VM_PUSH_IMM INT 4
VM_POP INT X PwdTyp
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnLogOut
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgU
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgS
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgM
VM_PUSH_IMM BOOL 1
VM_POP BOOL X PwdDev
VM_JUMP L540
VM_LABEL L538
; IF
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng.RESERVED1
VM_CMP_EQ UINT
VM_DUP BOOL
VM_JZ L542
VM_POP_AWAY BOOL
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_LABEL L542
VM_JZ L541
; THEN
VM_PUSH_IMM INT 3
VM_POP INT X PwdTyp
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnLogOut
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgU
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgS
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgM
VM_JUMP L543
VM_LABEL L541
; IF
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng.PwdService
VM_CMP_EQ UINT
VM_DUP BOOL
VM_JZ L545
VM_POP_AWAY BOOL
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_LABEL L545
VM_JZ L544
; THEN
VM_PUSH_IMM INT 2
VM_POP INT X PwdTyp
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnLogOut
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgU
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgS
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnPwdChgM
VM_JUMP L546
VM_LABEL L544
; IF
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng.PwdUser
VM_CMP_EQ UINT
VM_DUP BOOL
VM_JZ L548
VM_POP_AWAY BOOL
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_LABEL L548
VM_JZ L547
; THEN
VM_PUSH_IMM INT 1
VM_POP INT X PwdTyp
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnLogOut
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgU
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnPwdChgS
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnPwdChgM
VM_LABEL L547
; END_IF
VM_LABEL L546
VM_LABEL L543
VM_LABEL L540
VM_LABEL L537
; IF
VM_PUSH BOOL X Prepare_2.EnPwdChgM
VM_PUSH BOOL X EnPwdChgM
VM_CMP_NE BOOL
VM_DUP BOOL
VM_JNZ L550
VM_POP_AWAY BOOL
VM_PUSH BOOL X Prepare_2.EnPwdChgS
VM_PUSH BOOL X EnPwdChgS
VM_CMP_NE BOOL
VM_LABEL L550
VM_DUP BOOL
VM_JNZ L551
VM_POP_AWAY BOOL
VM_PUSH BOOL X Prepare_2.EnPwdChgU
VM_PUSH BOOL X EnPwdChgU
VM_CMP_NE BOOL
VM_LABEL L551
VM_JZ L549
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X MainMenuVisibility_Is_Set
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ParamVisibility_Is_Set
VM_PUSH BOOL X EnPwdChgS
VM_POP BOOL X Prepare_2.EnPwdChgS
VM_PUSH BOOL X EnPwdChgM
VM_POP BOOL X Prepare_2.EnPwdChgM
VM_PUSH BOOL X EnPwdChgU
VM_POP BOOL X Prepare_2.EnPwdChgU
VM_LABEL L549
; END_IF
VM_PUSH INT X PwdTyp
VM_POP INT X PwdTypMenu
VM_PUSH_IMM INT 5
VM_POP INT EF CntDwnPwdTypMenu
; IF
VM_PUSH BOOL X EnLogOut
VM_JZ L552
; THEN
; IF
VM_PUSH BOOL EF isPasswordRequest
VM_JZ L553
; THEN
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_GE INT
VM_JZ L554
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF isPasswordRequest
EF_RESTORE_MASK
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF Cmd_ResetAlarms
VM_JSR _ResetGlobalAlarm_
VM_JUMP L555
VM_LABEL L554
; ELSE
EF_RESTORE_MASK
VM_PUSH_IMM USINT 9
VM_POP USINT X NextCycleAction
; END_IF
VM_LABEL L555
VM_JUMP L557
VM_LABEL L553
; ELSE
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurMenuPoint
VM_PUSH_IMM USINT 1
VM_POP USINT X CurLevel
VM_PUSH_IMM USINT 3
VM_PUSH_IMM USINT 0
VM_JSR _LoadMaskID_USINT_USINT_
; END_IF
VM_LABEL L557
VM_LABEL L552
; END_IF
VM_RTS

; DecrDig()
VM_FUNCTION _DecrDig_
VM_DATA 0
EF_DECR_DIGIT
VM_RTS

; IncrDig()
VM_FUNCTION _IncrDig_
VM_DATA 0
EF_INCR_DIGIT
VM_RTS

; PRG_button()
VM_FUNCTION _PRG_button_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L559
; THEN
; IF
VM_PUSH BOOL X is_TOP
VM_DUP BOOL
VM_JZ L561
VM_POP_AWAY BOOL
VM_PUSH BOOL X FLR_Disc_CTRL.Active
VM_LABEL L561
VM_JZ L560
; THEN
VM_PUSH_IMM USINT 8
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_JUMP L562
VM_LABEL L560
; ELSE
EF_STORE_MASK
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
; END_IF
VM_LABEL L562
VM_JUMP L564
VM_LABEL L559
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L565
; THEN
EF_COMPARE
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
VM_LABEL L565
; END_IF
VM_LABEL L564
VM_RTS

; SetTimeZoneRu()
VM_FUNCTION _SetTimeZoneRu_
VM_DATA 0
EF_COMPARE
; IF
VM_PUSH INT X SetTimeZoneTmp
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L566
; THEN
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 0
VM_CMP_EQ UINT
VM_JZ L567
; THEN
VM_PUSH_IMM UINT 34
VM_POP UINT X TimeZoneTmp
VM_JUMP L568
VM_LABEL L567
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 1
VM_CMP_EQ UINT
VM_JZ L569
; THEN
VM_PUSH_IMM UINT 49
VM_POP UINT X TimeZoneTmp
VM_JUMP L570
VM_LABEL L569
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 2
VM_CMP_EQ UINT
VM_JZ L571
; THEN
VM_PUSH_IMM UINT 55
VM_POP UINT X TimeZoneTmp
VM_JUMP L572
VM_LABEL L571
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 3
VM_CMP_EQ UINT
VM_JZ L573
; THEN
VM_PUSH_IMM UINT 57
VM_POP UINT X TimeZoneTmp
VM_JUMP L574
VM_LABEL L573
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 4
VM_CMP_EQ UINT
VM_JZ L575
; THEN
VM_PUSH_IMM UINT 66
VM_POP UINT X TimeZoneTmp
VM_JUMP L576
VM_LABEL L575
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 5
VM_CMP_EQ UINT
VM_JZ L577
; THEN
VM_PUSH_IMM UINT 64
VM_POP UINT X TimeZoneTmp
VM_JUMP L578
VM_LABEL L577
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 6
VM_CMP_EQ UINT
VM_JZ L579
; THEN
VM_PUSH_IMM UINT 71
VM_POP UINT X TimeZoneTmp
VM_JUMP L580
VM_LABEL L579
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 7
VM_CMP_EQ UINT
VM_JZ L581
; THEN
VM_PUSH_IMM UINT 76
VM_POP UINT X TimeZoneTmp
VM_JUMP L582
VM_LABEL L581
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 8
VM_CMP_EQ UINT
VM_JZ L583
; THEN
VM_PUSH_IMM UINT 84
VM_POP UINT X TimeZoneTmp
VM_JUMP L584
VM_LABEL L583
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 9
VM_CMP_EQ UINT
VM_JZ L585
; THEN
VM_PUSH_IMM UINT 86
VM_POP UINT X TimeZoneTmp
VM_JUMP L586
VM_LABEL L585
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 10
VM_CMP_EQ UINT
VM_JZ L587
; THEN
VM_PUSH_IMM UINT 90
VM_POP UINT X TimeZoneTmp
VM_JUMP L588
VM_LABEL L587
; IF
VM_PUSH UINT X TimeZoneTmpRu
VM_PUSH_IMM UINT 11
VM_CMP_EQ UINT
VM_JZ L589
; THEN
VM_PUSH_IMM UINT 91
VM_POP UINT X TimeZoneTmp
VM_LABEL L589
; END_IF
VM_LABEL L588
VM_LABEL L586
VM_LABEL L584
VM_LABEL L582
VM_LABEL L580
VM_LABEL L578
VM_LABEL L576
VM_LABEL L574
VM_LABEL L572
VM_LABEL L570
VM_LABEL L568
VM_PUSH UINT X TimeZoneTmp
VM_POP UINT X GeneralMng.Zone_Write
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng.SetTimezone
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng.ReadTimezone
VM_PUSH_IMM INT 0
VM_POP INT X SetTimeZoneTmp
VM_LABEL L566
; END_IF
EF_NEXT_FIELD
VM_RTS

; SetTimeZone()
VM_FUNCTION _SetTimeZone_
VM_DATA 0
EF_COMPARE
; IF
VM_PUSH INT X SetTimeZoneTmp
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L590
; THEN
VM_PUSH UINT X TimeZoneTmp
VM_POP UINT X GeneralMng.Zone_Write
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng.SetTimezone
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng.ReadTimezone
VM_PUSH_IMM INT 0
VM_POP INT X SetTimeZoneTmp
VM_LABEL L590
; END_IF
EF_NEXT_FIELD
VM_RTS

; TZUp()
VM_FUNCTION _TZUp_
VM_DATA 0
VM_JSR _Increment_WORD_
EF_COMPARE
VM_RTS

; TZDwn()
VM_FUNCTION _TZDwn_
VM_DATA 0
VM_JSR _Decrement_WORD_
EF_COMPARE
VM_RTS

; EnDateChg()
VM_FUNCTION _EnDateChg_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng.En_Date
EF_COMPARE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X TimeChangedLocal
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_TimeSync
VM_RTS

; Date_PRG_button()
VM_FUNCTION _Date_PRG_button_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L591
; THEN
; IF
VM_PUSH BOOL X is_TOP
VM_DUP BOOL
VM_JZ L593
VM_POP_AWAY BOOL
VM_PUSH BOOL X FLR_Disc_CTRL.Active
VM_LABEL L593
VM_JZ L592
; THEN
VM_PUSH_IMM USINT 8
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_JUMP L594
VM_LABEL L592
; IF
VM_PUSH BOOL X IsDLE
VM_DUP BOOL
VM_JZ L596
VM_POP_AWAY BOOL
VM_PUSH BOOL X Role_Slave
VM_LABEL L596
VM_JZ L595
; THEN
VM_PUSH_IMM USINT 10
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_JUMP L597
VM_LABEL L595
; ELSE
EF_STORE_MASK
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
VM_PUSH UINT X GeneralMng.Second
VM_POP UINT X GeneralMng.SecondIn
VM_PUSH UINT X GeneralMng.Minute
VM_POP UINT X GeneralMng.MinuteIn
VM_PUSH UINT X GeneralMng.Hour
VM_POP UINT X GeneralMng.HourIn
VM_PUSH UINT X GeneralMng.Day
VM_POP UINT X GeneralMng.DayIn
VM_PUSH UINT X GeneralMng.Month
VM_POP UINT X GeneralMng.MonthIn
VM_PUSH UINT X GeneralMng.Year
VM_POP UINT X GeneralMng.YearIn
VM_PUSH UINT X GeneralMng.Zone_Read
VM_POP UINT X TimeZoneTmp
; END_IF
VM_LABEL L597
VM_LABEL L594
VM_JUMP L599
VM_LABEL L591
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L600
; THEN
VM_JSR _EnDateChg_
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
VM_LABEL L600
; END_IF
VM_LABEL L599
VM_RTS

; SlaveSet_ESC()
VM_FUNCTION _SlaveSet_ESC_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_POP BOOL X CurSlaveShow
; IF
VM_SYSTEM 32
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L601
; THEN
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_JUMP L602
VM_LABEL L601
; ELSE
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; END_IF
VM_LABEL L602
VM_JSR _GlobalEsc_
VM_RTS

; SlaveSet_PRG()
VM_FUNCTION _SlaveSet_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L604
; THEN
EF_STORE_MASK
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
VM_JUMP L605
VM_LABEL L604
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L606
; THEN
EF_COMPARE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ApplyCurSettings
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
VM_LABEL L606
; END_IF
VM_LABEL L605
VM_RTS

; SlaveSet_UP()
VM_FUNCTION _SlaveSet_UP_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_OFF
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L608
VM_POP_AWAY BOOL
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_LABEL L608
VM_JZ L607
; THEN
; IF
VM_PUSH BOOL X CurSlaveShow
VM_JZ L609
; THEN
; IF
VM_PUSH USINT X CurSlave
VM_PUSH_IMM USINT 1
VM_CMP_GT USINT
VM_JZ L610
; THEN
VM_PUSH USINT X CurSlave
VM_PUSH_IMM USINT 1
VM_SUB USINT
VM_POP USINT X CurSlave
VM_JUMP L611
VM_LABEL L610
; ELSE
VM_PUSH USINT X Num_Slaves
VM_POP USINT X CurSlave
; END_IF
VM_LABEL L611
VM_LABEL L609
; END_IF
VM_LABEL L607
; END_IF
VM_RTS

; SlaveSet_ALARM()
VM_FUNCTION _SlaveSet_ALARM_
VM_DATA 0
EF_STORE_MASK
VM_PUSH_IMM USINT 4
VM_POP USINT X StatePRG
; IF
VM_PUSH USINT X CurState
VM_PUSH_IMM USINT 8
VM_CMP_EQ USINT
VM_JZ L613
; THEN
VM_PUSH_IMM USINT 3
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_JUMP L614
VM_LABEL L613
; ELSE
; IF
VM_PUSH_AMP INT X WORDs_SlaveAlarms[1]
VM_PUSH USINT X CurSlave
VM_ADDRESS USINT 1 30 16
VM_PUSHI INT
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_JZ L616
; THEN
EF_GOTO_MASK Slave_NoAlrms
VM_JUMP L617
VM_LABEL L616
; ELSE
VM_PUSH_IMM DINT 1
VM_POP DINT X Slave_AlrmIdx
VM_PUSH_IMM BOOL 1
VM_POP BOOL X CurSlaveAlarmShow
EF_GOTO_MASK Slave_Alrms
; END_IF
VM_LABEL L617
; END_IF
VM_LABEL L614
VM_RTS

; SlaveSet_DOWN()
VM_FUNCTION _SlaveSet_DOWN_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_OFF
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L620
VM_POP_AWAY BOOL
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_LABEL L620
VM_JZ L619
; THEN
; IF
VM_PUSH BOOL X CurSlaveShow
VM_JZ L621
; THEN
; IF
VM_PUSH USINT X CurSlave
VM_PUSH USINT X Num_Slaves
VM_CMP_LT USINT
VM_JZ L622
; THEN
VM_PUSH USINT X CurSlave
VM_PUSH_IMM USINT 1
VM_ADD USINT
VM_POP USINT X CurSlave
VM_JUMP L623
VM_LABEL L622
; ELSE
VM_PUSH_IMM USINT 1
VM_POP USINT X CurSlave
; END_IF
VM_LABEL L623
VM_LABEL L621
; END_IF
VM_LABEL L619
; END_IF
VM_RTS

; ChgPwd()
VM_FUNCTION _ChgPwd_
VM_DATA 0
EF_COMPARE
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF IncrTmp
; IF
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 4
VM_CMP_GE INT
VM_JZ L625
; THEN
EF_NEXT_FIELD
VM_PUSH_IMM INT 0
VM_POP INT EF IncrTmp
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng.WritePwd
VM_JUMP L626
VM_LABEL L625
; ELSE
EF_DIGIT_RIGHT
; END_IF
VM_LABEL L626
VM_RTS

; SetUoMZone_UI()
VM_FUNCTION _SetUoMZone_UI_
VM_DATA 0
EF_COMPARE
VM_PUSH DINT X STD_UOM_ZONE_UI
VM_SYSTEM 49
VM_POP_AWAY DINT
EF_NEXT_FIELD
VM_RTS

; ENTER_button()
VM_FUNCTION _ENTER_button_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L628
; THEN
EF_COMPARE
EF_NEXT_FIELD
VM_LABEL L628
; END_IF
VM_RTS

; DeleteAlarmLog()
VM_FUNCTION _DeleteAlarmLog_
VM_DATA 0
; IF
VM_PUSH BOOL X AlrmLogDelete
VM_PUSH_IMM BOOL 1
VM_CMP_EQ BOOL
VM_JZ L629
; THEN
VM_SYSTEM 43
VM_POP_AWAY DINT
VM_PUSH USINT EF POPUP_TIME
VM_POP USINT X DTPopUp
EF_STORE_MASK
EF_GOTO_MASK AlrmLog_Cleared
VM_PUSH_IMM BOOL 0
VM_POP BOOL X AlrmLogDelete
VM_LABEL L629
; END_IF
EF_NEXT_FIELD
VM_RTS

; ClearAutoResetCounter()
VM_FUNCTION _ClearAutoResetCounter_
VM_DATA 0
; IF
VM_PUSH BOOL X ClrAutoResCounters
VM_PUSH_IMM BOOL 1
VM_CMP_EQ BOOL
VM_JZ L630
; THEN
VM_SYSTEM 38
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ClrAutoResCounters
VM_JSR _GlobalEsc_
VM_JUMP L631
VM_LABEL L630
; ELSE
EF_NEXT_FIELD
; END_IF
VM_LABEL L631
VM_RTS

; WipeMem()
VM_FUNCTION _WipeMem_
VM_DATA 0
; IF
VM_PUSH BOOL X En_WipeRetain
VM_JZ L633
; THEN
VM_PUSH_IMM UDINT 1
VM_POP UDINT X GeneralMng.WipeMem[1]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_WipeMem
VM_LABEL L633
; END_IF
; IF
VM_PUSH BOOL X En_WipeNVRAM
VM_JZ L634
; THEN
VM_PUSH_IMM UDINT 2
VM_POP UDINT X GeneralMng.WipeMem[1]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_WipeMem
VM_LABEL L634
; END_IF
; IF
VM_PUSH BOOL X En_WipeAll
VM_JZ L635
; THEN
VM_PUSH_IMM UDINT 3
VM_POP UDINT X GeneralMng.WipeMem[1]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_WipeMem
VM_LABEL L635
; END_IF
EF_NEXT_FIELD
VM_RTS

; ParamImpExp()
VM_FUNCTION _ParamImpExp_
VM_DATA 0
EF_COMPARE
; IF
VM_PUSH BOOL X UnitOn
VM_DUP BOOL
VM_JZ L637
VM_POP_AWAY BOOL
VM_PUSH INT X EnImpExpTmp
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_LABEL L637
VM_JZ L636
; THEN
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
EF_STORE_MASK
VM_PUSH USINT EF POPUP_TIME
VM_POP USINT X DTPopUp
EF_GOTO_MASK ParamsImpExpErr
VM_PUSH_IMM INT 0
VM_POP INT X EnImpExpTmp
VM_JUMP L638
VM_LABEL L636
; IF
VM_PUSH INT X EnImpExpTmp
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L640
VM_POP_AWAY BOOL
VM_PUSH BOOL X ImpExpSel
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_LABEL L640
VM_JZ L639
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ImpExpMng.En_ParamsImp
EF_STORE_MASK
VM_PUSH USINT EF POPUP_TIME
VM_POP USINT X DTPopUp
EF_GOTO_MASK ParamsImpExpRes
VM_PUSH_IMM INT 0
VM_POP INT X EnImpExpTmp
VM_JUMP L641
VM_LABEL L639
; IF
VM_PUSH INT X EnImpExpTmp
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L643
VM_POP_AWAY BOOL
VM_PUSH BOOL X ImpExpSel
VM_PUSH_IMM BOOL 1
VM_CMP_EQ BOOL
VM_LABEL L643
VM_JZ L642
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ImpExpMng.En_ParamsExp
EF_STORE_MASK
VM_PUSH USINT EF POPUP_TIME
VM_POP USINT X DTPopUp
EF_GOTO_MASK ParamsImpExpRes
VM_PUSH_IMM INT 0
VM_POP INT X EnImpExpTmp
VM_JUMP L644
VM_LABEL L642
; ELSE
EF_NEXT_FIELD
; END_IF
VM_LABEL L644
VM_LABEL L641
VM_LABEL L638
VM_RTS

; AlrmExp()
VM_FUNCTION _AlrmExp_
VM_DATA 0
EF_COMPARE
; IF
VM_PUSH INT X EnAlrmExpTmp
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L646
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng.En_AlrmExp
EF_GOTO_MASK AlrmExpRes
VM_PUSH_IMM INT 0
VM_POP INT X EnAlrmExpTmp
VM_JUMP L647
VM_LABEL L646
; ELSE
EF_NEXT_FIELD
; END_IF
VM_LABEL L647
VM_RTS

; Sched_UP()
VM_FUNCTION _Sched_UP_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_OFF
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L650
VM_POP_AWAY BOOL
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_LABEL L650
VM_JZ L649
; THEN
; IF
VM_PUSH UINT X CurDayOfWeek
VM_PUSH_IMM UINT 1
VM_CMP_GT UINT
VM_JZ L651
; THEN
VM_PUSH UINT X CurDayOfWeek
VM_PUSH_IMM UINT 1
VM_SUB UINT
VM_POP UINT X CurDayOfWeek
VM_JUMP L652
VM_LABEL L651
; ELSE
VM_PUSH_IMM UINT 7
VM_POP UINT X CurDayOfWeek
; END_IF
VM_LABEL L652
VM_LABEL L649
; END_IF
VM_RTS

; Sched_DOWN()
VM_FUNCTION _Sched_DOWN_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_OFF
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L655
VM_POP_AWAY BOOL
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_LABEL L655
VM_JZ L654
; THEN
; IF
VM_PUSH UINT X CurDayOfWeek
VM_PUSH_IMM UINT 7
VM_CMP_LT UINT
VM_JZ L656
; THEN
VM_PUSH UINT X CurDayOfWeek
VM_PUSH_IMM UINT 1
VM_ADD UINT
VM_POP UINT X CurDayOfWeek
VM_JUMP L657
VM_LABEL L656
; ELSE
VM_PUSH_IMM UINT 1
VM_POP UINT X CurDayOfWeek
; END_IF
VM_LABEL L657
VM_LABEL L654
; END_IF
VM_RTS

; Sched_ENTER()
VM_FUNCTION _Sched_ENTER_
VM_DATA 0
EF_COMPARE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.Chg_Sched
VM_PUSH INT X __SYSVA_CURSOR_ROW
VM_POP INT X MaskMng.Sched_ROW
VM_PUSH INT X __SYSVA_CURSOR_COLUMN
VM_POP INT X MaskMng.Sched_COLUMN
EF_NEXT_FIELD
VM_RTS

; Sched_PRG()
VM_FUNCTION _Sched_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L659
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.getData
EF_STORE_MASK
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
VM_JUMP L660
VM_LABEL L659
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L661
; THEN
EF_COMPARE
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.setChanges
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
VM_LABEL L661
; END_IF
VM_LABEL L660
VM_RTS

; Schedule_1_ESC()
VM_FUNCTION _Schedule_1_ESC_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L662
; THEN
VM_JSR _GlobalEsc_
VM_JUMP L663
VM_LABEL L662
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L664
; THEN
EF_COMPARE
VM_PUSH_IMM USINT 25
VM_PUSH_IMM BOOL 1
VM_JSR _ShowPopUpQuestion_USINT_BOOL_
VM_LABEL L664
; END_IF
VM_LABEL L663
VM_RTS

; Upgrade_1_ENTER()
VM_FUNCTION _Upgrade_1_ENTER_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Upgrade.Check_Upgrade
VM_RTS

; Upgrade_1_PRG()
VM_FUNCTION _Upgrade_1_PRG_
VM_DATA 0
; IF
VM_PUSH BOOL X Upgrade.En_FirmWare
VM_JZ L665
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Upgrade.En_Upgrade
EF_GOTO_MASK Upgrade_Progress
VM_JUMP L666
VM_LABEL L665
; ELSE
VM_JSR _Upgrade_1_ENTER_
; END_IF
VM_LABEL L666
VM_RTS

; NetMap_ENTER()
VM_FUNCTION _NetMap_ENTER_
VM_DATA 0
VM_PUSH USINT X CurPosition
VM_POP USINT X CurSlave
VM_PUSH_IMM BOOL 1
VM_POP BOOL X CurSlaveShow
VM_PUSH_IMM USINT 32
VM_JSR _GotoMaskID_USINT_
VM_RTS

; SlaveState_ESC()
VM_FUNCTION _SlaveState_ESC_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_POP BOOL X CurSlaveShow
; IF
VM_SYSTEM 32
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L668
; THEN
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_JUMP L669
VM_LABEL L668
; ELSE
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; END_IF
VM_LABEL L669
EF_GOTO_MASK NetMap
VM_RTS

; DeviceRole_Class_PRG()
VM_FUNCTION _DeviceRole_Class_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L671
; THEN
EF_STORE_MASK
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 2
VM_POP USINT X NextCycleAction
VM_JUMP L672
VM_LABEL L671
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L673
; THEN
EF_COMPARE
; IF
VM_PUSH USINT X temp_Role
VM_PUSH USINT X Role
VM_CMP_NE USINT
VM_JZ L674
; THEN
; IF
VM_PUSH USINT X temp_Role
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L676
VM_POP_AWAY BOOL
VM_PUSH BOOL X Role_Master
VM_LABEL L676
VM_JZ L675
; THEN
VM_PUSH_IMM USINT 4
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L677
VM_LABEL L675
; ELSE
VM_PUSH USINT X temp_Role
VM_POP USINT X Role
EF_STORE_MASK
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
; END_IF
VM_LABEL L677
VM_JUMP L679
VM_LABEL L674
; ELSE
EF_STORE_MASK
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
; END_IF
VM_LABEL L679
VM_LABEL L673
; END_IF
VM_LABEL L672
VM_RTS

; DeviceRole_Class_ENTER()
VM_FUNCTION _DeviceRole_Class_ENTER_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_NE USINT
VM_JZ L681
; THEN
EF_COMPARE
; IF
VM_PUSH USINT X temp_Role
VM_PUSH USINT X Role
VM_CMP_NE USINT
VM_JZ L682
; THEN
; IF
VM_PUSH USINT X temp_Role
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L684
VM_POP_AWAY BOOL
VM_PUSH BOOL X Role_Master
VM_LABEL L684
VM_JZ L683
; THEN
VM_PUSH_IMM USINT 4
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L685
VM_LABEL L683
; ELSE
VM_PUSH USINT X temp_Role
VM_POP USINT X Role
; END_IF
VM_LABEL L685
VM_LABEL L682
; END_IF
VM_LABEL L681
; END_IF
VM_RTS

; Main_Testing_ESC()
VM_FUNCTION _Main_Testing_ESC_
VM_DATA 0
; IF
VM_PUSH BOOL X EnPwdChgM
VM_JZ L687
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_Testing
EF_GOTO_MASK FC_mng
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_LABEL L687
; END_IF
VM_RTS

; Testing_ESC()
VM_FUNCTION _Testing_ESC_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_Testing
VM_JSR _GotoMain_
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
VM_RTS

; Port_Sel_ENTER()
VM_FUNCTION _Port_Sel_ENTER_
VM_DATA 0
; IF
VM_PUSH USINT X Temp_MB_port
VM_PUSH BYTE X __SYSVA_TMP_VALUE
VM_CAST BYTE USINT
VM_CMP_NE USINT
VM_JZ L688
; THEN
EF_COMPARE
VM_JSR _Show_ports_
VM_JUMP L689
VM_LABEL L688
; ELSE
EF_NEXT_FIELD
; END_IF
VM_LABEL L689
VM_RTS

; MB_Settings_1_PRG()
VM_FUNCTION _MB_Settings_1_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L691
; THEN
EF_STORE_MASK
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
VM_JUMP L692
VM_LABEL L691
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L693
; THEN
EF_COMPARE
; IF
VM_PUSH USINT X Temp_MB_port
VM_PUSH USINT X MB_port
VM_CMP_NE USINT
VM_DUP BOOL
VM_JNZ L695
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Address
VM_PUSH USINT X MB_Address
VM_CMP_NE USINT
VM_LABEL L695
VM_DUP BOOL
VM_JNZ L696
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L697
VM_POP_AWAY BOOL
VM_PUSH UDINT X Temp_MB_Baudrate
VM_PUSH UDINT X BMS_card.Baudrate
VM_CMP_NE UDINT
VM_LABEL L697
VM_LABEL L696
VM_DUP BOOL
VM_JNZ L698
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L699
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_StopBits
VM_PUSH USINT X BMS_card.StopBits
VM_CMP_NE USINT
VM_LABEL L699
VM_LABEL L698
VM_DUP BOOL
VM_JNZ L700
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L701
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Parity
VM_PUSH USINT X BMS_card.Parity
VM_CMP_NE USINT
VM_LABEL L701
VM_LABEL L700
VM_DUP BOOL
VM_JNZ L702
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L703
VM_POP_AWAY BOOL
VM_PUSH UDINT X Temp_MB_Baudrate
VM_PUSH UDINT X BMS2.Baudrate
VM_CMP_NE UDINT
VM_LABEL L703
VM_LABEL L702
VM_DUP BOOL
VM_JNZ L704
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L705
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_StopBits
VM_PUSH USINT X BMS2.StopBits
VM_CMP_NE USINT
VM_LABEL L705
VM_LABEL L704
VM_DUP BOOL
VM_JNZ L706
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L707
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Parity
VM_PUSH USINT X BMS2.Parity
VM_CMP_NE USINT
VM_LABEL L707
VM_LABEL L706
VM_JZ L694
; THEN
VM_PUSH_IMM USINT 5
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L708
VM_LABEL L694
; ELSE
VM_JSR _Show_ports_
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
; END_IF
VM_LABEL L708
VM_LABEL L693
; END_IF
VM_LABEL L692
VM_RTS

; MB_Settings_1_ESC()
VM_FUNCTION _MB_Settings_1_ESC_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L710
; THEN
VM_JSR _GlobalEsc_
VM_JUMP L711
VM_LABEL L710
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L712
; THEN
EF_COMPARE
; IF
VM_PUSH USINT X Temp_MB_port
VM_PUSH USINT X MB_port
VM_CMP_NE USINT
VM_DUP BOOL
VM_JNZ L714
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Address
VM_PUSH USINT X MB_Address
VM_CMP_NE USINT
VM_LABEL L714
VM_DUP BOOL
VM_JNZ L715
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L716
VM_POP_AWAY BOOL
VM_PUSH UDINT X Temp_MB_Baudrate
VM_PUSH UDINT X BMS_card.Baudrate
VM_CMP_NE UDINT
VM_LABEL L716
VM_LABEL L715
VM_DUP BOOL
VM_JNZ L717
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L718
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_StopBits
VM_PUSH USINT X BMS_card.StopBits
VM_CMP_NE USINT
VM_LABEL L718
VM_LABEL L717
VM_DUP BOOL
VM_JNZ L719
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L720
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Parity
VM_PUSH USINT X BMS_card.Parity
VM_CMP_NE USINT
VM_LABEL L720
VM_LABEL L719
VM_DUP BOOL
VM_JNZ L721
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L722
VM_POP_AWAY BOOL
VM_PUSH UDINT X Temp_MB_Baudrate
VM_PUSH UDINT X BMS2.Baudrate
VM_CMP_NE UDINT
VM_LABEL L722
VM_LABEL L721
VM_DUP BOOL
VM_JNZ L723
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L724
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_StopBits
VM_PUSH USINT X BMS2.StopBits
VM_CMP_NE USINT
VM_LABEL L724
VM_LABEL L723
VM_DUP BOOL
VM_JNZ L725
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_port
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JZ L726
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Parity
VM_PUSH USINT X BMS2.Parity
VM_CMP_NE USINT
VM_LABEL L726
VM_LABEL L725
VM_JZ L713
; THEN
VM_PUSH_IMM USINT 5
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L727
VM_LABEL L713
; ELSE
VM_JSR _GlobalEsc_
; END_IF
VM_LABEL L727
VM_LABEL L712
; END_IF
VM_LABEL L711
VM_RTS

; Upgrade_OS_ESC()
VM_FUNCTION _Upgrade_OS_ESC_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Upgrade.REQ_OS_upgrade
EF_GOTO_MASK Upgrade_OS
VM_RTS

; Upgrade_OS_PRG()
VM_FUNCTION _Upgrade_OS_PRG_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Upgrade.ANSW_OS_upgrade
EF_GOTO_MASK Upgrade_Progress
VM_RTS

; DOWN_ENTER_Move()
VM_FUNCTION _DOWN_ENTER_Move_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L729
; THEN
EF_NEXT_MASK
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF checkZeroColumn
VM_LABEL L729
; END_IF
VM_RTS

; UP_ENTER_Move()
VM_FUNCTION _UP_ENTER_Move_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L730
; THEN
EF_PREVIOUS_MASK
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF checkZeroColumn
VM_LABEL L730
; END_IF
VM_RTS

; Decrement()
VM_FUNCTION _Decrement_
VM_DATA 0
VM_JSR _Decrement_BYTE_
VM_PUSH_IMM BOOL 1
VM_POP BOOL X downArrow
VM_RTS

; Increment()
VM_FUNCTION _Increment_
VM_DATA 0
VM_JSR _Increment_BYTE_
VM_PUSH_IMM BOOL 1
VM_POP BOOL X upArrow
VM_RTS

; CheckValueBorders()
VM_FUNCTION _CheckValueBorders_
VM_DATA 0
; CASE
VM_PUSH_AMP UINT X Display.value_Storage[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
; OF
VM_CASE UINT 0 L744
VM_CASE UINT 1 L745
VM_CASE UINT 2 L746
VM_POP_AWAY UINT
VM_JUMP L743
VM_LABEL L744
VM_JUMP L743
VM_LABEL L745
; IF
VM_PUSH_AMP INT X Display.value_INT[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI INT
VM_PUSH_AMP INT X Display.value_MinINT[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI INT
VM_CMP_LT INT
VM_JZ L747
; THEN
VM_PUSH_AMP INT X Display.value_MaxINT[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI INT
VM_PUSH_AMP INT X Display.value_INT[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_POPI INT
EF_BEEP
VM_JUMP L748
VM_LABEL L747
; IF
VM_PUSH_AMP INT X Display.value_INT[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI INT
VM_PUSH_AMP INT X Display.value_MaxINT[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI INT
VM_CMP_GT INT
VM_JZ L749
; THEN
VM_PUSH_AMP INT X Display.value_MinINT[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI INT
VM_PUSH_AMP INT X Display.value_INT[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_POPI INT
EF_BEEP
VM_LABEL L749
; END_IF
VM_LABEL L748
VM_JUMP L743
VM_LABEL L746
; IF
VM_PUSH_AMP REAL X Display.value_REAL[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI REAL
VM_PUSH_AMP REAL X Display.value_MinREAL[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI REAL
VM_CMP_LT REAL
VM_JZ L750
; THEN
VM_PUSH_AMP REAL X Display.value_MaxREAL[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI REAL
VM_PUSH_AMP REAL X Display.value_REAL[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_POPI REAL
EF_BEEP
VM_JUMP L751
VM_LABEL L750
; IF
VM_PUSH_AMP REAL X Display.value_REAL[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI REAL
VM_PUSH_AMP REAL X Display.value_MaxREAL[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI REAL
VM_CMP_GT REAL
VM_JZ L752
; THEN
VM_PUSH_AMP REAL X Display.value_MinREAL[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI REAL
VM_PUSH_AMP REAL X Display.value_REAL[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_POPI REAL
EF_BEEP
VM_LABEL L752
; END_IF
VM_LABEL L751
VM_LABEL L743
VM_RTS

; Param_UP()
VM_FUNCTION _Param_UP_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L731
; THEN
; IF
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 1
VM_CMP_GT DINT
VM_JZ L732
; THEN
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X CurRow
VM_JUMP L733
VM_LABEL L732
; ELSE
VM_PUSH DINT X Position
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_SUB DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X Position
; IF
VM_PUSH DINT X Position
VM_PUSH_IMM DINT 1
VM_CMP_LT DINT
VM_JZ L735
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH DINT X cnt_Items
VM_PUSH DINT X num_Rows
VM_SUB DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X Position
VM_PUSH DINT X num_Rows
VM_POP DINT X CurRow
VM_LABEL L735
; END_IF
; END_IF
VM_LABEL L733
VM_PUSH DINT X Position
VM_PUSH DINT X CurRow
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X CurList_Position
VM_PUSH_AMP UINT X Display.Descr[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_POP UINT X Display.Hint
VM_PUSH_IMM BOOL 1
VM_POP BOOL X update_ParamMenu_List
VM_JUMP L736
VM_LABEL L731
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L737
; THEN
; CASE
VM_PUSH_AMP UINT X Display.value_Storage[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
; OF
VM_CASE UINT 0 L739
VM_CASE UINT 1 L740
VM_CASE UINT 2 L741
VM_POP_AWAY UINT
VM_JUMP L738
VM_LABEL L739
; IF
VM_PUSH_AMP USINT X Display.value_BOOL[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI USINT
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_JZ L742
; THEN
VM_PUSH_IMM USINT 1
VM_PUSH_AMP USINT X Display.value_BOOL[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_POPI USINT
VM_LABEL L742
; END_IF
VM_JUMP L738
VM_LABEL L740
VM_PUSH_AMP INT X Display.value_INT[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI INT
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT INT
VM_ADD INT
VM_PUSH_AMP INT X Display.value_INT[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_POPI INT
VM_JUMP L738
VM_LABEL L741
VM_PUSH_AMP REAL X Display.value_REAL[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI REAL
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_ADD REAL
VM_PUSH_AMP REAL X Display.value_REAL[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_POPI REAL
VM_LABEL L738
VM_JSR _CheckValueBorders_
VM_LABEL L737
; END_IF
VM_LABEL L736
VM_PUSH_IMM USINT 12
VM_POP USINT X NextCycleAction
VM_RTS

; Param_DOWN()
VM_FUNCTION _Param_DOWN_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L753
; THEN
; IF
VM_PUSH DINT X CurRow
VM_PUSH DINT X num_Rows
VM_CMP_LT DINT
VM_JZ L754
; THEN
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X CurRow
VM_JUMP L755
VM_LABEL L754
; ELSE
VM_PUSH DINT X Position
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X Position
; IF
VM_PUSH DINT X Position
VM_PUSH DINT X cnt_Items
VM_PUSH DINT X num_Rows
VM_SUB DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_CMP_GT DINT
VM_JZ L757
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM DINT 1
VM_POP DINT X Position
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
VM_LABEL L757
; END_IF
; END_IF
VM_LABEL L755
VM_PUSH DINT X Position
VM_PUSH DINT X CurRow
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X CurList_Position
VM_PUSH_AMP UINT X Display.Descr[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_POP UINT X Display.Hint
VM_PUSH_IMM BOOL 1
VM_POP BOOL X update_ParamMenu_List
VM_JUMP L758
VM_LABEL L753
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L759
; THEN
; CASE
VM_PUSH_AMP UINT X Display.value_Storage[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
; OF
VM_CASE UINT 0 L761
VM_CASE UINT 1 L762
VM_CASE UINT 2 L763
VM_POP_AWAY UINT
VM_JUMP L760
VM_LABEL L761
; IF
VM_PUSH_AMP USINT X Display.value_BOOL[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI USINT
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L764
; THEN
VM_PUSH_IMM USINT 2
VM_PUSH_AMP USINT X Display.value_BOOL[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_POPI USINT
VM_LABEL L764
; END_IF
VM_JUMP L760
VM_LABEL L762
VM_PUSH_AMP INT X Display.value_INT[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI INT
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT INT
VM_SUB INT
VM_PUSH_AMP INT X Display.value_INT[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_POPI INT
VM_JUMP L760
VM_LABEL L763
VM_PUSH_AMP REAL X Display.value_REAL[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI REAL
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_SUB REAL
VM_PUSH_AMP REAL X Display.value_REAL[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_POPI REAL
VM_LABEL L760
VM_JSR _CheckValueBorders_
VM_LABEL L759
; END_IF
VM_LABEL L758
VM_PUSH_IMM USINT 12
VM_POP USINT X NextCycleAction
VM_RTS

; Write_Parameter()
VM_FUNCTION _Write_Parameter_
VM_DATA 0
VM_JSR _CheckValueBorders_
; CASE
VM_PUSH_AMP UINT X Display.value_Storage[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
; OF
VM_CASE UINT 0 L767
VM_CASE UINT 1 L768
VM_CASE UINT 2 L769
VM_POP_AWAY UINT
VM_JUMP L766
VM_LABEL L767
; IF
VM_PUSH_AMP USINT X Display.value_BOOL[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI USINT
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L770
; THEN
VM_PUSH_IMM BOOL 1
VM_PUSH_AMP BOOL X Param.BOOL[1]
VM_PUSH_AMP UINT X Display.value_Address[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_ADDRESS UINT 1 26 16
VM_POPI BOOL
VM_JUMP L771
VM_LABEL L770
; IF
VM_PUSH_AMP USINT X Display.value_BOOL[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI USINT
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_JZ L772
; THEN
VM_PUSH_IMM BOOL 0
VM_PUSH_AMP BOOL X Param.BOOL[1]
VM_PUSH_AMP UINT X Display.value_Address[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_ADDRESS UINT 1 26 16
VM_POPI BOOL
VM_LABEL L772
; END_IF
VM_LABEL L771
VM_JUMP L766
VM_LABEL L768
; IF
VM_PUSH_AMP INT X Param.INT[1]
VM_PUSH_AMP UINT X Display.value_Address[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_ADDRESS UINT 1 100 16
VM_PUSHI INT
VM_PUSH_AMP INT X Display.value_INT[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI INT
VM_CMP_NE INT
VM_JZ L773
; THEN
VM_PUSH_AMP INT X Display.value_INT[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI INT
VM_PUSH_AMP INT X Param.INT[1]
VM_PUSH_AMP UINT X Display.value_Address[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_ADDRESS UINT 1 100 16
VM_POPI INT
VM_LABEL L773
; END_IF
VM_JUMP L766
VM_LABEL L769
; IF
VM_PUSH_AMP REAL X Param.REAL[1]
VM_PUSH_AMP UINT X Display.value_Address[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_ADDRESS UINT 1 127 16
VM_PUSHI REAL
VM_PUSH_AMP REAL X Display.value_REAL[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI REAL
VM_CMP_NE REAL
VM_JZ L774
; THEN
VM_PUSH_AMP REAL X Display.value_REAL[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI REAL
VM_PUSH_AMP REAL X Param.REAL[1]
VM_PUSH_AMP UINT X Display.value_Address[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_ADDRESS UINT 1 127 16
VM_POPI REAL
VM_LABEL L774
; END_IF
VM_LABEL L766
VM_PUSH_AMP UINT X Display.Descr[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_CAST UINT USINT
VM_POP USINT X MaskMng.param_ChangeNotify
VM_RTS

; Param_ENTER()
VM_FUNCTION _Param_ENTER_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L765
; THEN
VM_JSR _Write_Parameter_
; IF
VM_PUSH DINT X CurRow_modePRG
VM_PUSH DINT X num_Rows
VM_CMP_LT DINT
VM_JZ L775
; THEN
VM_PUSH DINT X CurRow_modePRG
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X CurRow_modePRG
VM_JUMP L776
VM_LABEL L775
; ELSE
VM_PUSH DINT X Position
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X Position
; IF
VM_PUSH DINT X Position
VM_PUSH DINT X cnt_Items
VM_PUSH DINT X num_Rows
VM_SUB DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_CMP_GT DINT
VM_JZ L778
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM DINT 1
VM_POP DINT X Position
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow_modePRG
VM_LABEL L778
; END_IF
; END_IF
VM_LABEL L776
VM_PUSH DINT X Position
VM_PUSH DINT X CurRow_modePRG
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X CurList_Position
VM_PUSH_AMP UINT X Display.Descr[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_POP UINT X Display.Hint
VM_PUSH_IMM BOOL 1
VM_POP BOOL X update_ParamMenu_List
VM_LABEL L765
; END_IF
VM_PUSH_IMM USINT 12
VM_POP USINT X NextCycleAction
VM_RTS

; Param_ESC()
VM_FUNCTION _Param_ESC_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L779
; THEN
VM_PUSH_IMM DINT 1
VM_POP DINT X Position
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF autoHideArrowsOff
VM_JSR _GlobalEsc_
VM_JUMP L780
VM_LABEL L779
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L781
; THEN
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_PUSH DINT X CurRow_modePRG
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X update_ParamMenu_List
VM_LABEL L781
; END_IF
VM_LABEL L780
VM_RTS

; Param_PRG()
VM_FUNCTION _Param_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L782
; THEN
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
VM_PUSH DINT X CurRow
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow
VM_PUSH_IMM BOOL 1
VM_POP BOOL X update_ParamMenu_List
VM_PUSH_IMM USINT 12
VM_POP USINT X NextCycleAction
VM_JUMP L783
VM_LABEL L782
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L784
; THEN
VM_JSR _Write_Parameter_
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_PUSH DINT X CurRow_modePRG
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X update_ParamMenu_List
VM_PUSH_IMM USINT 12
VM_POP USINT X NextCycleAction
VM_LABEL L784
; END_IF
VM_LABEL L783
VM_RTS

; ConfigMenu_UP()
VM_FUNCTION _ConfigMenu_UP_
VM_DATA 0
; IF
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 1
VM_CMP_GT DINT
VM_JZ L785
; THEN
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X CurRow
VM_JUMP L786
VM_LABEL L785
; ELSE
VM_PUSH DINT X Position
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_SUB DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X Position
; IF
VM_PUSH DINT X Position
VM_PUSH_IMM DINT 1
VM_CMP_LT DINT
VM_JZ L788
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH DINT X cnt_Items
VM_PUSH DINT X num_Rows
VM_SUB DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X Position
VM_PUSH DINT X num_Rows
VM_POP DINT X CurRow
VM_LABEL L788
; END_IF
; IF
VM_PUSH BOOL X isConfigMenu
VM_JZ L789
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getConfigMenu
VM_JUMP L790
VM_LABEL L789
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getParamMenu
; END_IF
VM_LABEL L790
; END_IF
VM_LABEL L786
VM_PUSH DINT X Position
VM_PUSH DINT X CurRow
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X CurList_Position
VM_PUSH_AMP UINT X Display.Descr[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_POP UINT X Display.Hint
VM_RTS

; ConfigMenu_DOWN()
VM_FUNCTION _ConfigMenu_DOWN_
VM_DATA 0
; IF
VM_PUSH DINT X CurRow
VM_PUSH DINT X num_Rows
VM_CMP_LT DINT
VM_JZ L792
; THEN
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X CurRow
VM_JUMP L793
VM_LABEL L792
; ELSE
VM_PUSH DINT X Position
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X Position
; IF
VM_PUSH DINT X Position
VM_PUSH DINT X cnt_Items
VM_PUSH DINT X num_Rows
VM_SUB DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_CMP_GT DINT
VM_JZ L795
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM DINT 1
VM_POP DINT X Position
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
VM_LABEL L795
; END_IF
; IF
VM_PUSH BOOL X isConfigMenu
VM_JZ L796
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getConfigMenu
VM_JUMP L797
VM_LABEL L796
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getParamMenu
; END_IF
VM_LABEL L797
; END_IF
VM_LABEL L793
VM_PUSH DINT X Position
VM_PUSH DINT X CurRow
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X CurList_Position
VM_PUSH_AMP UINT X Display.Descr[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_POP UINT X Display.Hint
VM_RTS

; ConfigMenu_ENTER()
VM_FUNCTION _ConfigMenu_ENTER_
VM_DATA 0
; IF
VM_PUSH_AMP USINT X Display.value_BOOL[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI USINT
VM_PUSH_IMM USINT 4
VM_CMP_EQ USINT
VM_JZ L799
; THEN
VM_JSR _SaveMenuPos_
VM_PUSH_AMP UINT X Display.Descr[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_CAST UINT DINT
VM_POP DINT X CurMenuPoint
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getConfigMenu
; IF
VM_PUSH USINT X CurLevel
VM_PUSH_IMM USINT 10
VM_CMP_LT USINT
VM_JZ L800
; THEN
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 1
VM_POP DINT X Position
VM_PUSH_IMM DINT 1
VM_POP DINT X CurList_Position
VM_LABEL L800
; END_IF
VM_JUMP L801
VM_LABEL L799
; IF
VM_PUSH_AMP USINT X Display.value_BOOL[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI USINT
VM_PUSH_IMM USINT 7
VM_CMP_EQ USINT
VM_JZ L802
; THEN
VM_JSR _SaveMenuPos_
VM_PUSH_AMP UINT X Display.Descr[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_CAST UINT DINT
VM_POP DINT X CurMenuPoint
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getConfigMenu
VM_JUMP L803
VM_LABEL L802
; ELSE
VM_PUSH DINT X CurMenuPoint
VM_PUSH_AMP DINT X Display.Path.MenuPoint[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_POPI DINT
VM_PUSH DINT X Position
VM_PUSH_AMP DINT X Display.Path.Position[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_POPI DINT
VM_PUSH DINT X CurRow
VM_PUSH_AMP DINT X Display.Path.Row[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_POPI DINT
VM_PUSH_AMP UINT X Display.Descr[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_CAST UINT DINT
VM_POP DINT X CurMenuPoint
VM_PUSH_IMM BOOL 1
VM_POP BOOL X setConfigItem
; END_IF
VM_LABEL L803
VM_LABEL L801
VM_PUSH_AMP UINT X Display.Descr[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_POP UINT X Display.Hint
VM_RTS

; ConfigMenu_ESC()
VM_FUNCTION _ConfigMenu_ESC_
VM_DATA 0
; IF
VM_PUSH USINT X CurLevel
VM_PUSH USINT EF ConfigStartLevel
VM_CMP_GT USINT
VM_JZ L805
; THEN
VM_JSR _LoadMenuPos_
VM_JUMP L806
VM_LABEL L805
; ELSE
VM_PUSH_IMM DINT 1
VM_POP DINT X Position
VM_PUSH_IMM DINT 0
VM_POP DINT X CurMenuPoint
VM_PUSH_IMM DINT 1
VM_POP DINT X CurList_Position
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
; END_IF
VM_LABEL L806
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getConfigMenu
VM_RTS

; Signal_DOWN()
VM_FUNCTION _Signal_DOWN_
VM_DATA 0
; CASE
VM_PUSH DINT X CurRow
; OF
VM_CASE DINT 1 L809
VM_CASE DINT 2 L810
VM_CASE DINT 3 L811
VM_CASE DINT 4 L812
VM_CASE DINT 5 L813
VM_POP_AWAY DINT
VM_JUMP L808
VM_LABEL L809
VM_PUSH DINT X mask_List_pos
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X mask_List_pos
; IF
VM_PUSH DINT X mask_List_pos
VM_PUSH DINT X cnt_Items
VM_CMP_GT DINT
VM_JZ L814
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM DINT 1
VM_POP DINT X mask_List_pos
EF_BEEP
VM_LABEL L814
; END_IF
VM_PUSH_AMP UINT X mask_List[1]
VM_PUSH DINT X mask_List_pos
VM_ADDRESS DINT 1 128 16
VM_PUSHI UINT
VM_POP UINT X Display.Descr[1]
VM_PUSH_AMP UINT X mask_List_Sec[1]
VM_PUSH DINT X mask_List_pos
VM_ADDRESS DINT 1 128 16
VM_PUSHI UINT
VM_POP UINT X Display.Hint
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ConfigMng.recount_Types
VM_PUSH_IMM BOOL 1
VM_POP BOOL X recount_IO
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getMinMax
VM_JUMP L808
VM_LABEL L810
VM_PUSH DINT X ConfigMng.mask_IO_List_pos
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X ConfigMng.mask_IO_List_pos
; IF
VM_PUSH DINT X ConfigMng.mask_IO_List_pos
VM_PUSH DINT X ConfigMng.cnt_IO_Items
VM_CMP_GT DINT
VM_JZ L815
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM DINT 0
VM_POP DINT X ConfigMng.mask_IO_List_pos
EF_BEEP
VM_LABEL L815
; END_IF
VM_PUSH_AMP USINT X ConfigMng.mask_IO_List[0]
VM_PUSH DINT X ConfigMng.mask_IO_List_pos
VM_ADDRESS DINT 0 158 16
VM_PUSHI USINT
VM_CAST USINT UINT
VM_POP UINT X Display.Descr[2]
VM_JUMP L808
VM_LABEL L811
VM_PUSH DINT X ConfigMng.mask_TypeList_pos
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_SUB DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X ConfigMng.mask_TypeList_pos
; IF
VM_PUSH DINT X ConfigMng.mask_TypeList_pos
VM_PUSH_IMM DINT 0
VM_CMP_LT DINT
VM_JZ L816
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH DINT X ConfigMng.cnt_TypeItems
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X ConfigMng.mask_TypeList_pos
EF_BEEP
VM_LABEL L816
; END_IF
VM_PUSH_AMP USINT X ConfigMng.mask_TypeList[0]
VM_PUSH DINT X ConfigMng.mask_TypeList_pos
VM_ADDRESS DINT 0 7 16
VM_PUSHI USINT
VM_CAST USINT UINT
VM_POP UINT X Display.Descr[3]
VM_JUMP L808
VM_LABEL L812
VM_PUSH REAL X Display.value_REAL[4]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 20
VM_DIV INT
VM_CAST INT REAL
VM_SUB REAL
VM_PUSH_IMM REAL 1
VM_SUB REAL
VM_POP REAL X Display.value_REAL[4]
; IF
VM_PUSH REAL X Display.value_REAL[4]
VM_PUSH REAL X Display.value_MinREAL[4]
VM_CMP_LT REAL
VM_JZ L817
; THEN
VM_PUSH REAL X Display.value_MaxREAL[4]
VM_POP REAL X Display.value_REAL[4]
EF_BEEP
VM_LABEL L817
; END_IF
VM_JUMP L808
VM_LABEL L813
VM_PUSH REAL X Display.value_REAL[5]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 20
VM_DIV INT
VM_CAST INT REAL
VM_SUB REAL
VM_PUSH_IMM REAL 1
VM_SUB REAL
VM_POP REAL X Display.value_REAL[5]
; IF
VM_PUSH REAL X Display.value_REAL[5]
VM_PUSH REAL X Display.value_MinREAL[5]
VM_CMP_LT REAL
VM_JZ L818
; THEN
VM_PUSH REAL X Display.value_MaxREAL[5]
VM_POP REAL X Display.value_REAL[5]
EF_BEEP
VM_LABEL L818
; END_IF
VM_LABEL L808
VM_RTS

; Signal_UP()
VM_FUNCTION _Signal_UP_
VM_DATA 0
; CASE
VM_PUSH DINT X CurRow
; OF
VM_CASE DINT 1 L820
VM_CASE DINT 2 L821
VM_CASE DINT 3 L822
VM_CASE DINT 4 L823
VM_CASE DINT 5 L824
VM_POP_AWAY DINT
VM_JUMP L819
VM_LABEL L820
VM_PUSH DINT X mask_List_pos
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_SUB DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X mask_List_pos
; IF
VM_PUSH DINT X mask_List_pos
VM_PUSH_IMM DINT 1
VM_CMP_LT DINT
VM_JZ L825
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH DINT X cnt_Items
VM_POP DINT X mask_List_pos
EF_BEEP
VM_LABEL L825
; END_IF
VM_PUSH_AMP UINT X mask_List[1]
VM_PUSH DINT X mask_List_pos
VM_ADDRESS DINT 1 128 16
VM_PUSHI UINT
VM_POP UINT X Display.Descr[1]
VM_PUSH_AMP UINT X mask_List_Sec[1]
VM_PUSH DINT X mask_List_pos
VM_ADDRESS DINT 1 128 16
VM_PUSHI UINT
VM_POP UINT X Display.Hint
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ConfigMng.recount_Types
VM_PUSH_IMM BOOL 1
VM_POP BOOL X recount_IO
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getMinMax
VM_JUMP L819
VM_LABEL L821
VM_PUSH DINT X ConfigMng.mask_IO_List_pos
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_SUB DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X ConfigMng.mask_IO_List_pos
; IF
VM_PUSH DINT X ConfigMng.mask_IO_List_pos
VM_PUSH_IMM DINT 0
VM_CMP_LT DINT
VM_JZ L826
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH DINT X ConfigMng.cnt_IO_Items
VM_POP DINT X ConfigMng.mask_IO_List_pos
EF_BEEP
VM_LABEL L826
; END_IF
VM_PUSH_AMP USINT X ConfigMng.mask_IO_List[0]
VM_PUSH DINT X ConfigMng.mask_IO_List_pos
VM_ADDRESS DINT 0 158 16
VM_PUSHI USINT
VM_CAST USINT UINT
VM_POP UINT X Display.Descr[2]
VM_JUMP L819
VM_LABEL L822
VM_PUSH DINT X ConfigMng.mask_TypeList_pos
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X ConfigMng.mask_TypeList_pos
; IF
VM_PUSH DINT X ConfigMng.mask_TypeList_pos
VM_PUSH DINT X ConfigMng.cnt_TypeItems
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_CMP_GT DINT
VM_JZ L827
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM DINT 0
VM_POP DINT X ConfigMng.mask_TypeList_pos
EF_BEEP
VM_LABEL L827
; END_IF
VM_PUSH_AMP USINT X ConfigMng.mask_TypeList[0]
VM_PUSH DINT X ConfigMng.mask_TypeList_pos
VM_ADDRESS DINT 0 7 16
VM_PUSHI USINT
VM_CAST USINT UINT
VM_POP UINT X Display.Descr[3]
VM_JUMP L819
VM_LABEL L823
VM_PUSH REAL X Display.value_REAL[4]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 20
VM_DIV INT
VM_CAST INT REAL
VM_ADD REAL
VM_PUSH_IMM REAL 1
VM_ADD REAL
VM_POP REAL X Display.value_REAL[4]
; IF
VM_PUSH REAL X Display.value_REAL[4]
VM_PUSH REAL X Display.value_MaxREAL[4]
VM_CMP_GT REAL
VM_JZ L828
; THEN
VM_PUSH REAL X Display.value_MinREAL[4]
VM_POP REAL X Display.value_REAL[4]
EF_BEEP
VM_LABEL L828
; END_IF
VM_JUMP L819
VM_LABEL L824
VM_PUSH REAL X Display.value_REAL[5]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 20
VM_DIV INT
VM_CAST INT REAL
VM_ADD REAL
VM_PUSH_IMM REAL 1
VM_ADD REAL
VM_POP REAL X Display.value_REAL[5]
; IF
VM_PUSH REAL X Display.value_REAL[5]
VM_PUSH REAL X Display.value_MaxREAL[5]
VM_CMP_GT REAL
VM_JZ L829
; THEN
VM_PUSH REAL X Display.value_MinREAL[5]
VM_POP REAL X Display.value_REAL[5]
EF_BEEP
VM_LABEL L829
; END_IF
VM_LABEL L819
VM_RTS

; Signal_ESC()
VM_FUNCTION _Signal_ESC_
VM_DATA 0
VM_JSR _GlobalEsc_
VM_RTS

; Signal_ENTER()
VM_FUNCTION _Signal_ENTER_
VM_DATA 0
; CASE
VM_PUSH DINT X CurRow
; OF
VM_CASE DINT 1 L831
VM_CASE DINT 2 L832
VM_CASE DINT 3 L833
VM_CASE DINT 4 L834
VM_CASE DINT 5 L835
VM_POP_AWAY DINT
VM_JUMP L830
VM_LABEL L831
VM_PUSH_IMM BOOL 1
VM_POP BOOL X recount_IO
; IF
VM_PUSH DINT X num_Rows
VM_PUSH_IMM DINT 2
VM_CMP_EQ DINT
VM_JZ L836
; THEN
VM_PUSH_IMM DINT 2
VM_POP DINT X CurRow
VM_JUMP L837
VM_LABEL L836
; ELSE
VM_PUSH_IMM DINT 3
VM_POP DINT X CurRow
VM_PUSH_AMP USINT X ConfigMng.mask_TypeList[0]
VM_PUSH DINT X ConfigMng.mask_TypeList_pos
VM_ADDRESS DINT 0 7 16
VM_PUSHI USINT
VM_CAST USINT UINT
VM_POP UINT X Display.Descr[3]
; END_IF
VM_LABEL L837
VM_JUMP L830
VM_LABEL L832
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ConfigMng.setIoItem
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
VM_JUMP L830
VM_LABEL L833
VM_PUSH_IMM BOOL 1
VM_POP BOOL X recount_IO
; CASE
VM_PUSH UINT X Display.Descr[3]
; OF
VM_CASE UINT 5 L840
VM_CASE UINT 6 L840
VM_CASE UINT 7 L840
VM_CASE UINT 8 L840
VM_CASE UINT 9 L840
VM_POP_AWAY UINT
; ELSE
VM_PUSH_IMM DINT 2
VM_POP DINT X CurRow
VM_JUMP L839
VM_LABEL L840
VM_PUSH_IMM DINT 4
VM_POP DINT X CurRow
VM_LABEL L839
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getMinMax
VM_JUMP L830
VM_LABEL L834
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ConfigMng.setMinMax
VM_PUSH_IMM DINT 5
VM_POP DINT X CurRow
VM_JUMP L830
VM_LABEL L835
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ConfigMng.setMinMax
VM_PUSH_IMM DINT 2
VM_POP DINT X CurRow
VM_LABEL L830
VM_RTS

; Control_Mode_UP()
VM_FUNCTION _Control_Mode_UP_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X upArrow
; IF
VM_PUSH USINT X temp_Mode_Control
VM_PUSH_IMM USINT 1
VM_CMP_GT USINT
VM_JZ L841
; THEN
VM_PUSH USINT X temp_Mode_Control
VM_PUSH_IMM USINT 1
VM_SUB USINT
VM_POP USINT X temp_Mode_Control
VM_JUMP L842
VM_LABEL L841
; ELSE
VM_PUSH_IMM USINT 10
VM_POP USINT X temp_Mode_Control
; END_IF
VM_LABEL L842
; IF
VM_PUSH BOOL X IsPOOL
VM_JZ L844
; THEN
; IF
VM_PUSH USINT X temp_Mode_Control
VM_PUSH_IMM USINT 10
VM_CMP_EQ USINT
VM_JZ L845
; THEN
VM_PUSH_IMM USINT 8
VM_POP USINT X temp_Mode_Control
VM_JUMP L846
VM_LABEL L845
; IF
VM_PUSH USINT X temp_Mode_Control
VM_PUSH_IMM USINT 6
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L848
VM_POP_AWAY BOOL
VM_PUSH USINT X temp_Mode_Control
VM_PUSH_IMM USINT 5
VM_CMP_EQ USINT
VM_LABEL L848
VM_JZ L847
; THEN
VM_PUSH_IMM USINT 4
VM_POP USINT X temp_Mode_Control
VM_JUMP L849
VM_LABEL L847
; IF
VM_PUSH USINT X temp_Mode_Control
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L850
; THEN
VM_PUSH_IMM USINT 2
VM_POP USINT X temp_Mode_Control
VM_LABEL L850
; END_IF
VM_LABEL L849
VM_LABEL L846
VM_LABEL L844
; END_IF
VM_RTS

; Control_Mode_DOWN()
VM_FUNCTION _Control_Mode_DOWN_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X downArrow
; IF
VM_PUSH USINT X temp_Mode_Control
VM_PUSH_IMM USINT 10
VM_CMP_LT USINT
VM_JZ L851
; THEN
VM_PUSH USINT X temp_Mode_Control
VM_PUSH_IMM USINT 1
VM_ADD USINT
VM_POP USINT X temp_Mode_Control
VM_JUMP L852
VM_LABEL L851
; ELSE
VM_PUSH_IMM USINT 1
VM_POP USINT X temp_Mode_Control
; END_IF
VM_LABEL L852
; IF
VM_PUSH BOOL X IsPOOL
VM_JZ L854
; THEN
; IF
VM_PUSH USINT X temp_Mode_Control
VM_PUSH_IMM USINT 3
VM_CMP_EQ USINT
VM_JZ L855
; THEN
VM_PUSH_IMM USINT 4
VM_POP USINT X temp_Mode_Control
VM_JUMP L856
VM_LABEL L855
; IF
VM_PUSH USINT X temp_Mode_Control
VM_PUSH_IMM USINT 5
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L858
VM_POP_AWAY BOOL
VM_PUSH USINT X temp_Mode_Control
VM_PUSH_IMM USINT 6
VM_CMP_EQ USINT
VM_LABEL L858
VM_JZ L857
; THEN
VM_PUSH_IMM USINT 7
VM_POP USINT X temp_Mode_Control
VM_JUMP L859
VM_LABEL L857
; IF
VM_PUSH USINT X temp_Mode_Control
VM_PUSH_IMM USINT 9
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L861
VM_POP_AWAY BOOL
VM_PUSH USINT X temp_Mode_Control
VM_PUSH_IMM USINT 10
VM_CMP_EQ USINT
VM_LABEL L861
VM_JZ L860
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X temp_Mode_Control
VM_LABEL L860
; END_IF
VM_LABEL L859
VM_LABEL L856
VM_LABEL L854
; END_IF
VM_RTS

; Control_Mode_ENTER()
VM_FUNCTION _Control_Mode_ENTER_
VM_DATA 0
VM_PUSH USINT X temp_Mode_Control
VM_POP USINT X Mode_Control
VM_RTS

; Schedule_Manage_UP()
VM_FUNCTION _Schedule_Manage_UP_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X upArrow
VM_PUSH BOOL X temp_En_Schedule
VM_NOT BOOL
VM_POP BOOL X temp_En_Schedule
VM_RTS

; Schedule_Manage_DOWN()
VM_FUNCTION _Schedule_Manage_DOWN_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X downArrow
VM_PUSH BOOL X temp_En_Schedule
VM_NOT BOOL
VM_POP BOOL X temp_En_Schedule
VM_RTS

; Schedule_Manage_ENTER()
VM_FUNCTION _Schedule_Manage_ENTER_
VM_DATA 0
VM_PUSH BOOL X temp_En_Schedule
VM_POP BOOL X En_Schedule
VM_RTS

; IO_DOWN()
VM_FUNCTION _IO_DOWN_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L862
; THEN
; IF
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 3
VM_CMP_EQ DINT
VM_JZ L863
; THEN
; IF
VM_PUSH USINT X Display.value_BOOL[1]
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L864
; THEN
VM_PUSH_IMM DINT 4
VM_POP DINT X CurRow
VM_JUMP L865
VM_LABEL L864
; ELSE
; IF
VM_PUSH UINT X Display.MaskID
VM_PUSH_IMM UINT 11
VM_CMP_EQ UINT
VM_DUP BOOL
VM_JNZ L868
VM_POP_AWAY BOOL
VM_PUSH UINT X Display.MaskID
VM_PUSH_IMM UINT 14
VM_CMP_EQ UINT
VM_LABEL L868
VM_JZ L867
; THEN
VM_PUSH_IMM DINT 5
VM_POP DINT X CurRow
VM_JUMP L869
VM_LABEL L867
; ELSE
EF_BEEP
; END_IF
VM_LABEL L869
; END_IF
VM_LABEL L865
VM_JUMP L871
VM_LABEL L863
; IF
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 4
VM_CMP_EQ DINT
VM_JZ L872
; THEN
VM_PUSH_IMM DINT 3
VM_POP DINT X CurRow
VM_JUMP L873
VM_LABEL L872
; IF
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 5
VM_CMP_EQ DINT
VM_JZ L874
; THEN
VM_PUSH_IMM DINT 3
VM_POP DINT X CurRow
VM_JUMP L875
VM_LABEL L874
; IF
VM_PUSH DINT X CurRow_modePRG
VM_PUSH_IMM DINT 3
VM_CMP_EQ DINT
VM_JZ L876
; THEN
; IF
VM_PUSH USINT X Display.value_BOOL[1]
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_JZ L877
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X Display.value_BOOL[1]
VM_JUMP L878
VM_LABEL L877
; IF
VM_PUSH USINT X Display.value_BOOL[1]
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L879
; THEN
VM_PUSH_IMM USINT 0
VM_POP USINT X Display.value_BOOL[1]
VM_LABEL L879
; END_IF
VM_LABEL L878
VM_JUMP L880
VM_LABEL L876
; IF
VM_PUSH DINT X CurRow_modePRG
VM_PUSH_IMM DINT 4
VM_CMP_EQ DINT
VM_JZ L881
; THEN
; CASE
VM_PUSH UINT X Display.MaskID
; OF
VM_CASE UINT 11 L883
VM_CASE UINT 13 L883
VM_CASE UINT 12 L884
VM_CASE UINT 14 L885
VM_POP_AWAY UINT
VM_JUMP L882
VM_LABEL L883
VM_PUSH_IMM USINT 2
VM_POP USINT X Display.value_BOOL[2]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.ValueWasChanged
VM_JUMP L882
VM_LABEL L884
; IF
VM_PUSH BOOL X Display.en_RealValue[1]
VM_JZ L886
; THEN
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_SUB REAL
VM_POP REAL X Display.value_REAL[1]
; IF
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH REAL X Display.value_MinREAL[1]
VM_CMP_LT REAL
VM_JZ L887
; THEN
VM_PUSH REAL X Display.value_MaxREAL[1]
VM_POP REAL X Display.value_REAL[1]
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
EF_BEEP
VM_LABEL L887
; END_IF
VM_JUMP L888
VM_LABEL L886
; IF
VM_PUSH BOOL X Display.en_IntValue[1]
VM_JZ L889
; THEN
VM_PUSH INT X Display.value_INT[1]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT INT
VM_PUSH_IMM INT 10
VM_DIV INT
VM_SUB INT
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X Display.value_INT[1]
; IF
VM_PUSH INT X Display.value_INT[1]
VM_PUSH INT X Display.value_MinINT[1]
VM_CMP_LT INT
VM_JZ L890
; THEN
VM_PUSH INT X Display.value_MaxINT[1]
VM_POP INT X Display.value_INT[1]
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
EF_BEEP
VM_LABEL L890
; END_IF
VM_LABEL L889
; END_IF
VM_LABEL L888
VM_JUMP L882
VM_LABEL L885
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_SUB REAL
VM_POP REAL X Display.value_REAL[1]
; IF
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH_IMM REAL 0
VM_CMP_LT REAL
VM_JZ L891
; THEN
VM_PUSH_IMM REAL 0
VM_POP REAL X Display.value_REAL[1]
EF_BEEP
VM_LABEL L891
; END_IF
VM_LABEL L882
VM_JUMP L892
VM_LABEL L881
; IF
VM_PUSH DINT X CurRow_modePRG
VM_PUSH_IMM DINT 5
VM_CMP_EQ DINT
VM_JZ L893
; THEN
; IF
VM_PUSH USINT X Display.value_BOOL[3]
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_JZ L894
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X Display.value_BOOL[3]
VM_JUMP L895
VM_LABEL L894
; ELSE
VM_PUSH_IMM USINT 0
VM_POP USINT X Display.value_BOOL[3]
; END_IF
VM_LABEL L895
VM_LABEL L893
; END_IF
VM_LABEL L892
VM_LABEL L880
VM_LABEL L875
VM_LABEL L873
VM_LABEL L871
VM_JUMP L897
VM_LABEL L862
; ELSE
VM_PUSH DINT X mask_List_pos
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X mask_List_pos
; IF
VM_PUSH DINT X mask_List_pos
VM_PUSH DINT X cnt_Items
VM_CMP_GT DINT
VM_JZ L899
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM DINT 1
VM_POP DINT X mask_List_pos
EF_BEEP
VM_LABEL L899
; END_IF
VM_PUSH_AMP UINT X cfgIO.Link_toCodes[1]
VM_PUSH_AMP UINT X mask_List[1]
VM_PUSH DINT X mask_List_pos
VM_ADDRESS DINT 1 128 16
VM_PUSHI UINT
VM_CAST UINT DINT
VM_ADDRESS DINT 1 179 16
VM_PUSHI UINT
VM_CAST UINT UINT
VM_PUSH DINT X MaskMng.sig_start
VM_CAST DINT UINT
VM_SUB UINT
VM_PUSH_IMM UINT 1
VM_ADD UINT
VM_POP UINT X Display.Descr[1]
VM_PUSH_AMP UINT X mask_List[1]
VM_PUSH DINT X mask_List_pos
VM_ADDRESS DINT 1 128 16
VM_PUSHI UINT
VM_POP UINT X Display.Descr[2]
; END_IF
VM_LABEL L897
VM_RTS

; IO_UP()
VM_FUNCTION _IO_UP_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L900
; THEN
; IF
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 3
VM_CMP_EQ DINT
VM_JZ L901
; THEN
; IF
VM_PUSH USINT X Display.value_BOOL[1]
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L902
; THEN
VM_PUSH_IMM DINT 4
VM_POP DINT X CurRow
VM_JUMP L903
VM_LABEL L902
; ELSE
; IF
VM_PUSH UINT X Display.MaskID
VM_PUSH_IMM UINT 11
VM_CMP_EQ UINT
VM_DUP BOOL
VM_JNZ L906
VM_POP_AWAY BOOL
VM_PUSH UINT X Display.MaskID
VM_PUSH_IMM UINT 14
VM_CMP_EQ UINT
VM_LABEL L906
VM_JZ L905
; THEN
VM_PUSH_IMM DINT 5
VM_POP DINT X CurRow
VM_JUMP L907
VM_LABEL L905
; ELSE
EF_BEEP
; END_IF
VM_LABEL L907
; END_IF
VM_LABEL L903
VM_JUMP L909
VM_LABEL L901
; IF
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 4
VM_CMP_EQ DINT
VM_JZ L910
; THEN
VM_PUSH_IMM DINT 3
VM_POP DINT X CurRow
VM_JUMP L911
VM_LABEL L910
; IF
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 5
VM_CMP_EQ DINT
VM_JZ L912
; THEN
VM_PUSH_IMM DINT 3
VM_POP DINT X CurRow
VM_JUMP L913
VM_LABEL L912
; IF
VM_PUSH DINT X CurRow_modePRG
VM_PUSH_IMM DINT 3
VM_CMP_EQ DINT
VM_JZ L914
; THEN
; IF
VM_PUSH USINT X Display.value_BOOL[1]
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_JZ L915
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X Display.value_BOOL[1]
VM_JUMP L916
VM_LABEL L915
; IF
VM_PUSH USINT X Display.value_BOOL[1]
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L917
; THEN
VM_PUSH_IMM USINT 0
VM_POP USINT X Display.value_BOOL[1]
VM_LABEL L917
; END_IF
VM_LABEL L916
VM_JUMP L918
VM_LABEL L914
; IF
VM_PUSH DINT X CurRow_modePRG
VM_PUSH_IMM DINT 4
VM_CMP_EQ DINT
VM_JZ L919
; THEN
; CASE
VM_PUSH UINT X Display.MaskID
; OF
VM_CASE UINT 11 L921
VM_CASE UINT 13 L921
VM_CASE UINT 12 L922
VM_CASE UINT 14 L923
VM_POP_AWAY UINT
VM_JUMP L920
VM_LABEL L921
VM_PUSH_IMM USINT 1
VM_POP USINT X Display.value_BOOL[2]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.ValueWasChanged
VM_JUMP L920
VM_LABEL L922
; IF
VM_PUSH BOOL X Display.en_RealValue[1]
VM_JZ L924
; THEN
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_ADD REAL
VM_POP REAL X Display.value_REAL[1]
; IF
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH REAL X Display.value_MaxREAL[1]
VM_CMP_GT REAL
VM_JZ L925
; THEN
VM_PUSH REAL X Display.value_MinREAL[1]
VM_POP REAL X Display.value_REAL[1]
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
EF_BEEP
VM_LABEL L925
; END_IF
VM_JUMP L926
VM_LABEL L924
; IF
VM_PUSH BOOL X Display.en_IntValue[1]
VM_JZ L927
; THEN
VM_PUSH INT X Display.value_INT[1]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT INT
VM_PUSH_IMM INT 10
VM_DIV INT
VM_ADD INT
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X Display.value_INT[1]
; IF
VM_PUSH INT X Display.value_INT[1]
VM_PUSH INT X Display.value_MaxINT[1]
VM_CMP_GT INT
VM_JZ L928
; THEN
VM_PUSH INT X Display.value_MinINT[1]
VM_POP INT X Display.value_INT[1]
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
EF_BEEP
VM_LABEL L928
; END_IF
VM_LABEL L927
; END_IF
VM_LABEL L926
VM_JUMP L920
VM_LABEL L923
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_ADD REAL
VM_POP REAL X Display.value_REAL[1]
; IF
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH_IMM REAL 10
VM_CMP_GT REAL
VM_JZ L929
; THEN
VM_PUSH_IMM REAL 10
VM_POP REAL X Display.value_REAL[1]
EF_BEEP
VM_LABEL L929
; END_IF
VM_LABEL L920
VM_JUMP L930
VM_LABEL L919
; IF
VM_PUSH DINT X CurRow_modePRG
VM_PUSH_IMM DINT 5
VM_CMP_EQ DINT
VM_JZ L931
; THEN
; IF
VM_PUSH USINT X Display.value_BOOL[3]
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L932
; THEN
VM_PUSH_IMM USINT 0
VM_POP USINT X Display.value_BOOL[3]
VM_JUMP L933
VM_LABEL L932
; ELSE
VM_PUSH_IMM USINT 1
VM_POP USINT X Display.value_BOOL[3]
; END_IF
VM_LABEL L933
VM_LABEL L931
; END_IF
VM_LABEL L930
VM_LABEL L918
VM_LABEL L913
VM_LABEL L911
VM_LABEL L909
VM_JUMP L935
VM_LABEL L900
; ELSE
VM_PUSH DINT X mask_List_pos
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_SUB DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X mask_List_pos
; IF
VM_PUSH DINT X mask_List_pos
VM_PUSH_IMM DINT 1
VM_CMP_LT DINT
VM_JZ L937
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH DINT X cnt_Items
VM_POP DINT X mask_List_pos
EF_BEEP
VM_LABEL L937
; END_IF
VM_PUSH_AMP UINT X cfgIO.Link_toCodes[1]
VM_PUSH_AMP UINT X mask_List[1]
VM_PUSH DINT X mask_List_pos
VM_ADDRESS DINT 1 128 16
VM_PUSHI UINT
VM_CAST UINT DINT
VM_ADDRESS DINT 1 179 16
VM_PUSHI UINT
VM_CAST UINT UINT
VM_PUSH DINT X MaskMng.sig_start
VM_CAST DINT UINT
VM_SUB UINT
VM_PUSH_IMM UINT 1
VM_ADD UINT
VM_POP UINT X Display.Descr[1]
VM_PUSH_AMP UINT X mask_List[1]
VM_PUSH DINT X mask_List_pos
VM_ADDRESS DINT 1 128 16
VM_PUSHI UINT
VM_POP UINT X Display.Descr[2]
; END_IF
VM_LABEL L935
VM_RTS

; IO_PRG()
VM_FUNCTION _IO_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L938
; THEN
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
VM_PUSH_IMM DINT 3
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_JUMP L939
VM_LABEL L938
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L940
; THEN
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.ValueWasChanged
VM_JUMP L941
VM_LABEL L940
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_OFF
VM_CMP_EQ USINT
VM_JZ L942
; THEN
VM_PUSH_IMM USINT 17
VM_PUSH USINT EF SHORT_POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_LABEL L942
; END_IF
VM_LABEL L941
VM_LABEL L939
VM_RTS

; IO_ENTER()
VM_FUNCTION _IO_ENTER_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L943
; THEN
; IF
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L944
; THEN
VM_PUSH DINT X CurRow
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow
VM_JUMP L945
VM_LABEL L944
; IF
VM_PUSH DINT X CurRow_modePRG
VM_PUSH_IMM DINT 3
VM_CMP_EQ DINT
VM_JZ L946
; THEN
VM_PUSH DINT X CurRow_modePRG
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.ValueWasChanged
VM_JUMP L947
VM_LABEL L946
; IF
VM_PUSH DINT X CurRow_modePRG
VM_PUSH_IMM DINT 4
VM_CMP_EQ DINT
VM_JZ L948
; THEN
VM_PUSH DINT X CurRow_modePRG
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.ValueWasChanged
VM_JUMP L949
VM_LABEL L948
; IF
VM_PUSH DINT X CurRow_modePRG
VM_PUSH_IMM DINT 5
VM_CMP_EQ DINT
VM_JZ L950
; THEN
VM_PUSH DINT X CurRow_modePRG
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.ValueWasChanged
VM_LABEL L950
; END_IF
VM_LABEL L949
VM_LABEL L947
VM_LABEL L945
VM_LABEL L943
; END_IF
VM_RTS

; CORR_DOWN()
VM_FUNCTION _CORR_DOWN_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L951
; THEN
; IF
VM_PUSH BOOL X Display.en_RealValue[1]
VM_JZ L952
; THEN
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH REAL X Display.value_REAL[8]
VM_SUB REAL
VM_POP REAL X Display.value_REAL[1]
; IF
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH REAL X Display.value_MinREAL[1]
VM_CMP_LT REAL
VM_JZ L953
; THEN
VM_PUSH REAL X Display.value_MaxREAL[1]
VM_POP REAL X Display.value_REAL[1]
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
EF_BEEP
VM_LABEL L953
; END_IF
VM_JUMP L954
VM_LABEL L952
; IF
VM_PUSH BOOL X Display.en_IntValue[1]
VM_JZ L955
; THEN
VM_PUSH INT X Display.value_INT[1]
VM_PUSH INT X Display.value_INT[8]
VM_SUB INT
VM_POP INT X Display.value_INT[1]
; IF
VM_PUSH INT X Display.value_INT[1]
VM_PUSH INT X Display.value_MinINT[1]
VM_CMP_LT INT
VM_JZ L956
; THEN
VM_PUSH INT X Display.value_MaxINT[1]
VM_POP INT X Display.value_INT[1]
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
EF_BEEP
VM_LABEL L956
; END_IF
VM_LABEL L955
; END_IF
VM_LABEL L954
VM_JUMP L957
VM_LABEL L951
; ELSE
VM_PUSH DINT X mask_List_pos
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X mask_List_pos
; IF
VM_PUSH DINT X mask_List_pos
VM_PUSH DINT X cnt_Items
VM_CMP_GT DINT
VM_JZ L959
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM DINT 1
VM_POP DINT X mask_List_pos
EF_BEEP
VM_LABEL L959
; END_IF
VM_PUSH_AMP UINT X cfgIO.Link_toCodes[1]
VM_PUSH_AMP UINT X mask_List[1]
VM_PUSH DINT X mask_List_pos
VM_ADDRESS DINT 1 128 16
VM_PUSHI UINT
VM_CAST UINT DINT
VM_ADDRESS DINT 1 179 16
VM_PUSHI UINT
VM_CAST UINT UINT
VM_PUSH DINT X MaskMng.sig_start
VM_CAST DINT UINT
VM_SUB UINT
VM_PUSH_IMM UINT 1
VM_ADD UINT
VM_POP UINT X Display.Descr[1]
VM_PUSH_AMP UINT X mask_List[1]
VM_PUSH DINT X mask_List_pos
VM_ADDRESS DINT 1 128 16
VM_PUSHI UINT
VM_POP UINT X Display.Descr[2]
; END_IF
VM_LABEL L957
VM_RTS

; CORR_UP()
VM_FUNCTION _CORR_UP_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L960
; THEN
; IF
VM_PUSH BOOL X Display.en_RealValue[1]
VM_JZ L961
; THEN
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH REAL X Display.value_REAL[8]
VM_ADD REAL
VM_POP REAL X Display.value_REAL[1]
; IF
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH REAL X Display.value_MaxREAL[1]
VM_CMP_GT REAL
VM_JZ L962
; THEN
VM_PUSH REAL X Display.value_MinREAL[1]
VM_POP REAL X Display.value_REAL[1]
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
EF_BEEP
VM_LABEL L962
; END_IF
VM_JUMP L963
VM_LABEL L961
; IF
VM_PUSH BOOL X Display.en_IntValue[1]
VM_JZ L964
; THEN
VM_PUSH INT X Display.value_INT[1]
VM_PUSH INT X Display.value_INT[8]
VM_ADD INT
VM_POP INT X Display.value_INT[1]
; IF
VM_PUSH INT X Display.value_INT[1]
VM_PUSH INT X Display.value_MaxINT[1]
VM_CMP_GT INT
VM_JZ L965
; THEN
VM_PUSH INT X Display.value_MinINT[1]
VM_POP INT X Display.value_INT[1]
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
EF_BEEP
VM_LABEL L965
; END_IF
VM_LABEL L964
; END_IF
VM_LABEL L963
VM_JUMP L966
VM_LABEL L960
; ELSE
VM_PUSH DINT X mask_List_pos
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_SUB DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X mask_List_pos
; IF
VM_PUSH DINT X mask_List_pos
VM_PUSH_IMM DINT 1
VM_CMP_LT DINT
VM_JZ L968
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH DINT X cnt_Items
VM_POP DINT X mask_List_pos
EF_BEEP
VM_LABEL L968
; END_IF
VM_PUSH_AMP UINT X cfgIO.Link_toCodes[1]
VM_PUSH_AMP UINT X mask_List[1]
VM_PUSH DINT X mask_List_pos
VM_ADDRESS DINT 1 128 16
VM_PUSHI UINT
VM_CAST UINT DINT
VM_ADDRESS DINT 1 179 16
VM_PUSHI UINT
VM_CAST UINT UINT
VM_PUSH DINT X MaskMng.sig_start
VM_CAST DINT UINT
VM_SUB UINT
VM_PUSH_IMM UINT 1
VM_ADD UINT
VM_POP UINT X Display.Descr[1]
VM_PUSH_AMP UINT X mask_List[1]
VM_PUSH DINT X mask_List_pos
VM_ADDRESS DINT 1 128 16
VM_PUSHI UINT
VM_POP UINT X Display.Descr[2]
; END_IF
VM_LABEL L966
VM_RTS

; CORR_PRG()
VM_FUNCTION _CORR_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L969
; THEN
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 3
VM_POP DINT X CurRow_modePRG
VM_JUMP L970
VM_LABEL L969
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L971
; THEN
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.ValueWasChanged
VM_JUMP L972
VM_LABEL L971
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_OFF
VM_CMP_EQ USINT
VM_JZ L973
; THEN
VM_PUSH_IMM USINT 17
VM_PUSH USINT EF SHORT_POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_LABEL L973
; END_IF
VM_LABEL L972
VM_LABEL L970
VM_RTS

; CORR_ENTER()
VM_FUNCTION _CORR_ENTER_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L974
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.ValueWasChanged
VM_LABEL L974
; END_IF
VM_RTS

; MainMenu_DOWN()
VM_FUNCTION _MainMenu_DOWN_
VM_DATA 0
; IF
VM_PUSH DINT X CurRow
VM_PUSH DINT X num_Rows
VM_CMP_LT DINT
VM_JZ L975
; THEN
VM_PUSH_AMP UINT X Display.UoM[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_PUSH_IMM UINT 1
VM_SUB UINT
VM_PUSH_AMP UINT X Display.UoM[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_POPI UINT
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X CurRow
VM_PUSH_AMP UINT X Display.UoM[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_PUSH_IMM UINT 1
VM_ADD UINT
VM_PUSH_AMP UINT X Display.UoM[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_POPI UINT
VM_JUMP L976
VM_LABEL L975
; ELSE
VM_PUSH DINT X Position
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X Position
; IF
VM_PUSH DINT X Position
VM_PUSH DINT X cnt_Items
VM_PUSH DINT X num_Rows
VM_SUB DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_CMP_GT DINT
VM_JZ L978
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM DINT 1
VM_POP DINT X Position
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
VM_LABEL L978
; END_IF
VM_PUSH_IMM BOOL 1
VM_POP BOOL X update_MainMenu_List
; END_IF
VM_LABEL L976
VM_PUSH DINT X Position
VM_PUSH DINT X CurRow
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X CurList_Position
VM_RTS

; MainMenu_UP()
VM_FUNCTION _MainMenu_UP_
VM_DATA 0
; IF
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 1
VM_CMP_GT DINT
VM_JZ L979
; THEN
VM_PUSH_AMP UINT X Display.UoM[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_PUSH_IMM UINT 1
VM_SUB UINT
VM_PUSH_AMP UINT X Display.UoM[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_POPI UINT
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X CurRow
VM_PUSH_AMP UINT X Display.UoM[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_PUSH_IMM UINT 1
VM_ADD UINT
VM_PUSH_AMP UINT X Display.UoM[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_POPI UINT
VM_JUMP L980
VM_LABEL L979
; ELSE
VM_PUSH DINT X Position
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_SUB DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X Position
; IF
VM_PUSH DINT X Position
VM_PUSH_IMM DINT 1
VM_CMP_LT DINT
VM_JZ L982
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH DINT X cnt_Items
VM_PUSH DINT X num_Rows
VM_SUB DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X Position
VM_PUSH DINT X num_Rows
VM_POP DINT X CurRow
VM_LABEL L982
; END_IF
VM_PUSH_IMM BOOL 1
VM_POP BOOL X update_MainMenu_List
; END_IF
VM_LABEL L980
VM_PUSH DINT X Position
VM_PUSH DINT X CurRow
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X CurList_Position
VM_RTS

; MainMenu_ENTER()
VM_FUNCTION _MainMenu_ENTER_
VM_DATA 0
; IF
VM_PUSH_AMP USINT X Display.value_Type[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI USINT
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_JZ L983
; THEN
; IF
VM_PUSH USINT X CurLevel
VM_PUSH_IMM USINT 10
VM_CMP_LT USINT
VM_JZ L984
; THEN
VM_JSR _SaveMenuPos_
VM_PUSH_AMP UINT X Display.Descr[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI UINT
VM_CAST UINT DINT
VM_POP DINT X CurMenuPoint
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getMainMenu
VM_LABEL L984
; END_IF
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 1
VM_POP DINT X Position
VM_JUMP L985
VM_LABEL L983
; IF
VM_PUSH_AMP USINT X Display.value_Type[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI USINT
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L986
; THEN
VM_JSR _SaveMenuPos_
VM_PUSH_AMP INT X Display.value_MinINT[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI INT
VM_CAST INT USINT
VM_PUSH_AMP INT X Display.value_MaxINT[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI INT
VM_CAST INT USINT
VM_JSR _GotoMaskID_USINT_USINT_
VM_PUSH_IMM UINT 0
VM_POP UINT X Display.UoM[1]
VM_PUSH_IMM UINT 0
VM_POP UINT X Display.UoM[2]
VM_PUSH_IMM UINT 0
VM_POP UINT X Display.UoM[3]
VM_PUSH_IMM UINT 0
VM_POP UINT X Display.Descr[1]
VM_PUSH_IMM UINT 0
VM_POP UINT X Display.Descr[2]
VM_PUSH_IMM UINT 0
VM_POP UINT X Display.Descr[3]
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow
VM_JUMP L987
VM_LABEL L986
; IF
VM_PUSH_AMP USINT X Display.value_Type[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI USINT
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_JZ L988
; THEN
VM_JSR _SaveMenuPos_
VM_PUSH_AMP INT X Display.value_MinINT[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI INT
VM_CAST INT USINT
VM_PUSH_AMP INT X Display.value_MaxINT[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI INT
VM_CAST INT USINT
VM_JSR _GotoMaskID_USINT_USINT_
VM_LABEL L988
; END_IF
VM_LABEL L987
VM_LABEL L985
VM_PUSH_IMM DINT 1
VM_POP DINT X CurList_Position
VM_RTS

; MainMenu_ESC()
VM_FUNCTION _MainMenu_ESC_
VM_DATA 0
; IF
VM_PUSH USINT X CurLevel
VM_PUSH_IMM USINT 1
VM_CMP_GT USINT
VM_JZ L989
; THEN
VM_JSR _LoadMenuPos_
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getMainMenu
VM_JUMP L990
VM_LABEL L989
; ELSE
VM_JSR _GlobalEsc_
; END_IF
VM_LABEL L990
VM_RTS

; Hide_Baudrate_Class_DOWN()
VM_FUNCTION _Hide_Baudrate_Class_DOWN_
VM_DATA 0
; CASE
VM_PUSH UDINT X __SYSVA_TMP_VALUE
; OF
VM_CASE UDINT 1200 L993
VM_CASE UDINT 2400 L994
VM_CASE UDINT 4800 L995
VM_CASE UDINT 9600 L996
VM_CASE UDINT 19200 L997
VM_CASE UDINT 38400 L998
VM_CASE UDINT 57600 L999
VM_CASE UDINT 76800 L1000
VM_CASE UDINT 115200 L1001
VM_CASE UDINT 375000 L1002
VM_POP_AWAY UDINT
VM_JUMP L992
VM_LABEL L993
EF_BEEP
VM_PUSH_IMM UDINT 375000
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L992
VM_LABEL L994
VM_PUSH_IMM UDINT 1200
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L992
VM_LABEL L995
VM_PUSH_IMM UDINT 2400
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L992
VM_LABEL L996
VM_PUSH_IMM UDINT 4800
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L992
VM_LABEL L997
VM_PUSH_IMM UDINT 9600
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L992
VM_LABEL L998
VM_PUSH_IMM UDINT 19200
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L992
VM_LABEL L999
VM_PUSH_IMM UDINT 38400
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L992
VM_LABEL L1000
VM_PUSH_IMM UDINT 57600
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L992
VM_LABEL L1001
VM_PUSH_IMM UDINT 76800
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L992
VM_LABEL L1002
VM_PUSH_IMM UDINT 115200
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_LABEL L992
VM_RTS

; Hide_Baudrate_Class_UP()
VM_FUNCTION _Hide_Baudrate_Class_UP_
VM_DATA 0
; CASE
VM_PUSH UDINT X __SYSVA_TMP_VALUE
; OF
VM_CASE UDINT 1200 L1004
VM_CASE UDINT 2400 L1005
VM_CASE UDINT 4800 L1006
VM_CASE UDINT 9600 L1007
VM_CASE UDINT 19200 L1008
VM_CASE UDINT 38400 L1009
VM_CASE UDINT 57600 L1010
VM_CASE UDINT 76800 L1011
VM_CASE UDINT 115200 L1012
VM_CASE UDINT 375000 L1013
VM_POP_AWAY UDINT
VM_JUMP L1003
VM_LABEL L1004
VM_PUSH_IMM UDINT 2400
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L1003
VM_LABEL L1005
VM_PUSH_IMM UDINT 4800
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L1003
VM_LABEL L1006
VM_PUSH_IMM UDINT 9600
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L1003
VM_LABEL L1007
VM_PUSH_IMM UDINT 19200
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L1003
VM_LABEL L1008
VM_PUSH_IMM UDINT 38400
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L1003
VM_LABEL L1009
VM_PUSH_IMM UDINT 57600
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L1003
VM_LABEL L1010
VM_PUSH_IMM UDINT 76800
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L1003
VM_LABEL L1011
VM_PUSH_IMM UDINT 115200
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L1003
VM_LABEL L1012
VM_PUSH_IMM UDINT 375000
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L1003
VM_LABEL L1013
EF_BEEP
VM_PUSH_IMM UDINT 1200
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_LABEL L1003
VM_RTS

; Net_Settings_ESC()
VM_FUNCTION _Net_Settings_ESC_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L1014
; THEN
VM_JSR _GlobalEsc_
VM_JUMP L1015
VM_LABEL L1014
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L1016
; THEN
EF_COMPARE
; IF
VM_PUSH BOOL X Role_Slave
VM_DUP BOOL
VM_JNZ L1018
VM_POP_AWAY BOOL
VM_PUSH BOOL X is_TOP
VM_LABEL L1018
VM_JZ L1017
; THEN
; IF
VM_PUSH UDINT X Temp_MB_Baudrate
VM_PUSH UDINT X BMS2.Baudrate
VM_CMP_NE UDINT
VM_DUP BOOL
VM_JNZ L1020
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Parity
VM_PUSH USINT X BMS2.Parity
VM_CMP_NE USINT
VM_LABEL L1020
VM_DUP BOOL
VM_JNZ L1021
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_StopBits
VM_PUSH USINT X BMS2.StopBits
VM_CMP_NE USINT
VM_LABEL L1021
VM_JZ L1019
; THEN
VM_PUSH_IMM USINT 20
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L1022
VM_LABEL L1019
; ELSE
VM_JSR _GlobalEsc_
; END_IF
VM_LABEL L1022
VM_JUMP L1024
VM_LABEL L1017
; ELSE
; IF
VM_PUSH UDINT X Temp_MB_Baudrate
VM_PUSH UDINT X FBus2.Baudrate
VM_CMP_NE UDINT
VM_DUP BOOL
VM_JNZ L1027
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Parity
VM_PUSH USINT X FBus2.Parity
VM_CMP_NE USINT
VM_LABEL L1027
VM_DUP BOOL
VM_JNZ L1028
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_StopBits
VM_PUSH USINT X FBus2.StopBits
VM_CMP_NE USINT
VM_LABEL L1028
VM_JZ L1026
; THEN
VM_PUSH_IMM USINT 20
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L1029
VM_LABEL L1026
; ELSE
VM_JSR _GlobalEsc_
; END_IF
VM_LABEL L1029
; END_IF
VM_LABEL L1024
VM_LABEL L1016
; END_IF
VM_LABEL L1015
VM_RTS

; Net_Settings_PRG()
VM_FUNCTION _Net_Settings_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L1031
; THEN
EF_STORE_MASK
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
VM_JUMP L1032
VM_LABEL L1031
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L1033
; THEN
EF_COMPARE
; IF
VM_PUSH BOOL X Role_Slave
VM_DUP BOOL
VM_JNZ L1035
VM_POP_AWAY BOOL
VM_PUSH BOOL X is_TOP
VM_LABEL L1035
VM_JZ L1034
; THEN
; IF
VM_PUSH UDINT X Temp_MB_Baudrate
VM_PUSH UDINT X BMS2.Baudrate
VM_CMP_NE UDINT
VM_DUP BOOL
VM_JNZ L1037
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Parity
VM_PUSH USINT X BMS2.Parity
VM_CMP_NE USINT
VM_LABEL L1037
VM_DUP BOOL
VM_JNZ L1038
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_StopBits
VM_PUSH USINT X BMS2.StopBits
VM_CMP_NE USINT
VM_LABEL L1038
VM_JZ L1036
; THEN
VM_PUSH_IMM USINT 20
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L1039
VM_LABEL L1036
; ELSE
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
; END_IF
VM_LABEL L1039
VM_JUMP L1041
VM_LABEL L1034
; ELSE
; IF
VM_PUSH UDINT X Temp_MB_Baudrate
VM_PUSH UDINT X FBus2.Baudrate
VM_CMP_NE UDINT
VM_DUP BOOL
VM_JNZ L1044
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Parity
VM_PUSH USINT X FBus2.Parity
VM_CMP_NE USINT
VM_LABEL L1044
VM_DUP BOOL
VM_JNZ L1045
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_StopBits
VM_PUSH USINT X FBus2.StopBits
VM_CMP_NE USINT
VM_LABEL L1045
VM_JZ L1043
; THEN
VM_PUSH_IMM USINT 20
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L1046
VM_LABEL L1043
; ELSE
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
; END_IF
VM_LABEL L1046
; END_IF
VM_LABEL L1041
VM_LABEL L1033
; END_IF
VM_LABEL L1032
VM_RTS

; Stats_1_UP()
VM_FUNCTION _Stats_1_UP_
VM_DATA 0
VM_PUSH DINT X Display.Index
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X Display.Index
VM_RTS

; Stats_1_DOWN()
VM_FUNCTION _Stats_1_DOWN_
VM_DATA 0
VM_PUSH DINT X Display.Index
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X Display.Index
VM_RTS

; Stats_1_PRG()
VM_FUNCTION _Stats_1_PRG_
VM_DATA 0
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_GE INT
VM_JZ L1048
; THEN
; IF
VM_PUSH DINT X Display.Index
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L1049
; THEN
VM_PUSH_IMM USINT 8
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L1050
VM_LABEL L1049
; IF
VM_PUSH DINT X Display.Index
VM_PUSH_IMM DINT 2
VM_CMP_EQ DINT
VM_JZ L1051
; THEN
VM_PUSH_IMM USINT 9
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L1052
VM_LABEL L1051
; IF
VM_PUSH DINT X Display.Index
VM_PUSH_IMM DINT 3
VM_CMP_EQ DINT
VM_JZ L1053
; THEN
VM_PUSH_IMM USINT 10
VM_JSR _ShowPopUpQuestion_USINT_
VM_LABEL L1053
; END_IF
VM_LABEL L1052
VM_LABEL L1050
VM_JUMP L1054
VM_LABEL L1048
; ELSE
VM_PUSH_IMM USINT 4
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
; END_IF
VM_LABEL L1054
VM_RTS

; EthernetConfig_Mask_ESC()
VM_FUNCTION _EthernetConfig_Mask_ESC_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L1056
; THEN
VM_JSR _GlobalEsc_
VM_JUMP L1057
VM_LABEL L1056
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L1058
; THEN
EF_COMPARE
VM_PUSH_IMM USINT 6
VM_PUSH_IMM BOOL 1
VM_JSR _ShowPopUpQuestion_USINT_BOOL_
VM_LABEL L1058
; END_IF
VM_LABEL L1057
VM_RTS

; EthernetConfig_Mask_PRG()
VM_FUNCTION _EthernetConfig_Mask_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L1059
; THEN
EF_STORE_MASK
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
VM_JUMP L1060
VM_LABEL L1059
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L1061
; THEN
EF_COMPARE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X write_EthernetSettings
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_LABEL L1061
; END_IF
VM_LABEL L1060
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
VM_RTS

; Res_Slave_Settings_Mask_ESC()
VM_FUNCTION _Res_Slave_Settings_Mask_ESC_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L1062
; THEN
VM_JSR _GlobalEsc_
VM_JUMP L1063
VM_LABEL L1062
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L1064
; THEN
EF_COMPARE
VM_PUSH_IMM USINT 6
VM_PUSH_IMM BOOL 1
VM_JSR _ShowPopUpQuestion_USINT_BOOL_
VM_LABEL L1064
; END_IF
VM_LABEL L1063
VM_RTS

; Res_Slave_Settings_Mask_PRG()
VM_FUNCTION _Res_Slave_Settings_Mask_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L1065
; THEN
EF_STORE_MASK
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
VM_JUMP L1066
VM_LABEL L1065
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L1067
; THEN
EF_COMPARE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.setChanges
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_LABEL L1067
; END_IF
VM_LABEL L1066
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
VM_RTS

; Hide_DHCP_BOOL_SWAP_Class_ENTER()
VM_FUNCTION _Hide_DHCP_BOOL_SWAP_Class_ENTER_
VM_DATA 0
; IF
VM_PUSH BOOL X Ethernet.DHCP
VM_NOT BOOL
VM_JZ L1068
; THEN
EF_NEXT_FIELD
VM_LABEL L1068
; END_IF
VM_RTS

; Sequences_Mask_DOWN()
VM_FUNCTION _Sequences_Mask_DOWN_
VM_DATA 0
; IF
VM_PUSH USINT X Display.MaskHeader
VM_PUSH_IMM USINT 1
VM_CMP_LT USINT
VM_DUP BOOL
VM_JZ L1070
VM_POP_AWAY BOOL
VM_PUSH USINT X Display.value_BOOL[7]
VM_PUSH_IMM USINT 0
VM_CMP_NE USINT
VM_LABEL L1070
VM_JZ L1069
; THEN
VM_PUSH USINT X Display.MaskHeader
VM_PUSH_IMM USINT 1
VM_ADD USINT
VM_POP USINT X Display.MaskHeader
VM_LABEL L1069
; END_IF
VM_RTS

; Sequences_Mask_UP()
VM_FUNCTION _Sequences_Mask_UP_
VM_DATA 0
; IF
VM_PUSH USINT X Display.MaskHeader
VM_PUSH_IMM USINT 0
VM_CMP_GT USINT
VM_DUP BOOL
VM_JZ L1072
VM_POP_AWAY BOOL
VM_PUSH USINT X Display.value_BOOL[7]
VM_PUSH_IMM USINT 0
VM_CMP_NE USINT
VM_LABEL L1072
VM_JZ L1071
; THEN
VM_PUSH USINT X Display.MaskHeader
VM_PUSH_IMM USINT 1
VM_SUB USINT
VM_POP USINT X Display.MaskHeader
VM_LABEL L1071
; END_IF
VM_RTS

; Preset_PRG()
VM_FUNCTION _Preset_PRG_
VM_DATA 0
VM_PUSH INT X Display.value_INT[1]
VM_CAST INT USINT
VM_POP USINT X MaskMng.gotoParam
VM_PUSH_IMM DINT 1
VM_POP DINT X CurList_Position
VM_RTS

; Preset_DOWN()
VM_FUNCTION _Preset_DOWN_
VM_DATA 0
VM_PUSH INT X Display.value_INT[1]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT INT
VM_PUSH_IMM INT 20
VM_DIV INT
VM_ADD INT
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X Display.value_INT[1]
; IF
VM_PUSH INT X Display.value_INT[1]
VM_PUSH INT X Display.value_MaxINT[1]
VM_CMP_GT INT
VM_JZ L1073
; THEN
VM_PUSH INT X Display.value_MinINT[1]
VM_POP INT X Display.value_INT[1]
VM_LABEL L1073
; END_IF
VM_PUSH_IMM BOOL 1
VM_POP BOOL X downArrow
VM_RTS

; Preset_UP()
VM_FUNCTION _Preset_UP_
VM_DATA 0
VM_PUSH INT X Display.value_INT[1]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT INT
VM_PUSH_IMM INT 20
VM_DIV INT
VM_SUB INT
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X Display.value_INT[1]
; IF
VM_PUSH INT X Display.value_INT[1]
VM_PUSH INT X Display.value_MinINT[1]
VM_CMP_LT INT
VM_JZ L1074
; THEN
VM_PUSH INT X Display.value_MaxINT[1]
VM_POP INT X Display.value_INT[1]
VM_LABEL L1074
; END_IF
VM_PUSH_IMM BOOL 1
VM_POP BOOL X upArrow
VM_RTS

; Preset_ENTER()
VM_FUNCTION _Preset_ENTER_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X setParam
VM_RTS

; Main_Mask_ESC_DOWN()
VM_FUNCTION _Main_Mask_ESC_DOWN_
VM_DATA 0
VM_SYSTEM 25
VM_RTS

; Goto_FRIDGE_STATS()
VM_FUNCTION _Goto_FRIDGE_STATS_
VM_DATA 0
VM_PUSH_IMM USINT 21
VM_PUSH_IMM USINT 0
VM_JSR _GotoMaskID_USINT_USINT_
VM_RTS

; SwitchPGD()
VM_FUNCTION _SwitchPGD_
VM_DATA 0
VM_PUSH_IMM UINT 28
VM_SYSTEM 44
VM_RTS

; __INIT__()
VM_FUNCTION ___INIT___
VM_DATA 0
VM_PUSH_IMM INT 1
VM_POP INT X IdxImgQM
VM_PUSH_IMM USINT 1
VM_POP USINT EF STATE_PRG_READY
VM_PUSH_IMM USINT 2
VM_POP USINT EF STATE_PRG_ALWAYS_ON
VM_PUSH_IMM USINT 3
VM_POP USINT EF STATE_PRG_ON
VM_PUSH_IMM USINT 0
VM_POP USINT EF STATE_PRG_OFF
VM_PUSH_IMM USINT 5
VM_POP USINT EF POPUP_TIME
VM_PUSH_IMM USINT 1
VM_POP USINT EF SHORT_POPUP_TIME
VM_PUSH_IMM INT 7
VM_POP INT EF QUICK_MENU_ITEMS_NO
VM_PUSH_IMM UINT 3
VM_POP UINT EF DF_MID_MMENU
VM_PUSH_IMM INT 1
VM_POP INT EF IdxQM
VM_RTS
